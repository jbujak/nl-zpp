!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
' . own_to_im_converter::get_function_name	own_to_im_converter.nl	/^	var body : ptd::string() = 'def ' . own_to_im_converter::get_function_name(type, known_types)$/;"	g
(ref ret, '!=', tct::int	tc_types.nl	/^	op_def(ref ret, '!=', tct::int(), tct::int(), tct::bool());$/;"	g
(ref ret, '%', tct::int	tc_types.nl	/^	op_def(ref ret, '%', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '&&', tct::bool	tc_types.nl	/^	op_def(ref ret, '&&', tct::bool(), tct::bool(), tct::bool());$/;"	g
(ref ret, '*', tct::int	tc_types.nl	/^	op_def(ref ret, '*', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '*=', tct::int	tc_types.nl	/^	op_def(ref ret, '*=', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '+', tct::int	tc_types.nl	/^	op_def(ref ret, '+', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '+=', tct::int	tc_types.nl	/^	op_def(ref ret, '+=', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '-', tct::int	tc_types.nl	/^	op_def(ref ret, '-', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '-=', tct::int	tc_types.nl	/^	op_def(ref ret, '-=', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '.', tct::string	tc_types.nl	/^	op_def(ref ret, '.', tct::string(), tct::string(), tct::string());$/;"	g
(ref ret, '.=', tct::string	tc_types.nl	/^	op_def(ref ret, '.=', tct::string(), tct::string(), tct::string());$/;"	g
(ref ret, '/', tct::int	tc_types.nl	/^	op_def(ref ret, '\/', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '/=', tct::int	tc_types.nl	/^	op_def(ref ret, '\/=', tct::int(), tct::int(), tct::int());$/;"	g
(ref ret, '<', tct::int	tc_types.nl	/^	op_def(ref ret, '<', tct::int(), tct::int(), tct::bool());$/;"	g
(ref ret, '<=', tct::int	tc_types.nl	/^	op_def(ref ret, '<=', tct::int(), tct::int(), tct::bool());$/;"	g
(ref ret, '==', tct::int	tc_types.nl	/^	op_def(ref ret, '==', tct::int(), tct::int(), tct::bool());$/;"	g
(ref ret, '>', tct::int	tc_types.nl	/^	op_def(ref ret, '>', tct::int(), tct::int(), tct::bool());$/;"	g
(ref ret, '>=', tct::int	tc_types.nl	/^	op_def(ref ret, '>=', tct::int(), tct::int(), tct::bool());$/;"	g
(ref ret, 'eq', tct::string	tc_types.nl	/^	op_def(ref ret, 'eq', tct::string(), tct::string(), tct::bool());$/;"	g
(ref ret, 'ne', tct::string	tc_types.nl	/^	op_def(ref ret, 'ne', tct::string(), tct::string(), tct::bool());$/;"	g
(ref ret, '||', tct::bool	tc_types.nl	/^	op_def(ref ret, '||', tct::bool(), tct::bool(), tct::bool());$/;"	g
(type_name, arr_type, state->mod_name) . string::lf	generator_c.nl	/^		ret .= get_array_get_fun_def(type_name, arr_type, state->mod_name) . string::lf();$/;"	g
(type_name, arr_type, state->mod_name) . string::lf	generator_c.nl	/^		ret .= get_array_push_fun_def(type_name, arr_type, state->mod_name) . string::lf();$/;"	g
(type_name, hash_type, state->mod_name) . string::lf	generator_c.nl	/^		ret .= get_hash_get_fun_def(type_name, hash_type, state->mod_name) . string::lf();$/;"	g
(type_name, state->mod_name) . string::lf	generator_c.nl	/^		ret .= get_array_len_fun_def(type_name, state->mod_name) . string::lf();$/;"	g
(type_name, state->mod_name) . string::lf	generator_c.nl	/^		ret .= get_hash_next_iter_fun_def(type_name, state->mod_name) . string::lf();$/;"	g
(type_name, state->mod_name) . string::lf	generator_c.nl	/^		ret .= get_variant_make_fun_def(type_name, state->mod_name) . string::lf();$/;"	g
. string::lf	generator_c.nl	/^	print_to_header(ref state, c_def . string::lf());$/;"	g
.= '#define ANON_TYPE_DECL' . name . string::lf	generator_c.nl	/^		c_def .= '#define ANON_TYPE_DECL' . name . string::lf();$/;"	g
.= '#define ANON_TYPE_DEF' . name . string::lf	generator_c.nl	/^		c_def .= '#define ANON_TYPE_DEF' . name . string::lf();$/;"	g
.= '#ifndef ANON_TYPE_DECL' . name . string::lf	generator_c.nl	/^		c_def .= '#ifndef ANON_TYPE_DECL' . name . string::lf();$/;"	g
.= '#ifndef ANON_TYPE_DEF' . name . string::lf	generator_c.nl	/^		c_def .= '#ifndef ANON_TYPE_DEF' . name . string::lf();$/;"	g
.= ';' . string::lf	generator_c.nl	/^	c_def .= ';' . string::lf();$/;"	g
.= 'typedef ' . get_type_to_c(type, '') . ' ' . c_name . ';' . string::lf	generator_c.nl	/^		c_def .= 'typedef ' . get_type_to_c(type, '') . ' ' . c_name . ';' . string::lf();$/;"	g
.= 'typedef struct ' . c_name . ' ' . c_name . ';' . string::lf	generator_c.nl	/^		c_def .= 'typedef struct ' . c_name . ' ' . c_name . ';' . string::lf();$/;"	g
2 = tc_types::get_bin_op_def	type_checker.nl	/^	var op_def2 = tc_types::get_bin_op_def(op);$/;"	g
= tc_types::get_bin_op_def	type_checker.nl	/^		var op_def = tc_types::get_bin_op_def(binary_op->op);$/;"	g
=> ptd::arr	nast.nl	/^			fun_def => ptd::arr(@nast::fun_def_t)$/;"	g
=> ptd::hash	post_processing_t.nl	/^			mat_fun_def => ptd::hash(ptd::string()),$/;"	g
=> ptd::none	generator_c_struct_dependence_sort.nl	/^		def => ptd::none(),$/;"	g
_decl	nast.nl	/^					var_decl => @nast::variable_declaration_t,$/;"	v
_decl	nlasm.nl	/^			var_decl => @nlasm::var_decl_t,$/;"	v
_decl	type_checker.nl	/^				var_decl->tct_type = :type(vars{var_decl->name}->type);$/;"	v
_decl	type_checker.nl	/^			var_decl->declaration->tct_type = :type(vars_case{var_decl->declaration->name}->type);$/;"	v
_decl	type_checker.nl	/^			var_decl->tct_type = :type(vars{var_decl->name}->type);$/;"	v
_decl	type_checker.nl	/^			var_decl->value = :value(value);$/;"	v
_decl	type_checker.nl	/^		var_decl->tct_type = :type(type->type);$/;"	v
_fun	type_checker.nl	/^			def_fun{a}{c} = d;$/;"	l
_reg(ptd::ensure	translator.nl	/^	#	undef_reg(ptd::ensure(@nlasm::reg_t, reg), ref state);$/;"	g
_tab	type_checker.nl	/^	var_tab = array::subarray(var_tab, 1, array::len(var_tab) - 1);$/;"	v
_val	translator.nl	/^		def_val(bin_op->right, destination, new, ref state);$/;"	l
_value	translator.nl	/^			var_value = :arg(get_cast(calc_val(variant->var, ref state), var_type_to_reg_type(inner_type, state->logic->defined_types), ref state));$/;"	v
_value	translator.nl	/^			var_value = :emp;$/;"	v
a	const_evaluator.nl	/^					var a = regs[i] as :yes;$/;"	v
a	generator_c_struct_dependence_sort.nl	/^		var a : @generator_c_struct_dependence_sort::graph_node = rec;$/;"	v
a	post_processing.nl	/^					var a = regs[i] as :yes;$/;"	v
a	type_checker.nl	/^	var a : @tc_types::lval_path = [];$/;"	v
a_arg	pretty_printer.nl	/^			var a_arg = arg->value as :arr_decl;$/;"	v
access_op	generator_c.nl	/^			var access_op = get_access_op(ov_as->src);$/;"	v
access_op	generator_c.nl	/^	var access_op = get_access_op(use_variant->old_owner);$/;"	v
add_block	flow_graph.nl	/^def add_block(ref blocks : @flow_graph::state_t, ref block : @flow_graph::block_t, nr : ptd::string(), last_label : $/;"	l
add_create	ptd_system.nl	/^def add_create(type_name : ptd::string(), ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) : $/;"	l
add_delete	ptd_system.nl	/^def add_delete(type_name : ptd::string(), ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) : $/;"	l
add_error	module_checker.nl	/^def add_error(ref errors : @tc_types::errors_t, msg : ptd::string()) : ptd::void() {$/;"	l
add_error	nparser.nl	/^def add_error(ref state : @nparser::state_t, message : ptd::string()) : ptd::void() {$/;"	l
add_error	ptd_system.nl	/^def add_error(ref errors : @tc_types::errors_t, msg : ptd::string()) : ptd::void() {$/;"	l
add_error	type_checker.nl	/^def add_error(ref errors : @tc_types::errors_t, msg : ptd::string()) : ptd::void() {$/;"	l
add_fun_used	module_checker.nl	/^def add_fun_used(module : ptd::string(), name : ptd::string(), ref state : @module_checker::state_t) : ptd::void() {$/;"	l
add_ref	reference_generator.nl	/^def add_ref(ref ret : @reference_generator::refs, module : @reference_generator::module, place : @nast::place_t, ref_value : @reference_generator::ref_type) {$/;"	l
add_ref_name	ptd_system.nl	/^def add_ref_name(ref from : @tct::meta_type, ref hash : ptd::hash(ptd::arr(ptd::string())), ref arr : ptd::arr(ptd::string()),$/;"	l
add_var	module_checker.nl	/^def add_var(name : ptd::string(), is_const : @boolean_t::type, is_required : @boolean_t::type, initialized :$/;"	l
add_var_dec	module_checker.nl	/^def add_var_dec(var_dec : @nast::variable_declaration_t, is_const : @boolean_t::type, is_required : @boolean_t::type, $/;"	l
add_var_decl_to_vars	type_checker.nl	/^def add_var_decl_to_vars(var_type : @tct::meta_type, name : ptd::string(), ref vars : @tc_types::vars_t) : ptd::void() {$/;"	l
add_var_decl_with_type_and_check	type_checker.nl	/^def add_var_decl_with_type_and_check(ref var_decl : @nast::variable_declaration_t, type : @tc_types::type, ref vars : $/;"	l
add_var_to_vars	type_checker.nl	/^def add_var_to_vars(var_ : @tc_types::var_t, name : ptd::string(), ref vars : @tc_types::vars_t) : ptd::void() {$/;"	l
add_warning	module_checker.nl	/^def add_warning(ref errors : @tc_types::errors_t, msg : ptd::string()) : ptd::void() {$/;"	l
add_warning	type_checker.nl	/^def add_warning(ref errors : @tc_types::errors_t, msg : ptd::string()) : ptd::void() {$/;"	l
after	generator_js.nl	/^		var after = '';$/;"	v
after	generator_js.nl	/^	var after = '';$/;"	v
after	translator.nl	/^		var after = get_sim_label(ref state);$/;"	v
after_all_ifs_instruction_no	translator.nl	/^	var after_all_ifs_instruction_no = get_sim_label(ref state);$/;"	v
after_for_instruction_no	translator.nl	/^	var after_for_instruction_no = get_sim_label(ref state);$/;"	v
after_fora_instruction_no	translator.nl	/^	var after_fora_instruction_no = get_sim_label(ref state);$/;"	v
after_forh_label	translator.nl	/^	var after_forh_label = get_sim_label(ref state);$/;"	v
after_if_instruction_no	translator.nl	/^	var after_if_instruction_no = get_sim_label(ref state);$/;"	v
after_l	translator.nl	/^	var after_l = get_sim_label(ref state);$/;"	v
after_loop_instruction_no	translator.nl	/^	var after_loop_instruction_no = get_sim_label(ref state);$/;"	v
after_rep_label	translator.nl	/^	var after_rep_label = get_sim_label(ref state);$/;"	v
all_commands_num	unnecessary_commands.nl	/^	var all_commands_num = 0;$/;"	v
anon	generator_c.nl	/^			var anon : @boolean_t::type = !hash::has_key(hash_typedef_funs, func->name);$/;"	v
anon_add	generator_c_struct_dependence_sort.nl	/^def anon_add(type : @tct::meta_type, ref anons : ptd::hash(@tct::meta_type)) {$/;"	l
anon_name	generator_c_struct_dependence_sort.nl	/^		var anon_name = anon_naming::get_anon_name(type);$/;"	v
anon_naming	anon_naming.nl	/^def anon_naming::func_ref_to_struct_name(f : ptd::string()) : ptd::string() {$/;"	l
anon_naming	anon_naming.nl	/^def anon_naming::get_anon_name(type : @tct::meta_type) : ptd::string() {$/;"	l
anon_naming	anon_naming.nl	/^def anon_naming::get_anon_name_loop(type : @tct::meta_type) : ptd::string() {$/;"	l
anon_naming::func_ref_to_struct_name	anon_naming.nl	/^def anon_naming::func_ref_to_struct_name(f : ptd::string()) : ptd::string() {$/;"	g
anon_naming::get_anon_name	anon_naming.nl	/^def anon_naming::get_anon_name(type : @tct::meta_type) : ptd::string() {$/;"	g
anon_naming::get_anon_name_loop	anon_naming.nl	/^def anon_naming::get_anon_name_loop(type : @tct::meta_type) : ptd::string() {$/;"	g
anons	generator_c_struct_dependence_sort.nl	/^	var anons : ptd::hash(@tct::meta_type) = {};$/;"	v
append_profile	interpreter.nl	/^def append_profile(ref state : @interpreter::state_t, profile : ptd::arr(@profile_inter::row_t)) : ptd::void() {$/;"	l
arg	generator_c.nl	/^		var arg = [get_reg_ref(ref state, dest), get_im_from_reg(ref state, src)];$/;"	v
arg	generator_c.nl	/^		var arg = [get_reg_ref(ref state, dest), get_reg_value(ref state, src)];$/;"	v
arg	interpreter.nl	/^			var arg = call->args[arg_num];$/;"	v
arg	interpreter.nl	/^		var arg = call->args[idx];$/;"	v
arg	interpreter.nl	/^		var arg = func->args_type[idx];$/;"	v
arg	interpreter.nl	/^		var arg = state->top->vars[if_goto->src->reg_no];$/;"	v
arg	interpreter.nl	/^		var arg = state->top->vars[ov_as->src->reg_no];$/;"	v
arg	interpreter.nl	/^		var arg = state->top->vars[una_op->src->reg_no];$/;"	v
arg	pretty_printer.nl	/^			var arg : @nast::value_t = fun_val->args[0]->val;$/;"	v
arg	ptd.nl	/^		var arg : ptd::arr(ptd::ptd_im()) = [value, type];$/;"	v
arg	ptd.nl	/^	var arg : ptd::arr(ptd::ptd_im()) = [env];$/;"	v
arg	translator.nl	/^				var arg = lvalue[array::len(lvalue) - 1] as :value;$/;"	v
arg	translator.nl	/^				var arg = new_register(ref state, value_type_to_reg_type(fun_arg->val, ref state));$/;"	v
arg	translator.nl	/^			var arg = calc_val(value, ref state);$/;"	v
arg	translator.nl	/^			var arg = get_cast(calc_val(value, ref state), :int, ref state);$/;"	v
arg	translator.nl	/^	var arg : @nlasm::reg_t = calc_val(as_match->val, ref state);$/;"	v
arg	translator.nl	/^	var arg : @nlasm::reg_t;$/;"	v
arg	translator.nl	/^	var arg = :emp;$/;"	v
arg	translator.nl	/^	var arg = calc_val(as_fora->array, ref state);$/;"	v
arg	translator.nl	/^	var arg = new_register(ref state, :im); #TODO set type$/;"	v
arg_dst	translator.nl	/^			var arg_dst = new_register(ref state, var_type_to_reg_type(fun_arg->expected_type, state->logic->defined_types));$/;"	v
arg_num	interpreter.nl	/^	var arg_num = 0;$/;"	v
arg_src	translator.nl	/^			var arg_src = calc_val(fun_arg->val, ref state);$/;"	v
arg_type	type_checker.nl	/^		var arg_type : ptd::string() = own_to_im_converter::get_required_arg_type(type, known_types);$/;"	v
arg_type	type_checker.nl	/^		var arg_type = type_to_ptd(fun_arg->type, ref errors);$/;"	v
arg_type_rim	translator.nl	/^			var arg_type_rim = {by => :val, register => rim, type => fun_arg->tct_type};$/;"	v
arg_type_rref	translator.nl	/^			var arg_type_rref = {by => :ref, register => rref, type => fun_arg->tct_type};			$/;"	v
arg_type_var	type_checker.nl	/^		var arg_type_var : ptd::var({none => ptd::none(), ref => ptd::none()});$/;"	v
args	generator_c.nl	/^		var args = [array::len(decl->src)];$/;"	v
args	generator_c.nl	/^		var args = [array::len(hash_decl->src)];$/;"	v
args	generator_c.nl	/^	var args = state->fun_args;$/;"	v
args	interpreter.nl	/^	var args = [];$/;"	v
args	nparser.nl	/^		var args = [];$/;"	v
args	translator.nl	/^	var args : ptd::arr(@nlasm::reg_t) = [];$/;"	v
args	translator.nl	/^	var args : ptd::arr(ptd::var({val => @nlasm::reg_t, ref => @nlasm::reg_t})) = [];$/;"	v
args	translator.nl	/^	var args = state->result->args_type;$/;"	v
args_size	ptd_parser.nl	/^	var args_size : ptd::string() = array::len(fun_val->args);$/;"	v
args_values_types	type_checker.nl	/^	var args_values_types : ptd::arr(@tc_types::type) = [];$/;"	v
arr	dfile.nl	/^		var arr = [];$/;"	v
arr	interpreter.nl	/^		var arr = [];$/;"	v
arr	interpreter.nl	/^		var arr = state->top->vars[get_frm_idx->src->reg_no];$/;"	v
arr	interpreter.nl	/^		var arr = state->top->vars[set_at_idx->src->reg_no];$/;"	v
arr	pretty_printer.nl	/^		var arr : ptd::arr(ptd::string()) = [];$/;"	v
arr	string.nl	/^	var arr = string::split(pattern, string);$/;"	v
arr	string.nl	/^	var arr = string::to_array(string);$/;"	v
arr	wprinter.nl	/^		var arr : @wprinter::pretty_arr_t = el->arr;$/;"	v
arr_from	ptd_system.nl	/^	var arr_from = [];$/;"	v
arr_names	ptd_system.nl	/^			var arr_names = [];$/;"	v
arr_size	translator.nl	/^	var arr_size = new_register(ref state, :int);$/;"	v
arr_to	ptd_system.nl	/^	var arr_to = [];$/;"	v
array	array.nl	/^def array::add(variable, el) {$/;"	l
array	array.nl	/^def array::append(ref array, append) {$/;"	l
array	array.nl	/^def array::cmp(a, b) {$/;"	l
array	array.nl	/^def array::equal(arr1, arr2) {$/;"	l
array	array.nl	/^def array::insert(ref arr, idx, el) {$/;"	l
array	array.nl	/^def array::is_empty(array) {$/;"	l
array	array.nl	/^def array::join(str, array) {$/;"	l
array	array.nl	/^def array::join_arr(arr1, arr2) {$/;"	l
array	array.nl	/^def array::len(array) {$/;"	l
array	array.nl	/^def array::pop(ref array) {$/;"	l
array	array.nl	/^def array::push(ref array, new) {$/;"	l
array	array.nl	/^def array::remove(ref arr, idx) {$/;"	l
array	array.nl	/^def array::reverse(ref array) {$/;"	l
array	array.nl	/^def array::shift(ref arr) {$/;"	l
array	array.nl	/^def array::sort(ref variable) {$/;"	l
array	array.nl	/^def array::sort_comparator(ref variable, comp) {$/;"	l
array	array.nl	/^def array::subarray(array, beg, len) {$/;"	l
array	array.nl	/^def array::unshift(ref arr, el) {$/;"	l
array::add	array.nl	/^def array::add(variable, el) {$/;"	g
array::append	array.nl	/^def array::append(ref array, append) {$/;"	g
array::cmp	array.nl	/^def array::cmp(a, b) {$/;"	g
array::equal	array.nl	/^def array::equal(arr1, arr2) {$/;"	g
array::insert	array.nl	/^def array::insert(ref arr, idx, el) {$/;"	g
array::is_empty	array.nl	/^def array::is_empty(array) {$/;"	g
array::join	array.nl	/^def array::join(str, array) {$/;"	g
array::join_arr	array.nl	/^def array::join_arr(arr1, arr2) {$/;"	g
array::len	array.nl	/^def array::len(array) {$/;"	g
array::pop	array.nl	/^def array::pop(ref array) {$/;"	g
array::push	array.nl	/^def array::push(ref array, new) {$/;"	g
array::remove	array.nl	/^def array::remove(ref arr, idx) {$/;"	g
array::reverse	array.nl	/^def array::reverse(ref array) {$/;"	g
array::shift	array.nl	/^def array::shift(ref arr) {$/;"	g
array::sort	array.nl	/^def array::sort(ref variable) {$/;"	g
array::sort_comparator	array.nl	/^def array::sort_comparator(ref variable, comp) {$/;"	g
array::subarray	array.nl	/^def array::subarray(array, beg, len) {$/;"	g
array::unshift	array.nl	/^def array::unshift(ref arr, el) {$/;"	g
as_call	post_processing.nl	/^				var as_call = cmd->cmd as :call;$/;"	v
as_const	const_evaluator.nl	/^	var as_const = const as :yes;$/;"	v
as_fun	type_checker.nl	/^	var as_fun = fun_val->value as :fun_val;$/;"	v
as_if	translator.nl	/^	var as_if = {$/;"	v
as_label	interpreter.nl	/^					var as_label = cmd as :prt_lbl;$/;"	v
as_reg	const_evaluator.nl	/^			var as_reg = reg as :yes;$/;"	v
as_yes	const_evaluator.nl	/^	var as_yes = const as :yes;$/;"	v
assign_type	type_checker.nl	/^		var assign_type : @tc_types::type = check_val(value, ref modules, ref vars, ref errors, known_types);$/;"	v
ast	ptd_parser.nl	/^	var ast = ast_arg->value;$/;"	v
asts	compiler.nl	/^	var asts = {};$/;"	v
asts	string_compiler.nl	/^			var asts = {};$/;"	v
asts	string_compiler.nl	/^	var asts = {};$/;"	v
ault_value	generator_c.nl	/^		default_value = '0';$/;"	l
ault_value	generator_c.nl	/^		default_value = 'NULL';$/;"	l
ault_value	generator_c.nl	/^		default_value = 'false';$/;"	l
ault_value	generator_c.nl	/^		default_value = '{$/;"	l
ault_value	generator_c.nl	/^		default_value = '{}';$/;"	l
b	const_evaluator.nl	/^					var b = oregs[i] as :yes;$/;"	v
b	post_processing.nl	/^					var b = oregs[i] as :yes;$/;"	v
beg	string.nl	/^	var beg = 0;$/;"	v
begin	nparser.nl	/^	var begin = ntokenizer::get_place(ref state->state);$/;"	v
begin	pretty_printer.nl	/^	var begin : ptd::string() = open;$/;"	v
begin	translator.nl	/^	var begin : @nast::place_t = {line => debug->end->line, position => debug->end->position - 1};$/;"	v
begin_case	nparser.nl	/^		var begin_case = ntokenizer::get_place(ref state->state);$/;"	v
begin_place	nparser.nl	/^	var begin_place : @nast::place_t = ntokenizer::get_place(ref state->state);$/;"	v
begin_place	nparser.nl	/^	var begin_place = ntokenizer::get_place(ref state->state);$/;"	v
begin_place2	nparser.nl	/^			var begin_place2 : @nast::place_t = ntokenizer::get_place(ref state->state);$/;"	v
bin_op	module_checker.nl	/^		var bin_op = lval->value as :bin_op;$/;"	v
bin_op	nparser.nl	/^		var bin_op = lval->value as :bin_op;$/;"	v
bin_op	translator.nl	/^			var bin_op : @nast::bin_op_t = left->value as :bin_op;$/;"	v
bin_op	translator.nl	/^	var bin_op : @nast::bin_op_t = as_bin_op->value as :bin_op;$/;"	v
bin_op	type_checker.nl	/^		var bin_op = lval->value as :bin_op;$/;"	v
binary_op	type_checker.nl	/^	var binary_op = binary_op_val->value as :bin_op;$/;"	v
block	const_evaluator.nl	/^	var block = blocks[number];$/;"	v
block	flow_graph.nl	/^		var block = hash::get_value(blocks->map, name);$/;"	v
block	flow_graph.nl	/^		var block = hash::get_value(map, name);$/;"	v
block	flow_graph.nl	/^	var block : @flow_graph::block_t = mk_block(0);$/;"	v
block	flow_graph.nl	/^	var block = hash::get_value(map, name);$/;"	v
block	post_processing.nl	/^	var block = blocks[number];$/;"	v
block	unnecessary_commands.nl	/^		var block = blocks[block_nr];$/;"	v
block_name_to_nr	flow_graph.nl	/^def block_name_to_nr(blocks : @flow_graph::state_t) : ptd::arr(@flow_graph::block_t) {$/;"	l
block_state	unnecessary_commands.nl	/^		var block_state = state[block_nr];$/;"	v
blocks	const_evaluator.nl	/^	var blocks : @flow_graph::blocks_t = flow_graph::make_blocks(func->commands, func->args_type);$/;"	v
blocks	flow_graph.nl	/^	var blocks : @flow_graph::state_t = mk_blocks(commands, args_types);$/;"	v
blocks	flow_graph.nl	/^	var blocks : @flow_graph::state_t = {map => {}, tab => []};$/;"	v
blocks	post_processing.nl	/^				var blocks : @flow_graph::blocks_t = flow_graph::make_blocks(fun->commands, fun->args_type);$/;"	v
blocks	unnecessary_commands.nl	/^	var blocks = flow_graph::make_blocks(func->commands, func->args_type);$/;"	v
body	own_to_im_converter.nl	/^	var body : ptd::string() = 'def ' . own_to_im_converter::get_function_name(type, known_types)$/;"	v
bool_t	generator_c.nl	/^def bool_t() : ptd::string() {$/;"	l
boolean	boolean.nl	/^def boolean::check_true(sim) {$/;"	l
boolean	boolean.nl	/^def boolean::to_nl(sim) {$/;"	l
boolean::check_true	boolean.nl	/^def boolean::check_true(sim) {$/;"	g
boolean::to_nl	boolean.nl	/^def boolean::to_nl(sim) {$/;"	g
boolean_t	boolean_t.nl	/^def boolean_t::type() {$/;"	l
boolean_t::type	boolean_t.nl	/^def boolean_t::type() {$/;"	g
branch	type_checker.nl	/^		var branch = branches[i];$/;"	v
branch_var_type	type_checker.nl	/^			var branch_var_type : @tct::meta_type;$/;"	v
branch_var_types	type_checker.nl	/^	var branch_var_types : ptd::hash(@tct::meta_type) = {};$/;"	v
branches	type_checker.nl	/^	var branches : ptd::arr(@nast::match_branch_t) = as_match->branch_list;$/;"	v
break_continue_block	type_checker.nl	/^def break_continue_block(ref cmd : @nast::cmd_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref$/;"	l
build_block_state	unnecessary_commands.nl	/^def build_block_state(ref state : @unnecessary_commands::state_t, blocks : @flow_graph::blocks_t, block_nr : ptd::string(), $/;"	l
build_blocks_states	unnecessary_commands.nl	/^def build_blocks_states(blocks : @flow_graph::blocks_t, reg_size : ptd::string()) : @unnecessary_commands::state_t {$/;"	l
build_commands_graph	unnecessary_commands.nl	/^def build_commands_graph(state : @unnecessary_commands::state_t, blocks : @flow_graph::blocks_t, all_commands_num : $/;"	l
build_empty_state	unnecessary_commands.nl	/^def build_empty_state(reg_size : ptd::string()) : @unnecessary_commands::block_state_t {$/;"	l
build_functions	interpreter.nl	/^def build_functions(nlasms : ptd::arr(@nlasm::result_t)) : ptd::hash(@nlasm::function_t) {$/;"	l
build_labels	interpreter.nl	/^def build_labels(nlasms : ptd::arr(@nlasm::result_t)) : ptd::hash(@interpreter::module_labels_t) {$/;"	l
build_registers	interpreter.nl	/^def build_registers(reg_size) : ptd::arr(ptd::ptd_im()) {$/;"	l
build_state	interpreter.nl	/^def build_state(labels : ptd::hash(@interpreter::module_labels_t), functions : ptd::hash(@nlasm::function_t), $/;"	l
c	dfile.nl	/^		var c = string::substr(str, i, 1);$/;"	v
c	ntokenizer.nl	/^				var c = get_char(ref state);$/;"	v
c_def	generator_c.nl	/^	var c_def = '';$/;"	v
c_name	generator_c.nl	/^	var c_name = '';$/;"	v
cache_path	compiler.nl	/^	var cache_path = input->cache_path;$/;"	v
cache_time	compiler.nl	/^	var cache_time = {};$/;"	v
cal_expr	string_utils.nl	/^def cal_expr(str, ref pos, prio) {$/;"	l
calc_val	translator.nl	/^def calc_val(value : @nast::value_t, ref state : @translator::state_t) : @nlasm::reg_t {$/;"	l
call	generator_c.nl	/^			var call = command as :call;$/;"	v
call	generator_java.nl	/^			var call = command as :call;$/;"	v
call	generator_js.nl	/^			var call = command as :call;$/;"	v
call	generator_js.nl	/^		var call = '';$/;"	v
call	generator_pm.nl	/^			var call = command as :call;$/;"	v
call	interpreter.nl	/^	var call = callback->call;$/;"	v
call_counter	generator_js.nl	/^	var call_counter = 0;$/;"	v
call_graph	compiler.nl	/^		var call_graph = post_processing::get_call_graph(modules);$/;"	v
call_result	interpreter.nl	/^	var call_result;$/;"	v
callback	interpreter.nl	/^	var callback = state->rstate as :callback;$/;"	v
called	module_checker.nl	/^	var called = {func => {}, module => {}};$/;"	v
called	post_processing.nl	/^	var called = {};$/;"	v
called_in	post_processing.nl	/^	var called_in : ptd::hash(ptd::hash(ptd::string())) = {};$/;"	v
called_switched	post_processing.nl	/^	var called_switched = get_called_switched(state->fun_calls, switched);$/;"	v
calls	post_processing.nl	/^			var calls = hash::get_value(hash::get_value(fun_calls, mod_n), pre);$/;"	v
calls	post_processing.nl	/^			var calls = {};$/;"	v
cand_record	ptd_system.nl	/^			var cand_record : @tct::meta_type = hash::get_value(cand_records, name);$/;"	v
cand_records	ptd_system.nl	/^		var cand_records : ptd::hash(@tct::meta_type) = from as :tct_rec;$/;"	v
cand_records	ptd_system.nl	/^		var cand_records : ptd::hash(@tct::meta_type);$/;"	v
case_labels	translator.nl	/^	var case_labels : ptd::arr(ptd::string()) = [];$/;"	v
cases	ptd_system.nl	/^		var cases = type->type as :tct_var;$/;"	v
cast_needed	translator.nl	/^		var cast_needed = !nlasm::eq_reg_type(return_reg_type, destination->type);$/;"	v
cc	translator.nl	/^			var cc = string::substr(str, i, 1);$/;"	v
cchar	ntokenizer.nl	/^		var cchar = get_char(ref state);$/;"	v
change	unnecessary_commands.nl	/^	var change = false;$/;"	v
change_fun	post_processing.nl	/^			var change_fun = false;$/;"	v
change_mod	const_evaluator.nl	/^		var change_mod = false;$/;"	v
change_mod	post_processing.nl	/^		var change_mod = false;$/;"	v
changed_functions	post_processing.nl	/^	var changed_functions = {};$/;"	v
changes	compiler.nl	/^		var changes = 0;$/;"	v
char	compiler_base/csv.nl	/^				var char = string::substr(str, i, 1);$/;"	v
char	compiler_base/csv.nl	/^		var char = get_char(str, ref poz);$/;"	v
char	dfile.nl	/^			var char = get_char(ref state);$/;"	v
char	dfile.nl	/^		var char = get_char(ref state);$/;"	v
char	dfile.nl	/^		var char = string::ord(get_char(ref state));$/;"	v
char	dfile.nl	/^	var char = get_char(ref state);$/;"	v
char	ntokenizer.nl	/^		var char = string::ord(cchar);$/;"	v
char	ntokenizer.nl	/^	var char = get_char(ref state);$/;"	v
char	string_utils.nl	/^		var char = str[pos];$/;"	v
chars	string_utils.nl	/^	var chars = string::to_array(str);$/;"	v
check	string_compiler.nl	/^		var check = {};$/;"	v
check_assignment_info	ptd_system.nl	/^def check_assignment_info(to : @tct::meta_type, from : @tct::meta_type, ref_inf : @tc_types::ref_t, type_src : $/;"	l
check_cmd	module_checker.nl	/^def check_cmd(cmd : @nast::cmd_t, ref state : @module_checker::state_t) {$/;"	l
check_cmd	type_checker.nl	/^def check_cmd(ref cmd : @nast::cmd_t, ref modules : @tc_types::modules_t, ref b_vars : @tc_types::vars_t, ref errors :$/;"	l
check_command	interpreter.nl	/^def check_command(state : @interpreter::state_t, cmd : @nlasm::order_t) : @boolean_t::type {$/;"	l
check_fora	type_checker.nl	/^def check_fora(ref as_fora : @nast::fora_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref errors :$/;"	l
check_forh	type_checker.nl	/^def check_forh(ref as_forh : @nast::forh_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref errors :$/;"	l
check_fun_val	type_checker.nl	/^def check_fun_val(fun_val : @nast::fun_val_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, $/;"	l
check_func	type_checker.nl	/^def check_func(i : ptd::string(), ref modules : @tc_types::modules_t, ref own_conv : ptd::hash(@tct::meta_type), ref module : @nast::module_t, ref def_fun : @tc_types::defs_funs_t, ref errors : @tc_types::errors_t, ref deref : @tc_types::deref_types, known_types : ptd::hash(@tct::meta_type)) : ptd::void() {$/;"	l
check_function_exists	type_checker.nl	/^def check_function_exists(fun_module : ptd::string(), fun_name : ptd::string(), ref modules : @tc_types::modules_t, ref errors $/;"	l
check_info	type_checker.nl	/^			var check_info = ptd_system::cast_type(ok, fun_val_type[1], ref modules, ref errors);$/;"	v
check_info	type_checker.nl	/^			var check_info = ptd_system::check_assignment(ltype->type, rtype, ref modules, ref errors);$/;"	v
check_info	type_checker.nl	/^			var check_info = ptd_system::check_assignment(modules->env->ret_type, ret_type, ref modules, ref errors);$/;"	v
check_info	type_checker.nl	/^			var check_info = ptd_system::check_assignment(ret_types->ok->type, assign_type, ref modules, ref errors);$/;"	v
check_info	type_checker.nl	/^		var check_info = ptd_system::check_assignment(ok_err_types->err, vars_err_type->err_type, ref modules, ref errors);$/;"	v
check_info	type_checker.nl	/^		var check_info;$/;"	v
check_lvalue	module_checker.nl	/^def check_lvalue(lval : @nast::value_t, ref state : @module_checker::state_t) : ptd::void() {$/;"	l
check_lvalue	nparser.nl	/^def check_lvalue(ref state : @nparser::state_t, lval : @nast::value_t) : ptd::void() {$/;"	l
check_match	type_checker.nl	/^def check_match(ref as_match : @nast::match_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref errors$/;"	l
check_module	module_checker.nl	/^def check_module(module_name : ptd::string(), modules : @module_checker::modules_t, ref stack : @module_checker::stack_t, $/;"	l
check_module	type_checker.nl	/^def check_module(ref module : @nast::module_t, ref def_fun : @tc_types::defs_funs_t, ref errors : @tc_types::errors_t, ref$/;"	l
check_modules	compiler.nl	/^def check_modules(ref asts : ptd::hash(@nast::module_t), ref errors : @compiler::errors_group_t, deref : @compiler::deref_t, check_public_fun : @boolean_t::type)$/;"	l
check_rep	type_checker.nl	/^def check_rep(ref as_rep : @nast::rep_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref errors :$/;"	l
check_return_type	module_checker.nl	/^def check_return_type(type : @nast::variable_type_t, ref state : @module_checker::state_t) : @module_checker::return_t {$/;"	l
check_special_function	type_checker.nl	/^def check_special_function(ret_type : @tc_types::type, fun_val : @nast::fun_val_t, fun_val_type : ptd::arr($/;"	l
check_sub	post_processing.nl	/^def check_sub(ref const : @post_processing_t::reg_const, reg : @post_processing_t::reg_const, ref sum : ptd::arr(ptd::string())) {$/;"	l
check_sub_val	const_evaluator.nl	/^def check_sub_val(ref const : @post_processing_t::reg_val_const, reg : @post_processing_t::reg_val_const) {$/;"	l
check_try_ensure	type_checker.nl	/^def check_try_ensure(try_ensure : @nast::try_ensure_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t,$/;"	l
check_type	module_checker.nl	/^def check_type(type : @nast::variable_type_t, ref state : @module_checker::state_t) : ptd::void() {$/;"	l
check_types_imported	module_checker.nl	/^def check_types_imported(type : @tct::meta_type, ref state : @module_checker::state_t) : ptd::void() {$/;"	l
check_types_imported	type_checker.nl	/^def check_types_imported(type : @tct::meta_type, ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) : $/;"	l
check_val	module_checker.nl	/^def check_val(val : @nast::value_t, ref state : @module_checker::state_t) : ptd::void() {$/;"	l
check_val	type_checker.nl	/^def check_val(val : @nast::value_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref errors :$/;"	l
check_var_decl	type_checker.nl	/^def check_var_decl(var_decl : @nast::variable_declaration_t, ref modules : @tc_types::modules_t, ref vars : $/;"	l
check_var_decl_try	type_checker.nl	/^def check_var_decl_try(var_decl : @nast::variable_declaration_t, is_try : @boolean_t::type, ref modules : $/;"	l
check_while	type_checker.nl	/^def check_while(ref as_while : @nast::while_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref errors$/;"	l
checked	module_checker.nl	/^	var checked : ptd::hash(ptd::string()) = {};$/;"	v
clean	register_cleaner.nl	/^def clean(module : @nlasm::result_t) : @nlasm::result_t {	$/;"	l
clean_f	register_cleaner.nl	/^def clean_f(func : @nlasm::function_t) : @nlasm::function_t {$/;"	l
clear_reg	flow_graph.nl	/^def clear_reg(ref block : @flow_graph::block_t, reg : @nlasm::reg_t, cmd_nr : ptd::string()) {$/;"	l
cmd	const_evaluator.nl	/^		var cmd = cmds[i];$/;"	v
cmd	interpreter.nl	/^				var cmd = func->commands[i]->cmd;$/;"	v
cmd	interpreter.nl	/^			var cmd = get_command(state);$/;"	v
cmd	interpreter.nl	/^		var cmd = get_command(state);$/;"	v
cmd	ptd_parser.nl	/^	var cmd = ast->cmd;$/;"	v
cmd	translator.nl	/^	var cmd = {cmd => ord, debug => state->debug, annotation => :none};$/;"	v
cmd	unnecessary_commands.nl	/^			var cmd = blocks[block_nr]->cmds[cmd_nr];$/;"	v
cmd	unnecessary_commands.nl	/^	var cmd = cmd_c->cmd;$/;"	v
cmd_debug	nparser.nl	/^		var cmd_debug : @nast::debug_t = {begin => begin_place, end => ntokenizer::get_place_ws(ref state->state)};$/;"	v
cmds	const_evaluator.nl	/^	var cmds = block->cmds;$/;"	v
cmds	post_processing.nl	/^	var cmds = block->cmds;$/;"	v
cmodule	generator_js.nl	/^	var cmodule = ''; match (function->access) case :pub {$/;"	v
com	post_processing.nl	/^					var com = coms[j];$/;"	v
com	post_processing.nl	/^		var com = cmd->cmd;$/;"	v
com	post_processing.nl	/^		var com = commands[i]->cmd;$/;"	v
comma	string_utils.nl	/^	var comma = false;$/;"	v
command	generator_c.nl	/^		var command = cmd->cmd;$/;"	v
command	generator_java.nl	/^		var command = cmd->cmd;$/;"	v
command	generator_js.nl	/^		var command = cmd->cmd;$/;"	v
command	generator_pm.nl	/^		var command = cmd->cmd;$/;"	v
command	interpreter.nl	/^	var command : @nlasm::cmd_t = get_command(state);$/;"	v
command	interpreter.nl	/^	var command = get_command(state);$/;"	v
command_cmd	interpreter.nl	/^	var command_cmd = command->cmd;$/;"	v
commands	flow_graph.nl	/^	var commands : ptd::arr(@nlasm::cmd_t) = [];$/;"	v
common_type	generator_c_struct_dependence_sort.nl	/^def common_type(a : @generator_c_struct_dependence_sort::decl_def_type , b : @generator_c_struct_dependence_sort::decl_def_type)$/;"	l
compile_ide	compiler.nl	/^def compile_ide(opt_cli : @compiler::input_type) : ptd::void() {$/;"	l
compile_strict_file	compiler.nl	/^def compile_strict_file(opt_cli : @compiler::input_type) : ptd::int() {$/;"	l
compiler	compiler.nl	/^def compiler::compile(cmd_args : ptd::arr(ptd::string())) : ptd::int() {$/;"	l
compiler	compiler.nl	/^def compiler::deref_t() {$/;"	l
compiler	compiler.nl	/^def compiler::destination_t() {$/;"	l
compiler	compiler.nl	/^def compiler::errors_group_t() {$/;"	l
compiler	compiler.nl	/^def compiler::errors_hash_t() {$/;"	l
compiler	compiler.nl	/^def compiler::file_t() {$/;"	l
compiler	compiler.nl	/^def compiler::input_type() {$/;"	l
compiler	compiler.nl	/^def compiler::language_t() {$/;"	l
compiler	compiler.nl	/^def compiler::module_t() {$/;"	l
compiler	compiler.nl	/^def compiler::parse_check_t() {$/;"	l
compiler	compiler.nl	/^def compiler::try_t() {$/;"	l
compiler::compile	compiler.nl	/^def compiler::compile(cmd_args : ptd::arr(ptd::string())) : ptd::int() {$/;"	g
compiler::deref_t	compiler.nl	/^def compiler::deref_t() {$/;"	g
compiler::destination_t	compiler.nl	/^def compiler::destination_t() {$/;"	g
compiler::errors_group_t	compiler.nl	/^def compiler::errors_group_t() {$/;"	g
compiler::errors_hash_t	compiler.nl	/^def compiler::errors_hash_t() {$/;"	g
compiler::file_t	compiler.nl	/^def compiler::file_t() {$/;"	g
compiler::input_type	compiler.nl	/^def compiler::input_type() {$/;"	g
compiler::language_t	compiler.nl	/^def compiler::language_t() {$/;"	g
compiler::module_t	compiler.nl	/^def compiler::module_t() {$/;"	g
compiler::parse_check_t	compiler.nl	/^def compiler::parse_check_t() {$/;"	g
compiler::try_t	compiler.nl	/^def compiler::try_t() {$/;"	g
compiler_lib	compiler_lib.nl	/^def compiler_lib::error_t() {$/;"	l
compiler_lib	compiler_lib.nl	/^def compiler_lib::error_type_t() {$/;"	l
compiler_lib	compiler_lib.nl	/^def compiler_lib::errors_t() {$/;"	l
compiler_lib::error_t	compiler_lib.nl	/^def compiler_lib::error_t() {$/;"	g
compiler_lib::error_type_t	compiler_lib.nl	/^def compiler_lib::error_type_t() {$/;"	g
compiler_lib::errors_t	compiler_lib.nl	/^def compiler_lib::errors_t() {$/;"	g
coms	post_processing.nl	/^				var coms = flow_graph::combine_blocks(blocks);$/;"	v
cond_p	pretty_printer.nl	/^	var cond_p = print_val(cond);$/;"	v
cond_type	type_checker.nl	/^		var cond_type = check_val(ternary_op->fst, ref modules, ref vars, ref errors, known_types);$/;"	v
cond_type	type_checker.nl	/^	var cond_type : @tc_types::type = check_val(as_while->cond, ref modules, ref vars, ref errors, known_types);$/;"	v
condi	translator.nl	/^		var condi = def_val(bin_op->left, destination, new, ref state);$/;"	v
condition	translator.nl	/^	var condition = calc_val(as_while->cond, ref state);$/;"	v
condition	translator.nl	/^	var condition = dest_val(op->fst, ref state);$/;"	v
condition_instruction_no	translator.nl	/^	var condition_instruction_no = get_sim_label(ref state);$/;"	v
condition_l	translator.nl	/^	var condition_l = get_sim_label(ref state);$/;"	v
condition_label	translator.nl	/^	var condition_label = get_sim_label(ref state);$/;"	v
condition_register	translator.nl	/^		var condition_register = calc_val(as_for->cond, ref state);$/;"	v
condition_register	translator.nl	/^	var condition_register = new_register(ref state, :bool);$/;"	v
const	const_evaluator.nl	/^		var const : @post_processing_t::reg_val_const = :yes({nr => i + block->from->reg_no, value => ''});$/;"	v
const	post_processing.nl	/^		var const : @post_processing_t::reg_const = :yes(i + block->from->reg_no);$/;"	v
const_dest	const_evaluator.nl	/^		var const_dest : ptd::arr(@nlasm::reg_t) = [];$/;"	v
const_evaluator	const_evaluator.nl	/^def const_evaluator::evaluate_const_in_modules(ref state : @post_processing_t::state_t, changed_functions : ptd::hash(ptd::string()), ref $/;"	l
const_evaluator::evaluate_const_in_modules	const_evaluator.nl	/^def const_evaluator::evaluate_const_in_modules(ref state : @post_processing_t::state_t, changed_functions : ptd::hash(ptd::string()), ref $/;"	g
const_len	generator_c.nl	/^	var const_len = array::len(sim);$/;"	v
const_len	generator_c.nl	/^	var const_len = sim_len + sing_len + dyna_len;$/;"	v
const_reg	translator.nl	/^	var const_reg = calc_val({debug => value->debug, value => :const(1), type => :tct_int}, ref state);$/;"	v
const_state	compiler.nl	/^		var const_state = post_processing::init(get_mathematical_func(opt_cli), opt_cli->optimization);$/;"	v
const_state	compiler.nl	/^	var const_state = post_processing::init(get_mathematical_func(opt_cli), opt_cli->optimization);$/;"	v
const_state	compiler.nl	/^	var const_state = post_processing::init({}, input->optimization);$/;"	v
construct_error_message	compiler.nl	/^def construct_error_message(error : @compiler_lib::error_t, path_dict) : ptd::string() {$/;"	l
consts	generator_c.nl	/^		var consts = hash::get_value(state->global_const->module_consts, module);$/;"	v
consts	generator_js.nl	/^	var consts = {arr => [], name => '__const_'};$/;"	v
conv_fun_name	own_to_im_converter.nl	/^	var conv_fun_name : ptd::string() = '';$/;"	v
conv_priv_prefix	own_to_im_converter.nl	/^def conv_priv_prefix() : ptd::string() {$/;"	l
convert_str_to_number	translator.nl	/^def convert_str_to_number(str : ptd::string()) : ptd::string() {$/;"	l
cop	post_processing.nl	/^		var cop = cmd;$/;"	v
copy	module_checker.nl	/^		var copy = func_used;$/;"	v
copy	module_checker.nl	/^	var copy = used_functions;$/;"	v
count_len	wprinter.nl	/^def count_len(arr : @wprinter::pretty_arr_t) : ptd::string() {$/;"	l
count_structs	pretty_printer.nl	/^def count_structs(struct : ptd::arr(@nast::fun_val_arg_t)) : ptd::int() {$/;"	l
count_type	type_checker.nl	/^	var count_type : @tc_types::type = check_val(as_rep->count, ref modules, ref vars, ref errors, known_types);$/;"	v
create_own_convertions_module	type_checker.nl	/^def create_own_convertions_module(own_conv : ptd::hash(@tct::meta_type), known_types : ptd::hash(@tct::meta_type),$/;"	l
create_sim	generator_c.nl	/^def create_sim(obj : ptd::string()) : ptd::string() {$/;"	l
create_sim_to_memory	generator_c.nl	/^def create_sim_to_memory(obj : ptd::string(), memory : ptd::string()) : ptd::string() {$/;"	l
cross	type_checker.nl	/^			var cross = type;$/;"	v
cross_type	ptd_system.nl	/^def cross_type(a : @tct::meta_type, b : @tct::meta_type, ref_inf : @tc_types::ref_t, ref modules : @tc_types::modules_t, $/;"	l
csep	compiler_base/csv.nl	/^	var csep = string::ord(sep);$/;"	v
csv	compiler_base/csv.nl	/^def csv::load(str) {$/;"	l
csv	compiler_base/csv.nl	/^def csv::save(arr) {$/;"	l
csv::load	compiler_base/csv.nl	/^def csv::load(str) {$/;"	g
csv::save	compiler_base/csv.nl	/^def csv::save(arr) {$/;"	g
current_destination	translator.nl	/^				var current_destination = destination;$/;"	v
current_line	nparser.nl	/^	var current_line = ntokenizer::get_line(state->state);$/;"	v
current_type	generator_c_struct_dependence_sort.nl	/^	var current_type = :none;$/;"	v
cycle	generator_c_struct_dependence_sort.nl	/^	var cycle = false;$/;"	v
date	compiler.nl	/^	var date = nsystem::localtime(nsystem::time());$/;"	v
debug	nparser.nl	/^	var debug : @nast::debug_t = {begin => begin_place, end => end_place};$/;"	v
decl	nparser.nl	/^	var decl = get_value_nop(ref state);$/;"	v
deep_anon_add	generator_c_struct_dependence_sort.nl	/^def deep_anon_add(type : @tct::meta_type, ref anons : ptd::hash(@tct::meta_type)) {$/;"	l
def_fun	type_checker.nl	/^	var def_fun : @tc_types::defs_funs_t = prepare_def_fun(lib_modules, ref errors);$/;"	v
def_fun	type_checker.nl	/^	var def_fun : @tc_types::defs_funs_t = {};$/;"	v
def_val	translator.nl	/^def def_val(value : @nast::value_t, first : @nlasm::reg_t, second : @nlasm::reg_t, ref state : @translator::state_t) : $/;"	l
default_size	generator_c.nl	/^	var default_size = 16;$/;"	v
default_value	generator_c.nl	/^	var default_value;$/;"	v
defined_types	compiler.nl	/^	var defined_types : ptd::hash(@tct::meta_type) = {};$/;"	v
defined_types	translator.nl	/^				var defined_types = state->logic->defined_types;$/;"	v
delete	unnecessary_commands.nl	/^			var delete = false;$/;"	v
delete_unnecessary_clears_in_blocks	unnecessary_commands.nl	/^def delete_unnecessary_clears_in_blocks(ref blocks : @flow_graph::blocks_t, reg_size : ptd::string(), args_num : ptd::string()) {$/;"	l
delete_unnecessary_commands	post_processing.nl	/^def delete_unnecessary_commands(ref nlasms : ptd::hash(@nlasm::result_t)) {$/;"	l
delete_unnecessary_commands_in_blocks	unnecessary_commands.nl	/^def delete_unnecessary_commands_in_blocks(ref blocks : @flow_graph::blocks_t, reg_size : ptd::string()) {$/;"	l
delete_unused_labels_com	post_processing.nl	/^def delete_unused_labels_com(ref commands : ptd::arr(@nlasm::cmd_t)) : ptd::void() {$/;"	l
deref	type_checker.nl	/^	var deref : @tc_types::deref_types = {delete => [], create => []};$/;"	v
dest	const_evaluator.nl	/^			var dest = const_dest[dest_nr];$/;"	v
dest	generator_c.nl	/^	var dest = -1;$/;"	v
dest	generator_java.nl	/^	var dest = -1;$/;"	v
dest	generator_js.nl	/^	var dest = -1;$/;"	v
dest	generator_pm.nl	/^	var dest = -1;$/;"	v
dest	translator.nl	/^		var dest = lvalue[array::len(lvalue) - 1] as :value;$/;"	v
dest	translator.nl	/^	var dest = lvalue[array::len(lvalue) - 1] as :value;$/;"	v
dest_cast_needed	translator.nl	/^				var dest_cast_needed = !nlasm::eq_reg_type(:im, destination->type);$/;"	v
dest_cast_needed	translator.nl	/^	var dest_cast_needed = !nlasm::eq_reg_type(:im, value_register->type);$/;"	v
dest_cast_needed	translator.nl	/^	var dest_cast_needed = !nlasm::eq_reg_type(type_from_src, destination->type);$/;"	v
dest_val	translator.nl	/^def dest_val(value : @nast::value_t, ref state : @translator::state_t) : @nlasm::reg_t {$/;"	l
destination	translator.nl	/^	var destination;$/;"	v
destination_empty	translator.nl	/^			var destination_empty = nlasm::is_empty(destination);$/;"	v
dfile	dfile.nl	/^def dfile::debug(obj) : ptd::string() {$/;"	l
dfile	dfile.nl	/^def dfile::deep_eq(left, right) {$/;"	l
dfile	dfile.nl	/^def dfile::rs(str, is_key) {$/;"	l
dfile	dfile.nl	/^def dfile::sload(str_im) : ptd::ptd_im() {$/;"	l
dfile	dfile.nl	/^def dfile::ssave(obj) : ptd::string() {$/;"	l
dfile	dfile.nl	/^def dfile::ssave_net_format(obj) : ptd::string() {$/;"	l
dfile	dfile.nl	/^def dfile::state_out() {$/;"	l
dfile	dfile.nl	/^def dfile::state_t() {$/;"	l
dfile	dfile.nl	/^def dfile::try_sload(str_im) : ptd::var({ok => ptd::ptd_im(), err => ptd::string()}) {$/;"	l
dfile::debug	dfile.nl	/^def dfile::debug(obj) : ptd::string() {$/;"	g
dfile::deep_eq	dfile.nl	/^def dfile::deep_eq(left, right) {$/;"	g
dfile::rs	dfile.nl	/^def dfile::rs(str, is_key) {$/;"	g
dfile::sload	dfile.nl	/^def dfile::sload(str_im) : ptd::ptd_im() {$/;"	g
dfile::ssave	dfile.nl	/^def dfile::ssave(obj) : ptd::string() {$/;"	g
dfile::ssave_net_format	dfile.nl	/^def dfile::ssave_net_format(obj) : ptd::string() {$/;"	g
dfile::state_out	dfile.nl	/^def dfile::state_out() {$/;"	g
dfile::state_t	dfile.nl	/^def dfile::state_t() {$/;"	g
dfile::try_sload	dfile.nl	/^def dfile::try_sload(str_im) : ptd::var({ok => ptd::ptd_im(), err => ptd::string()}) {$/;"	g
diff	const_evaluator.nl	/^		var diff = false;$/;"	v
diff	post_processing.nl	/^		var diff = false;$/;"	v
diff_time	compiler_base/profile.nl	/^def diff_time(a, b) {$/;"	l
diff_time	profile_inter.nl	/^def diff_time(a, b) {$/;"	l
dir	compiler.nl	/^		var dir = get_dir(src);$/;"	v
dot	compiler_base/profile.nl	/^		var dot = string::index2(str, '.');$/;"	v
dot	ntokenizer.nl	/^			var dot = 0;$/;"	v
dot	profile_inter.nl	/^		var dot = string::index2(str, '.');$/;"	v
dst	compiler.nl	/^	var dst = input->cache_path . module;$/;"	v
dyna_len	generator_c.nl	/^	var dyna_len = state->const->dynamic_nr;$/;"	v
eat	nparser.nl	/^def eat(ref state : @nparser::state_t, token : ptd::string()) : @boolean_t::type {$/;"	l
eat_non_ws	dfile.nl	/^def eat_non_ws(ref state : @dfile::state_t, ref error : @boolean_t::type) : ptd::string() {$/;"	l
eat_text	nparser.nl	/^def eat_text(ref state : @nparser::state_t) : ptd::var({ok => ptd::string(), err => ptd::string()}) {$/;"	l
eat_ws	dfile.nl	/^def eat_ws(ref state : @dfile::state_t) {$/;"	l
eat_ws	ntokenizer.nl	/^def eat_ws(ref state : @ntokenizer::state_t) {$/;"	l
eat_ws	string_utils.nl	/^def eat_ws(str, ref pos) {$/;"	l
el	compiler.nl	/^		var el = args[i];$/;"	v
el	nparser.nl	/^		var el : @nast::fun_def_arg_t = {mod => :none, type => :none, name => '', tct_type => :none};$/;"	v
el	nparser.nl	/^		var el = {cmd => {debug => cmd_debug, cmd => ret}};$/;"	v
el	nparser.nl	/^	var el = {};$/;"	v
el	pretty_printer.nl	/^		var el : @nast::fun_def_arg_t = function->args[i];$/;"	v
el_value	translator.nl	/^			var el_value = calc_val(el, ref state);$/;"	v
elem	compiler_base/csv.nl	/^	var elem = '';$/;"	v
elem	nparser.nl	/^			var elem = {variant => parse_variant_decl(ref state)};$/;"	v
elem	wprinter.nl	/^		var elem : @wprinter::pretty_t = arr[i];$/;"	v
elem_reg	translator.nl	/^		var elem_reg = calc_val(elem, ref state);$/;"	v
elems	ptd_parser.nl	/^		var elems = {};$/;"	v
elems	ptd_parser.nl	/^	var elems = {};$/;"	v
elems_array	translator.nl	/^	var elems_array = [];$/;"	v
els	wprinter.nl	/^	var els : @wprinter::pretty_arr_t = [];$/;"	v
els_len	wprinter.nl	/^	var els_len : ptd::string() = 0;$/;"	v
elseif	nparser.nl	/^		var elseif = [];$/;"	v
elsif_cond	type_checker.nl	/^			var elsif_cond : @tc_types::type = check_val(elsif_s->cond, ref modules, ref vars, ref errors, known_types);$/;"	v
elsif_s	type_checker.nl	/^			var elsif_s = as_if->elsif[i];$/;"	v
empty_block_state	unnecessary_commands.nl	/^	var empty_block_state : @unnecessary_commands::block_state_t = build_empty_state(reg_size);$/;"	v
empty_type	type_checker.nl	/^	var empty_type = ptd_system::can_delete(ltype, ref modules, ref errors);$/;"	v
end	compiler_base/csv.nl	/^def end(ref ret, ref row, elem) {$/;"	l
end	pretty_printer.nl	/^	var end : ptd::string() = close;$/;"	v
end	translator.nl	/^	var end : @nast::place_t = {line => debug->end->line, position => debug->end->position};$/;"	v
end_label	translator.nl	/^	var end_label = get_sim_label(ref state);$/;"	v
end_place	nparser.nl	/^	var end_place : @nast::place_t = ntokenizer::get_place_ws(ref state->state);$/;"	v
end_place2	nparser.nl	/^			var end_place2 : @nast::place_t = ntokenizer::get_place_ws(ref state->state);$/;"	v
enum	enum.nl	/^def enum::eq(x, y) : @boolean_t::type {$/;"	l
enum::eq	enum.nl	/^def enum::eq(x, y) : @boolean_t::type {$/;"	g
err	nparser.nl	/^			var err : ptd::string() = 'use keyword in wrong context:' . string::lf() . ntokenizer::info(state->state);$/;"	v
err	nparser.nl	/^		var err : ptd::string() = 'error in parse_expr:' . string::lf() . ntokenizer::info(state->state);$/;"	v
err	ptd_system.nl	/^			var err = false;$/;"	v
err	ptd_system.nl	/^		var err = false;$/;"	v
err_left_len	type_checker.nl	/^		var err_left_len = array::len(errors->errors);$/;"	v
err_left_len	type_checker.nl	/^	var err_left_len = array::len(errors->errors);$/;"	v
err_len	type_checker.nl	/^				var err_len = array::len(errors->errors);$/;"	v
err_len	type_checker.nl	/^	var err_len = array::len(errors->errors);$/;"	v
err_type	type_checker.nl	/^	var err_type : @tc_types::type = {type => tct::empty(), src => :speculation};$/;"	v
error	compiler.nl	/^			var error = false;$/;"	v
error	compiler.nl	/^		var error = false;$/;"	v
error	dfile.nl	/^	var error = false;$/;"	v
error_file	compiler.nl	/^	var error_file = 0;$/;"	v
error_message	interpreter.nl	/^	var error_message = :err('incorrect command');$/;"	v
error_modules	compiler.nl	/^	var error_modules = {};$/;"	v
errors	compiler.nl	/^	var errors : @compiler::errors_group_t = {$/;"	v
errors	module_checker.nl	/^	var errors : @tc_types::errors_t = {errors => [], warnings => [], current_line => -1, module => module->name};$/;"	v
errors	string_compiler.nl	/^		var errors = [];$/;"	v
errors	string_compiler.nl	/^	var errors = [];$/;"	v
errors	type_checker.nl	/^	var errors : @tc_types::errors_t = {errors => [], warnings => [], current_line => -1, module => ''};$/;"	v
escape_string	generator_java.nl	/^def escape_string(string) : ptd::string() {$/;"	l
escape_string	generator_js.nl	/^def escape_string(string) : ptd::string() {$/;"	l
et	own.nl	/^		var et;$/;"	v
et	ptd.nl	/^		var et;$/;"	v
et	tct.nl	/^		var et;$/;"	v
evaluate_const	const_evaluator.nl	/^def evaluate_const(func : @nlasm::function_t, module : ptd::string(), ins_nr : ptd::string(), ref const : $/;"	l
evaluate_const_in_blocks	const_evaluator.nl	/^def evaluate_const_in_blocks(ref blocks : @flow_graph::blocks_t, math_fs : @post_processing_t::math_funs_t, func : $/;"	l
evaluate_const_in_function	const_evaluator.nl	/^def evaluate_const_in_function(func : @nlasm::function_t, module : ptd::string(), math_fs : @post_processing_t::math_funs_t, $/;"	l
exec	array.nl	/^def exec(comp, a, b) {$/;"	l
exec	ptd.nl	/^def exec(func, args) {$/;"	l
exec_interpreter	compiler.nl	/^def exec_interpreter(input : @compiler::input_type) : ptd::int() {$/;"	l
execute_bin_op	interpreter.nl	/^def execute_bin_op(left, right, op : ptd::string()) {$/;"	l
execute_una_op	interpreter.nl	/^def execute_una_op(arg, op : ptd::string()) {$/;"	l
exist_name_hash	type_checker.nl	/^	var exist_name_hash : ptd::hash(ptd::string()) = {};$/;"	v
expected_dest_type	translator.nl	/^				var expected_dest_type = :im;$/;"	v
expected_dest_type	translator.nl	/^	var expected_dest_type = :int;$/;"	v
expected_type	translator.nl	/^		var expected_type;$/;"	v
expected_type	translator.nl	/^	var expected_type = :int;$/;"	v
expr	nparser.nl	/^	var expr : @nast::value_only_t;$/;"	v
f	type_checker.nl	/^	var f : @tc_types::special_functions = {};$/;"	v
f	type_checker.nl	/^	var f = get_special_functions();$/;"	v
f_key	const_evaluator.nl	/^			var f_key = mod_n . (fun->access is :pub ? '::' : '_priv::') . fun->name;$/;"	v
f_key	post_processing.nl	/^			var f_key = mod_n . (fun->access is :pub ? '::' : '_priv::') . fun->name;$/;"	v
f_key	post_processing.nl	/^			var f_key = mod_n . pre;$/;"	v
f_key	post_processing.nl	/^			var f_key = module->module_name . (fun->access is :pub ? '::' : '_priv::') . fun->name;$/;"	v
field	type_checker.nl	/^		var field = bin_op->right->value as :hash_key;$/;"	v
field_name	translator.nl	/^					var field_name = bin_op->right->value as :hash_key;$/;"	v
field_name	translator.nl	/^				var field_name = bin_op->right->value as :hash_key;$/;"	v
field_name	translator.nl	/^				var field_name = hash_el->key->value as :hash_key;$/;"	v
fields	generator_c.nl	/^		var fields = [];$/;"	v
fields	type_checker.nl	/^		var fields = left_type->type as :tct_own_rec;$/;"	v
fields	type_checker.nl	/^		var fields = left_type->type as :tct_rec;$/;"	v
file	profile_inter.nl	/^	var file = '';$/;"	v
file_in_cache	compiler.nl	/^	var file_in_cache = {};$/;"	v
files_to_parse	compiler.nl	/^	var files_to_parse : ptd::arr(ptd::rec({dir => ptd::string(), file => ptd::string()})) = [];$/;"	v
fill_binary_op_type	type_checker.nl	/^def fill_binary_op_type(ref binary_op_val : @nast::value_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_fun_val_type	type_checker.nl	/^def fill_fun_val_type(ref fun_val : @nast::value_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_ternary_op_type	type_checker.nl	/^def fill_ternary_op_type(ref ternary_op_val : @nast::value_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_try_ensure_type	type_checker.nl	/^def fill_try_ensure_type(ref try_ensure : @nast::try_ensure_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_unary_op_type	type_checker.nl	/^def fill_unary_op_type(ref unary_op_val : @nast::value_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types	type_checker.nl	/^def fill_value_types(ref value : @nast::value_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_cmd	type_checker.nl	/^def fill_value_types_in_cmd(ref cmd : @nast::cmd_t, b_vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_for	type_checker.nl	/^def fill_value_types_in_for(ref as_for : @nast::for_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_fora	type_checker.nl	/^def fill_value_types_in_fora(ref as_fora : @nast::fora_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_forh	type_checker.nl	/^def fill_value_types_in_forh(ref as_forh : @nast::forh_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_if	type_checker.nl	/^def fill_value_types_in_if(ref as_if : @nast::if_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_if_mod	type_checker.nl	/^def fill_value_types_in_if_mod(ref if_mod : @nast::if_mod_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_match	type_checker.nl	/^def fill_value_types_in_match(ref as_match : @nast::match_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_rep	type_checker.nl	/^def fill_value_types_in_rep(ref as_rep : @nast::rep_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_unless_mod	type_checker.nl	/^def fill_value_types_in_unless_mod(ref unless_mod : @nast::unless_mod_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fill_value_types_in_while	type_checker.nl	/^def fill_value_types_in_while(ref as_while : @nast::while_t, vars : @tc_types::vars_t, modules : @tc_types::modules_t,$/;"	l
fin	ptd_system.nl	/^		var fin = variants;$/;"	v
find_unused_regs	register_cleaner.nl	/^def find_unused_regs(func : @nlasm::function_t) : ptd::hash(@boolean_t::type) {$/;"	l
first	array.nl	/^	var first = true;$/;"	v
first	flow_graph.nl	/^	var first = true;$/;"	v
first	type_checker.nl	/^	var first = true;$/;"	v
first	wprinter.nl	/^	var first : @boolean_t::type = true;$/;"	v
first_instruction_no	translator.nl	/^	var first_instruction_no = get_sim_label(ref state);$/;"	v
first_label	translator.nl	/^	var first_label = get_sim_label(ref state);$/;"	v
flow_graph	flow_graph.nl	/^def flow_graph::block_t() {$/;"	l
flow_graph	flow_graph.nl	/^def flow_graph::blocks_t() {$/;"	l
flow_graph	flow_graph.nl	/^def flow_graph::combine_blocks(blocks : @flow_graph::blocks_t) : ptd::arr(@nlasm::cmd_t) {$/;"	l
flow_graph	flow_graph.nl	/^def flow_graph::make_blocks(commands : ptd::arr(@nlasm::cmd_t), args_types : ptd::arr(@nlasm::arg_type_t)) : ptd::arr($/;"	l
flow_graph	flow_graph.nl	/^def flow_graph::reg_use_t() {$/;"	l
flow_graph	flow_graph.nl	/^def flow_graph::state_t() {$/;"	l
flow_graph::block_t	flow_graph.nl	/^def flow_graph::block_t() {$/;"	g
flow_graph::blocks_t	flow_graph.nl	/^def flow_graph::blocks_t() {$/;"	g
flow_graph::combine_blocks	flow_graph.nl	/^def flow_graph::combine_blocks(blocks : @flow_graph::blocks_t) : ptd::arr(@nlasm::cmd_t) {$/;"	g
flow_graph::make_blocks	flow_graph.nl	/^def flow_graph::make_blocks(commands : ptd::arr(@nlasm::cmd_t), args_types : ptd::arr(@nlasm::arg_type_t)) : ptd::arr($/;"	g
flow_graph::reg_use_t	flow_graph.nl	/^def flow_graph::reg_use_t() {$/;"	g
flow_graph::state_t	flow_graph.nl	/^def flow_graph::state_t() {$/;"	g
flush_inits	module_checker.nl	/^def flush_inits(ref state : @module_checker::state_t, ref inits : @module_checker::init_checker_t) : ptd::void() {$/;"	l
flush_list	wprinter.nl	/^def flush_list(ref state : @wprinter::state_t, list : @wprinter::pretty_arr_t, pref : ptd::string(), len : ptd::string(), ind $/;"	l
flush_sim_statement	pretty_printer.nl	/^def flush_sim_statement(ref state : @wprinter::state_t, st : @wprinter::pretty_t, ind : ptd::int()) : ptd::void() {$/;"	l
for_cond	type_checker.nl	/^			var for_cond : @tc_types::type = check_val(as_for->cond, ref modules, ref vars_op, ref errors, known_types);$/;"	v
fora_arr_type	type_checker.nl	/^	var fora_arr_type : @tc_types::type = ptd_system::can_delete(check_val(as_fora->array, ref modules, ref vars, ref $/;"	v
fora_debug	translator.nl	/^	var fora_debug = state->debug->nast_debug;$/;"	v
forh_debug	translator.nl	/^	var forh_debug = state->debug->nast_debug;$/;"	v
found	nparser.nl	/^		var found = false;$/;"	v
from_inner	ptd_system.nl	/^		var from_inner;$/;"	v
from_var	ptd_system.nl	/^		var from_var;$/;"	v
fun	const_evaluator.nl	/^			var fun = module->functions[i];$/;"	v
fun	post_processing.nl	/^			var fun = module->functions[i];$/;"	v
fun_arg	ptd_parser.nl	/^	var fun_arg : @nast::value_t = fun_val->args[0]->val;$/;"	v
fun_arg	translator.nl	/^		var fun_arg = fun_val->args[i];$/;"	v
fun_arg	type_checker.nl	/^		var fun_arg = fun_def->args[j];$/;"	v
fun_as_type	ptd_system.nl	/^	var fun_as_type : @tct::meta_type = tct::tct_im();$/;"	v
fun_calls	post_processing.nl	/^	var fun_calls = state->fun_calls;$/;"	v
fun_def	type_checker.nl	/^			var fun_def = get_function_def(fun_val->module, fun_val->name, modules);$/;"	v
fun_def	type_checker.nl	/^		var fun_def = get_function_def(as_fun->module, as_fun->name, modules);$/;"	v
fun_def	type_checker.nl	/^		var fun_def = get_special_functions(){fun_name};$/;"	v
fun_def	type_checker.nl	/^	var fun_def : @nast::fun_def_t = module->fun_def[i];$/;"	v
fun_def	type_checker.nl	/^	var fun_def : @tc_types::def_fun_t = get_special_function_def(fun_val->module, fun_val->name);$/;"	v
fun_def_arg	type_checker.nl	/^		var fun_def_arg : @tc_types::fun_arg_t = fun_def->args[i];$/;"	v
fun_header	generator_c.nl	/^		var fun_header = get_function_header(func, state->mod_name);$/;"	v
fun_header	generator_c.nl	/^	var fun_header = '';$/;"	v
fun_in	post_processing.nl	/^	var fun_in = hash::get_value(called_in, key);$/;"	v
fun_key	module_checker.nl	/^		var fun_key = get_fun_key(fun_def->access is :pub ? module->name : '', fun_def->name, module->name);$/;"	v
fun_key	module_checker.nl	/^	var fun_key = get_fun_key(module, name, state->current_module);$/;"	v
fun_label	nparser.nl	/^			var fun_label = :fun_label(parse_fun_label(ref state));$/;"	v
fun_label	nparser.nl	/^		var fun_label = :fun_label(parse_fun_label(ref state));$/;"	v
fun_label_begin	nparser.nl	/^			var fun_label_begin = ntokenizer::get_place(ref state->state);$/;"	v
fun_label_begin	nparser.nl	/^		var fun_label_begin = ntokenizer::get_place(ref state->state);$/;"	v
fun_label_end	nparser.nl	/^			var fun_label_end = ntokenizer::get_place(ref state->state);$/;"	v
fun_label_end	nparser.nl	/^		var fun_label_end = ntokenizer::get_place(ref state->state);$/;"	v
fun_mod	post_processing.nl	/^		var fun_mod = {};$/;"	v
fun_n	post_processing.nl	/^				var fun_n = '::' . as_call->fun_name;$/;"	v
fun_name	const_evaluator.nl	/^			var fun_name = (call->mod eq '' ? module . '_priv' : call->mod) . '::' . call->fun_name;$/;"	v
fun_name	generator_c.nl	/^			var fun_name = get_function_name(func, state->mod_name);$/;"	v
fun_name	generator_c.nl	/^	var fun_name = get_function_name(func, mod_name);$/;"	v
fun_name	generator_js.nl	/^		var fun_name = get_function_name(function, module_name);$/;"	v
fun_name	generator_pm.nl	/^			var fun_name = function->name;$/;"	v
fun_name	module_checker.nl	/^			var fun_name = get_fun_key(fun_def->access is :pub ? module->name : '', fun_def->name, module->name);$/;"	v
fun_name	module_checker.nl	/^			var fun_name = string::substr(ref_name, ix + 2, string::length(ref_name) - ix - 2);$/;"	v
fun_name	own_to_im_converter.nl	/^		var fun_name = string::substr(ref_name, ix + 2, string::length(ref_name) - ix - 2);$/;"	v
fun_name	post_processing.nl	/^			var fun_name = (call->mod eq '' ? mod_name . '_priv' : call->mod) . '::' . call->fun_name;$/;"	v
fun_name	pretty_printer.nl	/^		var fun_name : ptd::string() = get_fun_label(fun_val->name, fun_val->module) . '(';$/;"	v
fun_name	ptd_parser.nl	/^	var fun_name : ptd::string() = fun_val->name;$/;"	v
fun_name	ptd_system.nl	/^	var fun_name : ptd::string();$/;"	v
fun_name	type_checker.nl	/^			var fun_name = string::substr(ref_name, ix + 2, string::length(ref_name) - ix - 2);$/;"	v
fun_name	type_checker.nl	/^	var fun_name = get_function_name(as_fun->module, as_fun->name);$/;"	v
fun_name	type_checker.nl	/^	var fun_name = get_function_name(module->name, fun_def->name);$/;"	v
fun_str	ptd_parser.nl	/^		var fun_str = op->val->value as :fun_label;$/;"	v
fun_val	module_checker.nl	/^			var fun_val = value->value as :fun_val;$/;"	v
fun_val	nparser.nl	/^	var fun_val : @nast::fun_val_t = {module => '', name => '', args => []};$/;"	v
fun_val	pretty_printer.nl	/^	var fun_val = val->value as :fun_val;$/;"	v
fun_val	ptd_parser.nl	/^	var fun_val : @nast::fun_val_t = ast as :fun_val;$/;"	v
fun_val	type_checker.nl	/^			var fun_val = tt->value as :fun_val;$/;"	v
fun_val_arg	type_checker.nl	/^		var fun_val_arg : @nast::fun_val_arg_t = fun_val->args[i];$/;"	v
fun_vars	type_checker.nl	/^	var fun_vars : @tc_types::vars_t = {};$/;"	v
func	func.nl	/^def func::exec(func, args : ptd::arr(ptd::ptd_im())) {$/;"	l
func	func.nl	/^def func::exec_ref(func, ref args : ptd::arr(ptd::ptd_im())) {$/;"	l
func	func.nl	/^def func::exec_with_ref_arg(func, args : ptd::arr(ptd::ptd_im()), ref refs) {$/;"	l
func	func.nl	/^def func::func_t() {$/;"	l
func	interpreter.nl	/^	var func = hash::get_value(state->functions, element->func_key);$/;"	v
func	interpreter.nl	/^	var func = hash::get_value(state->functions, key);$/;"	v
func	interpreter.nl	/^	var func = hash::get_value(state->known_exec_func, call->mod . '::' . call->fun_name);$/;"	v
func	module_checker.nl	/^	var func = {};$/;"	v
func	translator.nl	/^		var func = unary_op->val->value as :fun_label;$/;"	v
func::exec	func.nl	/^def func::exec(func, args : ptd::arr(ptd::ptd_im())) {$/;"	g
func::exec_ref	func.nl	/^def func::exec_ref(func, ref args : ptd::arr(ptd::ptd_im())) {$/;"	g
func::exec_with_ref_arg	func.nl	/^def func::exec_with_ref_arg(func, args : ptd::arr(ptd::ptd_im()), ref refs) {$/;"	g
func::func_t	func.nl	/^def func::func_t() {$/;"	g
func_labels	interpreter.nl	/^	var func_labels = hash::get_value(module_labels, state->top->func_key);$/;"	v
func_used	module_checker.nl	/^	var func_used = {};$/;"	v
function	ptd_system.nl	/^		var function = get_function_def(type_name, ref modules, ref errors);$/;"	v
function	ptd_system.nl	/^	var function = get_function_def(type_name, ref modules, ref errors);$/;"	v
functions	compiler.nl	/^		var functions = {};$/;"	v
functions	interpreter.nl	/^	var functions = {};$/;"	v
funs	type_checker.nl	/^		var funs : ptd::hash(@tc_types::def_fun_t) = {};$/;"	v
funs_to_remove	own_to_im_converter.nl	/^	var funs_to_remove : ptd::arr(ptd::string()) = [];$/;"	v
gather_types	type_checker.nl	/^def gather_types(modules : ptd::hash(@nast::module_t)) : ptd::hash(@tct::meta_type) {$/;"	l
gen_bin_ops	generator_c.nl	/^def gen_bin_ops() : ptd::hash(ptd::string()) {$/;"	l
gen_bin_ops_mod	generator_c.nl	/^def gen_bin_ops_mod() : ptd::hash(ptd::string()) {$/;"	l
gen_unary_ops	generator_c.nl	/^def gen_unary_ops() : ptd::hash(ptd::string()) {$/;"	l
generate_call	generator_c.nl	/^def generate_call(ref state : @generator_c::state_t, call : @nlasm::call_t) : ptd::void() {$/;"	l
generate_global_const_files	generator_c.nl	/^def generate_global_const_files(ref state : @generator_c::state_t) : @generator_c::module_out_t {$/;"	l
generate_imm	generator_c.nl	/^def generate_imm(ref state : @generator_c::state_t, obj) : ptd::void() {$/;"	l
generate_modules_to_files	compiler.nl	/^def generate_modules_to_files(modules : ptd::hash(@nlasm::result_t), nianio_files : @compiler::module_t, cache_path : $/;"	l
generator_c	generator_c.nl	/^def generator_c::clear_module_from_state(ref state : @generator_c::state_t, module : ptd::string()) {$/;"	l
generator_c	generator_c.nl	/^def generator_c::const_dict() {$/;"	l
generator_c	generator_c.nl	/^def generator_c::const_t() {$/;"	l
generator_c	generator_c.nl	/^def generator_c::fun_args_t() {$/;"	l
generator_c	generator_c.nl	/^def generator_c::generate(nlasms : ptd::hash(@nlasm::result_t), ref state : @generator_c::state_t) : @generator_c::out_t {$/;"	l
generator_c	generator_c.nl	/^def generator_c::get_empty_state() : @generator_c::state_t {$/;"	l
generator_c	generator_c.nl	/^def generator_c::global_const_t() {$/;"	l
generator_c	generator_c.nl	/^def generator_c::module_out_t() {$/;"	l
generator_c	generator_c.nl	/^def generator_c::out_t() {$/;"	l
generator_c	generator_c.nl	/^def generator_c::state_t() {$/;"	l
generator_c::clear_module_from_state	generator_c.nl	/^def generator_c::clear_module_from_state(ref state : @generator_c::state_t, module : ptd::string()) {$/;"	g
generator_c::const_dict	generator_c.nl	/^def generator_c::const_dict() {$/;"	g
generator_c::const_t	generator_c.nl	/^def generator_c::const_t() {$/;"	g
generator_c::fun_args_t	generator_c.nl	/^def generator_c::fun_args_t() {$/;"	g
generator_c::generate	generator_c.nl	/^def generator_c::generate(nlasms : ptd::hash(@nlasm::result_t), ref state : @generator_c::state_t) : @generator_c::out_t {$/;"	g
generator_c::get_empty_state	generator_c.nl	/^def generator_c::get_empty_state() : @generator_c::state_t {$/;"	g
generator_c::global_const_t	generator_c.nl	/^def generator_c::global_const_t() {$/;"	g
generator_c::module_out_t	generator_c.nl	/^def generator_c::module_out_t() {$/;"	g
generator_c::out_t	generator_c.nl	/^def generator_c::out_t() {$/;"	g
generator_c::state_t	generator_c.nl	/^def generator_c::state_t() {$/;"	g
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::decl_def_type() {$/;"	l
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::graph(){$/;"	l
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::graph_node() {$/;"	l
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::is_divisible(type : @tct::meta_type) : @boolean_t::type {$/;"	l
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::result_element() {$/;"	l
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::result_t() {$/;"	l
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::sort(funs : ptd::arr(@nlasm::function_t), module : ptd::string())$/;"	l
generator_c_struct_dependence_sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::sorted_element() {$/;"	l
generator_c_struct_dependence_sort::decl_def_type	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::decl_def_type() {$/;"	g
generator_c_struct_dependence_sort::graph	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::graph(){$/;"	g
generator_c_struct_dependence_sort::graph_node	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::graph_node() {$/;"	g
generator_c_struct_dependence_sort::is_divisible	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::is_divisible(type : @tct::meta_type) : @boolean_t::type {$/;"	g
generator_c_struct_dependence_sort::result_element	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::result_element() {$/;"	g
generator_c_struct_dependence_sort::result_t	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::result_t() {$/;"	g
generator_c_struct_dependence_sort::sort	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::sort(funs : ptd::arr(@nlasm::function_t), module : ptd::string())$/;"	g
generator_c_struct_dependence_sort::sorted_element	generator_c_struct_dependence_sort.nl	/^def generator_c_struct_dependence_sort::sorted_element() {$/;"	g
generator_function_name	generator_pm.nl	/^			var generator_function_name = get_function_access(sin_fun->access, state->module_name) . sin_fun->name;$/;"	v
generator_java	generator_java.nl	/^def generator_java::generate(nlasm : @nlasm::result_t) : ptd::string() {$/;"	l
generator_java::generate	generator_java.nl	/^def generator_java::generate(nlasm : @nlasm::result_t) : ptd::string() {$/;"	g
generator_js	generator_js.nl	/^def generator_js::generate(nlasm : @nlasm::result_t, namespace : ptd::string()) : ptd::string() {$/;"	l
generator_js::generate	generator_js.nl	/^def generator_js::generate(nlasm : @nlasm::result_t, namespace : ptd::string()) : ptd::string() {$/;"	g
generator_pm	generator_pm.nl	/^def generator_pm::fun_args_t() {$/;"	l
generator_pm	generator_pm.nl	/^def generator_pm::generate(nlasm : @nlasm::result_t) : ptd::string() {$/;"	l
generator_pm	generator_pm.nl	/^def generator_pm::state_t() {$/;"	l
generator_pm::fun_args_t	generator_pm.nl	/^def generator_pm::fun_args_t() {$/;"	g
generator_pm::generate	generator_pm.nl	/^def generator_pm::generate(nlasm : @nlasm::result_t) : ptd::string() {$/;"	g
generator_pm::state_t	generator_pm.nl	/^def generator_pm::state_t() {$/;"	g
generator_state	compiler.nl	/^		var generator_state = get_generator_state(opt_cli->language);$/;"	v
generator_state	compiler.nl	/^	var generator_state = get_generator_state(opt_cli->language);$/;"	v
get_access_op	generator_c.nl	/^def get_access_op(reg : @nlasm::reg_t) : ptd::string() {$/;"	l
get_additional_type_functions_decl	generator_c.nl	/^def get_additional_type_functions_decl(type_name : ptd::string(), type : @tct::meta_type, state : @generator_c::state_t) : ptd::string() {$/;"	l
get_additional_type_functions_def	generator_c.nl	/^def get_additional_type_functions_def(type_name : ptd::string(), type : @tct::meta_type, state : @generator_c::state_t)$/;"	l
get_all_nianio_file	compiler.nl	/^def get_all_nianio_file(path : ptd::string()) : ptd::arr(ptd::string()) {$/;"	l
get_all_ref_in_type	ptd_system.nl	/^def get_all_ref_in_type(type : @tct::meta_type, ref refs : ptd::hash(ptd::string()), ref modules : @tc_types::modules_t, $/;"	l
get_anons	generator_c_struct_dependence_sort.nl	/^def get_anons(funs : ptd::arr(@nlasm::function_t)) : ptd::hash(@tct::meta_type) {$/;"	l
get_array_get_fun_def	generator_c.nl	/^def get_array_get_fun_def(array_type_name : ptd::string(), array_type : @tct::meta_type, mod_name : ptd::string()) {$/;"	l
get_array_get_fun_header	generator_c.nl	/^def get_array_get_fun_header(array_type_name : ptd::string(), array_type : @tct::meta_type, mod_name : ptd::string()) {$/;"	l
get_array_get_fun_name	generator_c.nl	/^def get_array_get_fun_name(array_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_array_len_fun_def	generator_c.nl	/^def get_array_len_fun_def(array_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_array_len_fun_header	generator_c.nl	/^def get_array_len_fun_header(array_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_array_len_fun_name	generator_c.nl	/^def get_array_len_fun_name(array_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_array_push_fun_def	generator_c.nl	/^def get_array_push_fun_def(array_type_name : ptd::string(), array_type : @tct::meta_type, mod_name : ptd::string()) {$/;"	l
get_array_push_fun_header	generator_c.nl	/^def get_array_push_fun_header(array_type_name : ptd::string(), array_type : @tct::meta_type, mod_name : ptd::string()) {$/;"	l
get_array_push_fun_name	generator_c.nl	/^def get_array_push_fun_name(array_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_assign	generator_c.nl	/^def get_assign(ref state : @generator_c::state_t, reg : @nlasm::reg_t, right : ptd::string()) : ptd::string() {$/;"	l
get_bin_ops	generator_c.nl	/^def get_bin_ops() : ptd::hash(ptd::string()) {$/;"	l
get_bin_ops_mod	generator_c.nl	/^def get_bin_ops_mod() : ptd::hash(ptd::string()) {$/;"	l
get_binary_ops	tc_types.nl	/^def get_binary_ops() : ptd::hash(@tc_types::bin_op_type) {$/;"	l
get_called_switched	post_processing.nl	/^def get_called_switched(fun_calls : @post_processing_t::fun_tree_t, switched : @post_processing_t::math_funs_t) : $/;"	l
get_case_name	generator_c.nl	/^def get_case_name(field : ptd::string()) : ptd::string() {$/;"	l
get_cast	translator.nl	/^def get_cast(reg : @nlasm::reg_t, expected_type : @nlasm::reg_type, ref state : @translator::state_t) : @nlasm::reg_t {$/;"	l
get_char	compiler_base/csv.nl	/^def get_char(str, ref poz) {$/;"	l
get_char	dfile.nl	/^def get_char(ref state : @dfile::state_t) : ptd::string() {$/;"	l
get_char	ntokenizer.nl	/^def get_char(ref state : @ntokenizer::state_t) : ptd::string() {$/;"	l
get_char_oper	ntokenizer.nl	/^def get_char_oper() : ptd::arr(ptd::string()) {$/;"	l
get_class_name	generator_java.nl	/^def get_class_name(module_name : ptd::string()) {$/;"	l
get_command	interpreter.nl	/^def get_command(state : @interpreter::state_t) : @nlasm::cmd_t {$/;"	l
get_command_for_const	post_processing.nl	/^def get_command_for_const() : @post_processing_t::math_funs_t {$/;"	l
get_compiler_functions	interpreter.nl	/^def get_compiler_functions() : ptd::hash(ptd::string()) {$/;"	l
get_compressed_fun_val	pretty_printer.nl	/^def get_compressed_fun_val(arg : @nast::value_t, open : ptd::string(), close : ptd::string()) : @wprinter::pretty_t {$/;"	l
get_const	generator_c.nl	/^def get_const(ref type : @generator_c::const_t, key : ptd::string()) : ptd::string() {$/;"	l
get_const_sim	generator_c.nl	/^def get_const_sim(ref state : @generator_c::state_t, sim : ptd::string()) : ptd::string() {$/;"	l
get_const_singleton	generator_c.nl	/^def get_const_singleton(ref state : @generator_c::state_t, sim : ptd::string()) : ptd::string() {$/;"	l
get_cr	generator_c.nl	/^def get_cr() : ptd::string() {$/;"	l
get_debug_from_begin	nparser.nl	/^def get_debug_from_begin(state : @nparser::state_t) : @nast::debug_t {$/;"	l
get_default_deref_file	compiler.nl	/^def get_default_deref_file() : ptd::string() {$/;"	l
get_default_math_file	compiler.nl	/^def get_default_math_file() : ptd::string() {$/;"	l
get_dir	compiler.nl	/^def get_dir(path : ptd::string()) : ptd::string() {$/;"	l
get_dir_cache_name	compiler.nl	/^def get_dir_cache_name() : ptd::string() {$/;"	l
get_dir_pretty_name	compiler.nl	/^def get_dir_pretty_name() : ptd::string() {$/;"	l
get_empty_value	generator_c.nl	/^def get_empty_value(type : @tct::meta_type) : ptd::string() {$/;"	l
get_end_list	nparser.nl	/^def get_end_list() : ptd::arr(ptd::string()) {$/;"	l
get_field_name	generator_c.nl	/^def get_field_name(field : ptd::string()) : ptd::string() {$/;"	l
get_files_to_parse	compiler.nl	/^def get_files_to_parse(input : @compiler::input_type) : @compiler::module_t {$/;"	l
get_fun_def_key	type_checker.nl	/^def get_fun_def_key(func : @tc_types::def_fun_t) : ptd::string() {$/;"	l
get_fun_key	module_checker.nl	/^def get_fun_key(module : ptd::string(), name : ptd::string(), cur_mod : ptd::string()) : ptd::string() {$/;"	l
get_fun_key	type_checker.nl	/^def get_fun_key(fun_name : ptd::string(), fun_module : ptd::string()) : ptd::string() {$/;"	l
get_fun_label	pretty_printer.nl	/^def get_fun_label(fun_name : ptd::string(), fun_module : ptd::string()) : ptd::string() {$/;"	l
get_fun_lib	generator_c.nl	/^def get_fun_lib(fun_name : ptd::string(), args : ptd::arr(ptd::string())) : ptd::string() {$/;"	l
get_fun_module	type_checker.nl	/^def get_fun_module(fun_module : ptd::string(), module : ptd::string()) : ptd::string() {$/;"	l
get_fun_name	generator_c.nl	/^def get_fun_name(mod : ptd::string(), fun_name : ptd::string(), mod_name : ptd::string()) : ptd::string() {$/;"	l
get_fun_name	generator_c_struct_dependence_sort.nl	/^def get_fun_name(fun : ptd::string()) : ptd::string() {$/;"	l
get_fun_name	tct.nl	/^def get_fun_name(fun : ptd::string()) : ptd::string() {$/;"	l
get_func_key	interpreter.nl	/^def get_func_key(func : @nlasm::function_t, module : ptd::string()) : ptd::string() {$/;"	l
get_func_pointer	generator_c.nl	/^def get_func_pointer(ref state : @generator_c::state_t, module_name : ptd::string(), fun_name : ptd::string()) : ptd::string() {$/;"	l
get_func_ptr_header	generator_c.nl	/^def get_func_ptr_header(func : @nlasm::function_t, mod_name : ptd::string()) : ptd::string() {$/;"	l
get_function	type_checker.nl	/^def get_function(fun_module : ptd::string(), fun_name : ptd::string(), ref modules : @tc_types::modules_t) : @tc_types::def_fun_t {$/;"	l
get_function_access	generator_pm.nl	/^def get_function_access(access : @nlasm::access_t, module_name : ptd::string()) : ptd::string() {$/;"	l
get_function_call_name	generator_js.nl	/^def get_function_call_name(function : @nlasm::function_t, module_name : ptd::string()) {$/;"	l
get_function_call_name_raw	generator_js.nl	/^def get_function_call_name_raw(function_name : ptd::string(), module_name : ptd::string()) {$/;"	l
get_function_declaration	generator_java.nl	/^def get_function_declaration(function : @nlasm::function_t) {$/;"	l
get_function_def	ptd_system.nl	/^def get_function_def(type_name : ptd::string(), ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) : $/;"	l
get_function_def	type_checker.nl	/^def get_function_def(fun_module : ptd::string(), fun_name : ptd::string(), modules : @tc_types::modules_t) : $/;"	l
get_function_header	generator_c.nl	/^def get_function_header(func : @nlasm::function_t, mod_name : ptd::string()) : ptd::string() {$/;"	l
get_function_name	generator_c.nl	/^def get_function_name(func : @nlasm::function_t, mod_name : ptd::string()) : ptd::string() {$/;"	l
get_function_name	generator_java.nl	/^def get_function_name(function : @nlasm::function_t) {$/;"	l
get_function_name	generator_js.nl	/^def get_function_name(function : @nlasm::function_t, module_name : ptd::string()) {$/;"	l
get_function_name	type_checker.nl	/^def get_function_name(fun_module : ptd::string(), fun_name : ptd::string()) : ptd::string() {$/;"	l
get_generator_state	compiler.nl	/^def get_generator_state(language : @compiler::language_t) : @generator_c::state_t {$/;"	l
get_global_const	generator_c.nl	/^def get_global_const(ref global_const : @generator_c::global_const_t, key : ptd::string(), module : ptd::string()) : ptd::string() {$/;"	l
get_hash_get_fun_def	generator_c.nl	/^def get_hash_get_fun_def(hash_type_name : ptd::string(), hash_type : @tct::meta_type, mod_name : ptd::string()) {$/;"	l
get_hash_get_fun_header	generator_c.nl	/^def get_hash_get_fun_header(hash_type_name : ptd::string(), hash_type : @tct::meta_type, mod_name : ptd::string()) {$/;"	l
get_hash_get_fun_name	generator_c.nl	/^def get_hash_get_fun_name(hash_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_hash_next_iter_fun_def	generator_c.nl	/^def get_hash_next_iter_fun_def(hash_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_hash_next_iter_fun_header	generator_c.nl	/^def get_hash_next_iter_fun_header(hash_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_hash_next_iter_fun_name	generator_c.nl	/^def get_hash_next_iter_fun_name(hash_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_im_from_reg	generator_c.nl	/^def get_im_from_reg(ref state : @generator_c::state_t, reg : @nlasm::reg_t) : ptd::string() {$/;"	l
get_include	generator_c.nl	/^def get_include(import : ptd::string()) : ptd::string() {$/;"	l
get_ind	dfile.nl	/^def get_ind(ind : ptd::int()) : ptd::string() {$/;"	l
get_inline_bin_op	generator_c.nl	/^def get_inline_bin_op(ref state : @generator_c::state_t, left : @nlasm::reg_t, right : @nlasm::reg_t, op : ptd::string()) : ptd::string(){$/;"	l
get_keywords	ntokenizer.nl	/^def get_keywords() : ptd::hash(ptd::string()) {$/;"	l
get_known_func	compiler.nl	/^def get_known_func() : ptd::hash(@interpreter::known_exec_func_t) {$/;"	l
get_label_number	translator.nl	/^def get_label_number(ref state : @translator::state_t, variant : @tct::meta_type, label : ptd::string()) : ptd::string() {$/;"	l
get_lett_oper	ntokenizer.nl	/^def get_lett_oper() : ptd::hash(ptd::string()) {$/;"	l
get_lib_fun	generator_c.nl	/^def get_lib_fun(fun_name : ptd::string()) : ptd::string() {$/;"	l
get_line_width	wprinter.nl	/^def get_line_width() : ptd::string() {$/;"	l
get_loop_from_stack	module_checker.nl	/^def get_loop_from_stack(last_elem : ptd::string(), stack : @module_checker::stack_t) : ptd::arr(ptd::string()) {$/;"	l
get_math_fun	post_processing.nl	/^def get_math_fun(arch : @post_processing_t::fun_tree_t, mat_fun : ptd::hash(ptd::string())) : @post_processing_t::math_funs_t {$/;"	l
get_mathematical_func	compiler.nl	/^def get_mathematical_func(opt_cli : @compiler::input_type) : ptd::hash(ptd::int()) {$/;"	l
get_module_name	compiler.nl	/^def get_module_name(path : ptd::string()) : ptd::string() {$/;"	l
get_module_name	generator_c.nl	/^def get_module_name(mod : ptd::string()) : ptd::string() {$/;"	l
get_module_name	generator_c_struct_dependence_sort.nl	/^def get_module_name(fun : ptd::string()) : ptd::string() {$/;"	l
get_name	generator_c_struct_dependence_sort.nl	/^def get_name(type : @tct::meta_type) : ptd::string() {$/;"	l
get_namespace_name	generator_js.nl	/^def get_namespace_name() {$/;"	l
get_next_char	ntokenizer.nl	/^def get_next_char(ref state : @ntokenizer::state_t) : ptd::string() {$/;"	l
get_next_token	ntokenizer.nl	/^def get_next_token(ref state : @ntokenizer::state_t) : ptd::void() {$/;"	l
get_number	string_utils.nl	/^def get_number(str, ref pos) {$/;"	l
get_out_ext	compiler.nl	/^def get_out_ext(language : @compiler::language_t) : ptd::string() {$/;"	l
get_own_conv_defs	type_checker.nl	/^def get_own_conv_defs(ref defs : ptd::hash(ptd::string()), types : ptd::hash(@tct::meta_type),$/;"	l
get_print_check_info	type_checker.nl	/^def get_print_check_info(check_info : @tc_types::check_info) : ptd::string() {$/;"	l
get_print_tct_label	type_checker.nl	/^def get_print_tct_label(type : @tct::meta_type) : ptd::string() {$/;"	l
get_print_tct_type_name	type_checker.nl	/^def get_print_tct_type_name(type : @tct::meta_type) : ptd::string() {$/;"	l
get_profile_file_name	compiler.nl	/^def get_profile_file_name(dir) {$/;"	l
get_profile_global	compiler_base/profile.nl	/^def get_profile_global() {$/;"	l
get_ref_in_type	ptd_system.nl	/^def get_ref_in_type(type : @tct::meta_type, ref refs : ptd::hash(ptd::string())) : ptd::void() {$/;"	l
get_reg	generator_c.nl	/^def get_reg(ref state : @generator_c::state_t, reg : @nlasm::reg_t) : ptd::string() {$/;"	l
get_reg_ref	generator_c.nl	/^def get_reg_ref(ref state : @generator_c::state_t, reg : @nlasm::reg_t) : ptd::string() {$/;"	l
get_reg_value	generator_c.nl	/^def get_reg_value(ref state : @generator_c::state_t, reg : @nlasm::reg_t) : ptd::string() {$/;"	l
get_required_types_list	generator_c_struct_dependence_sort.nl	/^def get_required_types_list(type : @tct::meta_type, ref node : @generator_c_struct_dependence_sort::graph_node,$/;"	l
get_sep	wprinter.nl	/^def get_sep() : @wprinter::pretty_t {$/;"	l
get_sim_label	translator.nl	/^def get_sim_label(ref state : @translator::state_t) : ptd::string() {$/;"	l
get_special_function_def	type_checker.nl	/^def get_special_function_def(module : ptd::string(), name : ptd::string()) : @tc_types::def_fun_t {$/;"	l
get_special_functions	type_checker.nl	/^def get_special_functions() : @tc_types::special_functions {$/;"	l
get_stack_element_debug	interpreter.nl	/^def get_stack_element_debug(element : @interpreter::stack_element_t, state : @interpreter::state_t) : $/;"	l
get_string	generator_c.nl	/^def get_string(s : ptd::string()) : ptd::string() {$/;"	l
get_struct_of_lvalue	translator.nl	/^def get_struct_of_lvalue(ref left : @nast::value_t, state : @translator::state_t) : @translator::struct_of_lvalue_t {$/;"	l
get_switched_func	post_processing.nl	/^def get_switched_func(old : @post_processing_t::math_funs_t, new : @post_processing_t::math_funs_t) : $/;"	l
get_system_include	generator_c.nl	/^def get_system_include(import : ptd::string()) : ptd::string() {$/;"	l
get_tab_size	wprinter.nl	/^def get_tab_size() : ptd::string() {$/;"	l
get_type_constructor	own_to_im_converter.nl	/^def get_type_constructor(type : @tct::meta_type, remove_owns : @boolean_t::type, known_types : ptd::hash(@tct::meta_type)) : ptd::string() {$/;"	l
get_type_from_bin_op_and_check	type_checker.nl	/^def get_type_from_bin_op_and_check(bin_op : @nast::bin_op_t, ref modules : @tc_types::modules_t, ref vars : $/;"	l
get_type_left_side_equation	type_checker.nl	/^def get_type_left_side_equation(left : @nast::value_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, $/;"	l
get_type_name	generator_c.nl	/^def get_type_name(type : @tct::meta_type) : ptd::string() {$/;"	l
get_type_record_key	type_checker.nl	/^def get_type_record_key(bin_op : @nast::bin_op_t, ref modules : @tc_types::modules_t, ref vars : @tc_types::vars_t, ref $/;"	l
get_type_to_c	generator_c.nl	/^def get_type_to_c(type : @tct::meta_type, name : ptd::string()) : ptd::string() {$/;"	l
get_unary_ops	generator_c.nl	/^def get_unary_ops() : ptd::hash(ptd::string()) {$/;"	l
get_value_from_im	generator_c.nl	/^def get_value_from_im(type : @nlasm::reg_type, im : ptd::string()) : ptd::string() {$/;"	l
get_value_nop	nparser.nl	/^def get_value_nop(ref state : @nparser::state_t) : @nast::value_t {$/;"	l
get_value_of_lvalue	translator.nl	/^def get_value_of_lvalue(left : @nast::value_t, get_value : @boolean_t::type, ref state : @translator::state_t) :$/;"	l
get_var_register	translator.nl	/^def get_var_register(label : ptd::string(), ref state : @translator::state_t) : @nlasm::reg_t {$/;"	l
get_variables	interpreter.nl	/^def get_variables(element : @interpreter::stack_element_t) : ptd::arr(ptd::rec({$/;"	l
get_variant_make_fun_def	generator_c.nl	/^def get_variant_make_fun_def(variant_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_variant_make_fun_header	generator_c.nl	/^def get_variant_make_fun_header(variant_type_name : ptd::string(), mod_name : ptd::string()) {$/;"	l
get_variant_make_fun_name	generator_c.nl	/^def get_variant_make_fun_name(variant_type_name : ptd::string(), mod_name : ptd::string()) : ptd::string() {$/;"	l
goto	interpreter.nl	/^def goto(ref state : @interpreter::state_t, label : ptd::string()) : ptd::void() {$/;"	l
graph	generator_c_struct_dependence_sort.nl	/^	var graph : @generator_c_struct_dependence_sort::graph = {};$/;"	v
graph	generator_c_struct_dependence_sort.nl	/^	var graph = in_funs_to_graph(in_funs, module);$/;"	v
graph	unnecessary_commands.nl	/^	var graph : @unnecessary_commands::graph_t = [];$/;"	v
graph	unnecessary_commands.nl	/^	var graph : @unnecessary_commands::graph_t = build_commands_graph(state, blocks, all_commands_num);$/;"	v
graph2	generator_c_struct_dependence_sort.nl	/^	var graph2 = graph;$/;"	v
h	interpreter.nl	/^		var h = {};$/;"	v
h	tct.nl	/^		var h : ptd::hash(@tct::meta_type) = {};$/;"	v
h	tct.nl	/^		var h : ptd::hash(ptd::var({with_param => @tct::meta_type, no_param => ptd::none()})) = {};$/;"	v
h_arg	pretty_printer.nl	/^			var h_arg = arg->value as :hash_decl;$/;"	v
h_new_module	type_checker.nl	/^	var h_new_module : ptd::hash(@nast::module_t) = {};$/;"	v
handle_array_call	interpreter.nl	/^def handle_array_call(key : ptd::string(), ref ret_val : ptd::ptd_im(), ref args : ptd::arr(ptd::ptd_im())) : ptd::var({$/;"	l
handle_c_rt_lib_call	interpreter.nl	/^def handle_c_rt_lib_call(key : ptd::string(), ref ret_val : ptd::ptd_im(), ref args : ptd::arr(ptd::ptd_im())) : ptd::var({$/;"	l
handle_compiler_call	interpreter.nl	/^def handle_compiler_call(call : @nlasm::call_t, key : ptd::string(), ref state : @interpreter::state_t) : ptd::void() {$/;"	l
handle_debug	dfile.nl	/^def handle_debug(ref state : @dfile::state_out, obj) : @boolean_t::type {$/;"	l
handle_extern_call	interpreter.nl	/^def handle_extern_call(call : @nlasm::call_t, ref state : @interpreter::state_t) : ptd::void() {$/;"	l
handle_hash_call	interpreter.nl	/^def handle_hash_call(key : ptd::string(), ref ret_val : ptd::ptd_im(), ref args : ptd::arr(ptd::ptd_im())) : ptd::var({$/;"	l
handle_new_declarations	interpreter.nl	/^def handle_new_declarations(ref state : @interpreter::state_t) {$/;"	l
handle_normal_call	interpreter.nl	/^def handle_normal_call(call : @nlasm::call_t, key : ptd::string(), ref state : @interpreter::state_t) : ptd::void() {$/;"	l
handle_ov_call	interpreter.nl	/^def handle_ov_call(key : ptd::string(), ref ret_val : ptd::ptd_im(), ref args : ptd::arr(ptd::ptd_im())) : ptd::var({$/;"	l
handle_ptd_call	interpreter.nl	/^def handle_ptd_call(key : ptd::string(), ref ret_val : ptd::ptd_im(), ref args : ptd::arr(ptd::ptd_im())) : ptd::var({$/;"	l
handle_return	interpreter.nl	/^def handle_return(return_i : ptd::var({val => @nlasm::reg_t, emp => ptd::none()}), ref state : @interpreter::state_t) : $/;"	l
handle_string_call	interpreter.nl	/^def handle_string_call(key : ptd::string(), ref ret_val : ptd::ptd_im(), ref args : ptd::arr(ptd::ptd_im())) : ptd::var({$/;"	l
handle_unknown_call	interpreter.nl	/^def handle_unknown_call(call : @nlasm::call_t, ref state : @interpreter::state_t) : ptd::void() {$/;"	l
has_extension	compiler.nl	/^def has_extension(path : ptd::string(), exten : ptd::string()) : @boolean_t::type {$/;"	l
has_side_effects	unnecessary_commands.nl	/^def has_side_effects(cmd_c : @nlasm::cmd_t) {$/;"	l
hash	compiler.nl	/^	var hash = {};$/;"	v
hash	dfile.nl	/^		var hash = {};$/;"	v
hash	flow_graph.nl	/^	var hash = {};$/;"	v
hash	generator_c.nl	/^	var hash = hash::get_value(global_const->module_consts, module);$/;"	v
hash	hash.nl	/^	var hash = hasha;$/;"	v
hash	hash.nl	/^def hash::add_all(ref hasha, hashb) {$/;"	l
hash	hash.nl	/^def hash::delete(ref hash, key) {$/;"	l
hash	hash.nl	/^def hash::get2keys(hash, key1, key2) {$/;"	l
hash	hash.nl	/^def hash::get_value(hash, key) {$/;"	l
hash	hash.nl	/^def hash::has2keys(hash, key1, key2) {$/;"	l
hash	hash.nl	/^def hash::has_key(hash, key) {$/;"	l
hash	hash.nl	/^def hash::keys(hash) {$/;"	l
hash	hash.nl	/^def hash::merge(hasha, hashb) {$/;"	l
hash	hash.nl	/^def hash::set2keys(ref hash, key1, key2, value) {$/;"	l
hash	hash.nl	/^def hash::set3keys(ref hash, key1, key2, key3, value) {$/;"	l
hash	hash.nl	/^def hash::set_value(ref hash, key, value) {$/;"	l
hash	hash.nl	/^def hash::size(hash) {$/;"	l
hash	hash.nl	/^def hash::values(hash) {$/;"	l
hash	interpreter.nl	/^		var hash = state->top->vars[get_val->src->reg_no];$/;"	v
hash	interpreter.nl	/^		var hash = state->top->vars[set_val->src->reg_no];$/;"	v
hash	translator.nl	/^	var hash = calc_val(as_forh->hash, ref state);$/;"	v
hash::add_all	hash.nl	/^def hash::add_all(ref hasha, hashb) {$/;"	g
hash::delete	hash.nl	/^def hash::delete(ref hash, key) {$/;"	g
hash::get2keys	hash.nl	/^def hash::get2keys(hash, key1, key2) {$/;"	g
hash::get_value	hash.nl	/^def hash::get_value(hash, key) {$/;"	g
hash::has2keys	hash.nl	/^def hash::has2keys(hash, key1, key2) {$/;"	g
hash::has_key	hash.nl	/^def hash::has_key(hash, key) {$/;"	g
hash::keys	hash.nl	/^def hash::keys(hash) {$/;"	g
hash::merge	hash.nl	/^def hash::merge(hasha, hashb) {$/;"	g
hash::set2keys	hash.nl	/^def hash::set2keys(ref hash, key1, key2, value) {$/;"	g
hash::set3keys	hash.nl	/^def hash::set3keys(ref hash, key1, key2, key3, value) {$/;"	g
hash::set_value	hash.nl	/^def hash::set_value(ref hash, key, value) {$/;"	g
hash::size	hash.nl	/^def hash::size(hash) {$/;"	g
hash::values	hash.nl	/^def hash::values(hash) {$/;"	g
hash_b	type_checker.nl	/^	var hash_b = {};$/;"	v
hash_decl	ptd_parser.nl	/^		var hash_decl = fun_arg->value as :hash_decl;$/;"	v
hash_decl	ptd_parser.nl	/^	var hash_decl = fun_arg->value as :hash_decl;$/;"	v
hash_type	translator.nl	/^		var hash_type = unwrap_ref(val->type, state->logic->defined_types);$/;"	v
hash_type	type_checker.nl	/^	var hash_type : @tc_types::type = ptd_system::can_delete(check_val(as_forh->hash, ref modules, ref vars, ref errors, known_types),$/;"	v
hash_type	type_checker.nl	/^	var hash_type = unwrap_ref(as_forh->hash->type, ref modules, ref errors);$/;"	v
hash_typedef_funs	generator_c.nl	/^	var hash_typedef_funs : ptd::hash(ptd::string()) = {};$/;"	v
head	pretty_printer.nl	/^		var head = state->out;$/;"	v
hsh	interpreter.nl	/^		var hsh = state->top->vars[set_val->src->reg_no];$/;"	v
i	generator_c.nl	/^	var i = 0;$/;"	v
i	generator_c_struct_dependence_sort.nl	/^	var i = 0;$/;"	v
i	generator_java.nl	/^	var i = 0;$/;"	v
i	generator_js.nl	/^		var i = 0;$/;"	v
i	generator_js.nl	/^	var i = 0;$/;"	v
i	string_utils.nl	/^	var i = 0;$/;"	v
i	translator.nl	/^	var i = 0;$/;"	v
i	wprinter.nl	/^	var i = 0;$/;"	v
i_offset	type_checker.nl	/^	var i_offset : ptd::string() = array::len(module->fun_def);$/;"	v
iables	interpreter.nl	/^				variables => []$/;"	v
iables	interpreter.nl	/^			variables => get_variables(element),$/;"	v
iables	interpreter.nl	/^			variables => ptd::arr(ptd::rec({name => ptd::string(), value => ptd::ptd_im()})),$/;"	v
iables	nlasm.nl	/^			variables => ptd::arr(@nlasm::var_decl_t),$/;"	v
iables	translator.nl	/^					variables => []$/;"	v
iables	translator.nl	/^			variables => {},$/;"	v
iables	translator.nl	/^		variables => ptd::hash(@nlasm::reg_t),$/;"	v
iant	nast.nl	/^		variant => @nast::variant_t,$/;"	v
iant	nlasm.nl	/^		variant => @tct::meta_type,$/;"	v
iant	ptd.nl	/^		variant => ptd::none(),$/;"	v
iant	type_checker.nl	/^				variant->var->type = param_type;$/;"	v
iant	type_checker.nl	/^				variant{label} = rtype->type;$/;"	v
iant_expected	ptd.nl	/^			variant_expected => @ptd::imm_kind_t,$/;"	v
iant_type	translator.nl	/^		variant_type = :tct_im;$/;"	v
iant_type	translator.nl	/^		variant_type = unwrap_ref(destination->type as :variant, state->logic->defined_types);$/;"	v
iant_value	ptd.nl	/^			variant_value => ptd::string(),$/;"	v
iants	type_checker.nl	/^				variants = left_type2->type as :tct_own_var;$/;"	v
iants	type_checker.nl	/^				variants = left_type2->type as :tct_var;$/;"	v
iants	type_checker.nl	/^			variants = val_type->type as :tct_own_var;$/;"	v
iants	type_checker.nl	/^			variants = val_type->type as :tct_var;$/;"	v
idx	interpreter.nl	/^		var idx = state->top->vars[get_frm_idx->idx->reg_no];$/;"	v
idx	interpreter.nl	/^		var idx = state->top->vars[set_at_idx->idx->reg_no];$/;"	v
if_cond_type	type_checker.nl	/^		var if_cond_type : @tc_types::type = check_val(as_if->cond, ref modules, ref vars, ref errors, known_types);$/;"	v
if_cond_type	type_checker.nl	/^		var if_cond_type : @tc_types::type = check_val(if_mod->cond, ref modules, ref vars, ref errors, known_types);$/;"	v
if_goto	post_processing.nl	/^			var if_goto = com as :if_goto;$/;"	v
im_t	generator_c.nl	/^def im_t() : ptd::string() {$/;"	l
imm_call	generator_js.nl	/^def imm_call(name : ptd::string()) {$/;"	l
imports	compiler.nl	/^	var imports = {};$/;"	v
imports	module_checker.nl	/^	var imports = {};$/;"	v
imps	pretty_printer.nl	/^	var imps : ptd::arr(ptd::string()) = [];$/;"	v
in_funs	generator_c_struct_dependence_sort.nl	/^	var in_funs : ptd::hash(@tct::meta_type)  = get_anons(funs);$/;"	v
in_funs_to_graph	generator_c_struct_dependence_sort.nl	/^def in_funs_to_graph(types : ptd::hash(@tct::meta_type), module : ptd::string()) : @generator_c_struct_dependence_sort::graph {$/;"	l
increase_index_instruction_no	translator.nl	/^	var increase_index_instruction_no = get_sim_label(ref state);$/;"	v
increase_index_label	translator.nl	/^	var increase_index_label = get_sim_label(ref state);$/;"	v
increment_instruction_no	translator.nl	/^	var increment_instruction_no = get_sim_label(ref state);$/;"	v
index	generator_pm.nl	/^		var index = 0;$/;"	v
index	generator_pm.nl	/^	var index = 0;$/;"	v
index	string.nl	/^		var index = beg + 1;$/;"	v
index	translator.nl	/^			var index = calc_val(value->index, ref state);$/;"	v
index	translator.nl	/^	var index = 0;$/;"	v
index_register	translator.nl	/^	var index_register = new_register(ref state, :int);$/;"	v
index_val	translator.nl	/^				var index_val = calc_val(bin_op->right, ref state);$/;"	v
ined ' . '$_' . fun_name . ';' . string::lf	generator_pm.nl	/^			print(ref state, '() unless defined ' . '$_' . fun_name . ';' . string::lf());$/;"	g
ined_types	compiler.nl	/^				defined_types{module . '::' . func->name} = type;$/;"	l
ined_types	translator.nl	/^			defined_types => defined_types,$/;"	l
ined_types	translator.nl	/^		defined_types => ptd::hash(@tct::meta_type),$/;"	l
ined_types => ptd::hash	translator.nl	/^		defined_types => ptd::hash(@tct::meta_type),$/;"	g
ines_type	interpreter.nl	/^				defines_type => :no,$/;"	l
ines_type	nast.nl	/^			defines_type => ptd::var({no => ptd::none(), yes => @tct::meta_type}),$/;"	l
ines_type	nlasm.nl	/^			defines_type => ptd::var({no => ptd::none(), yes => @tct::meta_type}),$/;"	l
ines_type	nparser.nl	/^			defines_type => :no,$/;"	l
ines_type	translator.nl	/^					defines_type => function->defines_type,$/;"	l
ines_type => ptd::var	nast.nl	/^			defines_type => ptd::var({no => ptd::none(), yes => @tct::meta_type}),$/;"	g
ines_type => ptd::var	nlasm.nl	/^			defines_type => ptd::var({no => ptd::none(), yes => @tct::meta_type}),$/;"	g
info	module_checker.nl	/^			var info = hash::get_value(state->vars, key);$/;"	v
info	module_checker.nl	/^	var info = hash::get_value(state->vars, name);$/;"	v
info	post_processing.nl	/^		var info = [];$/;"	v
inition	generator_c_struct_dependence_sort.nl	/^					definition => ptd::none(),$/;"	l
inition	generator_c_struct_dependence_sort.nl	/^			definition => ptd::string(),$/;"	l
inition => @reference_generator::fun_ref	reference_generator.nl	/^		function_definition => @reference_generator::fun_ref,$/;"	g
inition => ptd::none	generator_c_struct_dependence_sort.nl	/^					definition => ptd::none(),$/;"	g
inition => ptd::string	generator_c_struct_dependence_sort.nl	/^			definition => ptd::string(),$/;"	g
inition') unless ntokenizer::is_type	nparser.nl	/^	add_error(ref state, 'expected function definition') unless ntokenizer::is_type(ref state->state, :end);$/;"	g
inits	module_checker.nl	/^		var inits = inits(ref state);$/;"	v
inits	module_checker.nl	/^def inits(ref state : @module_checker::state_t) : @module_checker::init_checker_t {$/;"	l
inner_type	ptd_system.nl	/^		var inner_type;$/;"	v
inner_type	translator.nl	/^		var inner_type;$/;"	v
ins_nr	const_evaluator.nl	/^		var ins_nr = block->from->reg_no + i;$/;"	v
insert_const_to_modules_hash	generator_c.nl	/^def insert_const_to_modules_hash(ref global_const : @generator_c::global_const_t, key : ptd::string(), module : ptd::string()) {$/;"	l
int	string_utils.nl	/^	var int = string::ord(char);$/;"	v
int_t	generator_c.nl	/^def int_t() : ptd::string() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::callback_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::callback_value_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::evaluate_const(state : @interpreter::state_t, func : @nlasm::function_t, module : ptd::string(), regs : $/;"	l
interpreter	interpreter.nl	/^def interpreter::exec_all_code(state : @interpreter::state_t) {$/;"	l
interpreter	interpreter.nl	/^def interpreter::exec_instruction(ref state : @interpreter::state_t, ins_nr : ptd::string()) : @interpreter::rstate_t {$/;"	l
interpreter	interpreter.nl	/^def interpreter::execute_full_instruction(ref state : @interpreter::state_t) : ptd::void() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::finish_callback(function : ptd::string(), module : ptd::string(), value : @interpreter::callback_value_t, ref $/;"	l
interpreter	interpreter.nl	/^def interpreter::get_instruction_nr(state : @interpreter::state_t) : ptd::string() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::get_none_variant() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::get_profile(state : @interpreter::state_t) : ptd::arr(@profile_inter::row_t) {$/;"	l
interpreter	interpreter.nl	/^def interpreter::get_short_state(state : @interpreter::state_t) : @interpreter::state_t {$/;"	l
interpreter	interpreter.nl	/^def interpreter::get_whole_stack_debug(state : @interpreter::state_t) : ptd::arr(@interpreter::stack_element_debug_t) {$/;"	l
interpreter	interpreter.nl	/^def interpreter::has_next_instruction(state : @interpreter::state_t) : @boolean_t::type {$/;"	l
interpreter	interpreter.nl	/^def interpreter::init(nlasms : ptd::arr(@nlasm::result_t), known_exec_func : ptd::hash(@interpreter::known_exec_func_t)) $/;"	l
interpreter	interpreter.nl	/^def interpreter::init_from_part(state_parts : ptd::arr(@interpreter::part_state_t), known_exec_func : ptd::hash($/;"	l
interpreter	interpreter.nl	/^def interpreter::init_from_part_and_short(state : @interpreter::state_t, state_parts : ptd::arr($/;"	l
interpreter	interpreter.nl	/^def interpreter::init_from_short(state : @interpreter::state_t, nlasms : ptd::arr(@nlasm::result_t)) : $/;"	l
interpreter	interpreter.nl	/^def interpreter::known_exec_func_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::module_labels_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::part_state(nla : @nlasm::result_t) : @interpreter::part_state_t {$/;"	l
interpreter	interpreter.nl	/^def interpreter::part_state_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::return_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::rstate_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::stack_element_debug_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::stack_element_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::stack_t() {$/;"	l
interpreter	interpreter.nl	/^def interpreter::start(ref state : @interpreter::state_t, main_fun : ptd::string(), module_name : ptd::string()) : ptd::var({$/;"	l
interpreter	interpreter.nl	/^def interpreter::start_args(ref state : @interpreter::state_t, main_fun : ptd::string(), module_name : ptd::string(), $/;"	l
interpreter	interpreter.nl	/^def interpreter::state_t() {$/;"	l
interpreter::callback_t	interpreter.nl	/^def interpreter::callback_t() {$/;"	g
interpreter::callback_value_t	interpreter.nl	/^def interpreter::callback_value_t() {$/;"	g
interpreter::evaluate_const	interpreter.nl	/^def interpreter::evaluate_const(state : @interpreter::state_t, func : @nlasm::function_t, module : ptd::string(), regs : $/;"	g
interpreter::exec_all_code	interpreter.nl	/^def interpreter::exec_all_code(state : @interpreter::state_t) {$/;"	g
interpreter::exec_instruction	interpreter.nl	/^def interpreter::exec_instruction(ref state : @interpreter::state_t, ins_nr : ptd::string()) : @interpreter::rstate_t {$/;"	g
interpreter::execute_full_instruction	interpreter.nl	/^def interpreter::execute_full_instruction(ref state : @interpreter::state_t) : ptd::void() {$/;"	g
interpreter::finish_callback	interpreter.nl	/^def interpreter::finish_callback(function : ptd::string(), module : ptd::string(), value : @interpreter::callback_value_t, ref $/;"	g
interpreter::get_instruction_nr	interpreter.nl	/^def interpreter::get_instruction_nr(state : @interpreter::state_t) : ptd::string() {$/;"	g
interpreter::get_none_variant	interpreter.nl	/^def interpreter::get_none_variant() {$/;"	g
interpreter::get_profile	interpreter.nl	/^def interpreter::get_profile(state : @interpreter::state_t) : ptd::arr(@profile_inter::row_t) {$/;"	g
interpreter::get_short_state	interpreter.nl	/^def interpreter::get_short_state(state : @interpreter::state_t) : @interpreter::state_t {$/;"	g
interpreter::get_whole_stack_debug	interpreter.nl	/^def interpreter::get_whole_stack_debug(state : @interpreter::state_t) : ptd::arr(@interpreter::stack_element_debug_t) {$/;"	g
interpreter::has_next_instruction	interpreter.nl	/^def interpreter::has_next_instruction(state : @interpreter::state_t) : @boolean_t::type {$/;"	g
interpreter::init	interpreter.nl	/^def interpreter::init(nlasms : ptd::arr(@nlasm::result_t), known_exec_func : ptd::hash(@interpreter::known_exec_func_t)) $/;"	g
interpreter::init_from_part	interpreter.nl	/^def interpreter::init_from_part(state_parts : ptd::arr(@interpreter::part_state_t), known_exec_func : ptd::hash($/;"	g
interpreter::init_from_part_and_short	interpreter.nl	/^def interpreter::init_from_part_and_short(state : @interpreter::state_t, state_parts : ptd::arr($/;"	g
interpreter::init_from_short	interpreter.nl	/^def interpreter::init_from_short(state : @interpreter::state_t, nlasms : ptd::arr(@nlasm::result_t)) : $/;"	g
interpreter::known_exec_func_t	interpreter.nl	/^def interpreter::known_exec_func_t() {$/;"	g
interpreter::module_labels_t	interpreter.nl	/^def interpreter::module_labels_t() {$/;"	g
interpreter::part_state	interpreter.nl	/^def interpreter::part_state(nla : @nlasm::result_t) : @interpreter::part_state_t {$/;"	g
interpreter::part_state_t	interpreter.nl	/^def interpreter::part_state_t() {$/;"	g
interpreter::return_t	interpreter.nl	/^def interpreter::return_t() {$/;"	g
interpreter::rstate_t	interpreter.nl	/^def interpreter::rstate_t() {$/;"	g
interpreter::stack_element_debug_t	interpreter.nl	/^def interpreter::stack_element_debug_t() {$/;"	g
interpreter::stack_element_t	interpreter.nl	/^def interpreter::stack_element_t() {$/;"	g
interpreter::stack_t	interpreter.nl	/^def interpreter::stack_t() {$/;"	g
interpreter::start	interpreter.nl	/^def interpreter::start(ref state : @interpreter::state_t, main_fun : ptd::string(), module_name : ptd::string()) : ptd::var({$/;"	g
interpreter::start_args	interpreter.nl	/^def interpreter::start_args(ref state : @interpreter::state_t, main_fun : ptd::string(), module_name : ptd::string(), $/;"	g
interpreter::state_t	interpreter.nl	/^def interpreter::state_t() {$/;"	g
interpreter_state	compiler.nl	/^	var interpreter_state = interpreter::init(modules_arr, get_known_func());$/;"	v
is_comment_block	ntokenizer.nl	/^	var is_comment_block = true;$/;"	v
is_cycle_ref	ptd_system.nl	/^def is_cycle_ref(ref a : @tct::meta_type, ref b : @tct::meta_type, ref ref_inf : @tc_types::ref_t, is_cross : $/;"	l
is_hex_number	ntokenizer.nl	/^def is_hex_number(char : ptd::string()) : @boolean_t::type {$/;"	l
is_hidden	interpreter.nl	/^def is_hidden(cmd : @nlasm::cmd_t) : @boolean_t::type {$/;"	l
is_known	type_checker.nl	/^def is_known(vtype : @tc_types::type) : @boolean_t::type {$/;"	l
is_math	generator_c.nl	/^	var is_math = function->annotation is :math;$/;"	v
is_math	post_processing.nl	/^				var is_math = hash::get_value(math_fs, called_func);$/;"	v
is_math	post_processing.nl	/^			var is_math = hash::get_value(math_fs, f_key);$/;"	v
is_nop	generator_c.nl	/^	var is_nop = false;$/;"	v
is_ov	dfile.nl	/^def is_ov(ref state : @dfile::state_t) : @boolean_t::type {$/;"	l
is_simple_string	dfile.nl	/^def is_simple_string(str) : @boolean_t::type {$/;"	l
is_singleton_use_function	generator_c.nl	/^def is_singleton_use_function(function : @nlasm::function_t) : @boolean_t::type {$/;"	l
is_singleton_use_function	generator_java.nl	/^def is_singleton_use_function(function : @nlasm::function_t) : @boolean_t::type {$/;"	l
is_singleton_use_function	generator_js.nl	/^def is_singleton_use_function(function : @nlasm::function_t) : @boolean_t::type {$/;"	l
is_singleton_use_function	generator_pm.nl	/^def is_singleton_use_function(function : @nlasm::function_t) : @boolean_t::type {$/;"	l
is_spec	type_checker.nl	/^	var is_spec = false;$/;"	v
is_to_change_ov	pretty_printer.nl	/^def is_to_change_ov(val : @nast::value_t) : @boolean_t::type {$/;"	l
is_to_long	wprinter.nl	/^def is_to_long(len : ptd::string()) : @boolean_t::type {$/;"	l
is_token	ntokenizer.nl	/^def is_token(ref state : @ntokenizer::state_t) : @boolean_t::type {$/;"	l
ist	type_checker.nl	/^			var ist = args_values_types[i];$/;"	v
item_ptd	ptd.nl	/^		var item_ptd = type as :with_param;$/;"	v
iter	translator.nl	/^	var iter = new_register(ref state, :int);$/;"	v
iter_reg	translator.nl	/^	var iter_reg;$/;"	v
iter_register	translator.nl	/^	var iter_register = print_var_decl(as_rep->iter, ref state, :value);$/;"	v
ix	module_checker.nl	/^		var ix = string::index2(ref_name, '::');$/;"	v
ix	own_to_im_converter.nl	/^		var ix = string::index2(ref_name, '::');$/;"	v
ix	ptd_system.nl	/^	var ix = string::index2(type_name, '::');$/;"	v
ix	type_checker.nl	/^			var ix = string::index2(name, '::');$/;"	v
ix	type_checker.nl	/^		var ix = string::index2(ref_name, '::');$/;"	v
j	ptd_system.nl	/^	var j = 0;$/;"	v
join_print_fun_arg	pretty_printer.nl	/^def join_print_fun_arg(aval : ptd::arr(@nast::fun_val_arg_t)) : @wprinter::pretty_arr_t {$/;"	l
join_print_hash_elem	pretty_printer.nl	/^def join_print_hash_elem(aval : ptd::arr(@nast::hash_elem_t)) : @wprinter::pretty_arr_t {$/;"	l
join_print_val	pretty_printer.nl	/^def join_print_val(aval : ptd::arr(@nast::value_t)) : @wprinter::pretty_arr_t {$/;"	l
join_print_var_decl	pretty_printer.nl	/^def join_print_var_decl(aval : ptd::arr(@nast::variable_declaration_t)) : @wprinter::pretty_arr_t {$/;"	l
join_type	generator_c_struct_dependence_sort.nl	/^def join_type(a : @generator_c_struct_dependence_sort::decl_def_type , b : @generator_c_struct_dependence_sort::decl_def_type)$/;"	l
join_vars	type_checker.nl	/^def join_vars(ref vars : @tc_types::vars_t, vars_op : @tc_types::vars_t, ref modules : @tc_types::modules_t, ref errors$/;"	l
key	dfile.nl	/^			var key = parse_scalar(ref state, ref error);$/;"	v
key	dfile.nl	/^		var key = parse_scalar(ref state, ref error);$/;"	v
key	generator_c.nl	/^		var key = get_reg_value(ref state, get_key_iter->hash) . '.keys[' . get_reg_value(ref state, get_key_iter->iter) . ']';$/;"	v
key	interpreter.nl	/^			var key = get_func_key(func, module);$/;"	v
key	interpreter.nl	/^		var key;$/;"	v
key	interpreter.nl	/^	var key = get_func_key(func, module);$/;"	v
key	interpreter.nl	/^	var key = module . '::';$/;"	v
key	interpreter.nl	/^	var key = module_name . '::' . main_fun;$/;"	v
key	nparser.nl	/^		var key = parse_hash_key(ref state);$/;"	v
key	pretty_printer.nl	/^		var key = elem->key->value as :hash_key;$/;"	v
key	translator.nl	/^				var key = new_register(ref state, :string);$/;"	v
key_reg	translator.nl	/^	var key_reg : @nlasm::reg_t = {type => :im, reg_no => '', access_type => :value};$/;"	v
key_register	translator.nl	/^	var key_register = print_var_decl(as_forh->key, ref state, :value);$/;"	v
key_val	translator.nl	/^				var key_val = calc_val(bin_op->right, ref state);$/;"	v
keys	dfile.nl	/^	var keys = hash::keys(obj);$/;"	v
keys	module_checker.nl	/^	var keys = hash::keys(state->vars);$/;"	v
keys	string_compiler.nl	/^		var keys = {};$/;"	v
keys_arr	translator.nl	/^	var keys_arr = new_register(ref state, :im);$/;"	v
known_types	type_checker.nl	/^	var known_types : ptd::hash(@tct::meta_type) = gather_types(modules);$/;"	v
known_types	type_checker.nl	/^	var known_types = {};$/;"	v
l	dfile.nl	/^	var l = state->len;$/;"	v
label	post_processing.nl	/^	var label;$/;"	v
label	profile_inter.nl	/^		var label = row->key;$/;"	v
label	translator.nl	/^		var label = get_sim_label(ref state);$/;"	v
label	translator.nl	/^	var label : ptd::string() = left->value as :var;$/;"	v
label	type_checker.nl	/^				var label = as_match->branch_list[i]->variant->name;$/;"	v
label	type_checker.nl	/^			var label = el->key->value as :hash_key;$/;"	v
label_no	translator.nl	/^				var label_no = get_label_number(ref state, bin_op->left->type, right_val);$/;"	v
label_no	translator.nl	/^		var label_no = get_label_number(ref state, as_match->val->type, case_el->variant->name);$/;"	v
label_no	translator.nl	/^		var label_no = get_label_number(ref state, bin_op->left->type, right_val);$/;"	v
label_no	translator.nl	/^	var label_no = get_label_number(ref state, old_owner->type as :variant, label);$/;"	v
label_no	translator.nl	/^	var label_no = get_label_number(ref state, variant_type, variant->name);$/;"	v
labels	interpreter.nl	/^			var labels : ptd::hash(ptd::string()) = {};$/;"	v
labels	interpreter.nl	/^	var labels = {};$/;"	v
last	string.nl	/^		var last = array::join(pattern, array::subarray(arr, limit - 1, array::len(arr) - limit + 1));$/;"	v
last_label	flow_graph.nl	/^	var last_label = 'label_init';$/;"	v
last_label	post_processing.nl	/^	var last_label = '';$/;"	v
last_reg	translator.nl	/^	var last_reg : @nlasm::reg_t = lvalue_values[list_size - 1] as :value;$/;"	v
left	array.nl	/^	var left = begin;$/;"	v
left	generator_c.nl	/^				var left = get_reg_ref(ref state, ov_as->dest);$/;"	v
left	generator_c.nl	/^				var left = get_reg_value(ref state, ov_as->dest);$/;"	v
left	generator_js.nl	/^		var left = print_int_call_sim('c_rt_lib', 'imm_to_float', [bin_op->left]);$/;"	v
left	interpreter.nl	/^		var left = state->top->vars[bin_op->left->reg_no];$/;"	v
left	nparser.nl	/^	var left = {$/;"	v
left	pretty_printer.nl	/^			var left;$/;"	v
left	ptd_system.nl	/^			var left = from as :tct_hash;$/;"	v
left	translator.nl	/^		var left = calc_val(bin_op->left, ref state);$/;"	v
left	translator.nl	/^		var left = lvalue[array::len(lvalue) - 1] as :value;$/;"	v
left_type	translator.nl	/^				var left_type = unwrap_ref(bin_op->left->type, defined_types);$/;"	v
left_type	translator.nl	/^				var left_type = unwrap_ref(bin_op->left->type, state->logic->defined_types);$/;"	v
left_type	type_checker.nl	/^		var left_type : @tc_types::type = get_type_left_side_equation(bin_op->left, ref modules, ref vars, ref errors, known_types);$/;"	v
left_type	type_checker.nl	/^		var left_type : @tc_types::type = get_type_left_side_equation(lval->left, ref modules, ref vars, ref errors, known_types);$/;"	v
left_type	type_checker.nl	/^	var left_type : @tc_types::type = get_type_left_side_equation(type, ref modules, ref vars, ref errors, known_types);$/;"	v
left_type	type_checker.nl	/^	var left_type = check_val(bin_op->left, ref modules, ref vars, ref errors, known_types);$/;"	v
left_type2	type_checker.nl	/^	var left_type2 : @tc_types::type = ptd_system::can_delete(check_val(bin_op->left, ref modules, ref vars, ref errors, known_types), $/;"	v
left_val	translator.nl	/^			var left_val = dest_val(bin_op->left, ref state);$/;"	v
len	compiler.nl	/^		var len = string::length(file->dir);$/;"	v
len	compiler.nl	/^	var len = string::length(exten);$/;"	v
len	compiler_base/csv.nl	/^			var len = string::length(str);$/;"	v
len	compiler_base/csv.nl	/^	var len = string::length(str);$/;"	v
len	compiler_base/profile.nl	/^		var len = string::length(str);$/;"	v
len	dfile.nl	/^	var len = string::length(pattern);$/;"	v
len	dfile.nl	/^	var len = string::length(str);$/;"	v
len	generator_c.nl	/^			var len = array::len(tab);$/;"	v
len	interpreter.nl	/^	var len = array::len(profile);$/;"	v
len	profile_inter.nl	/^		var len = string::length(str);$/;"	v
len	string.nl	/^	var len = array::len(search_arr);$/;"	v
len	string.nl	/^	var len = string::length(string);$/;"	v
len	string.nl	/^	var lenPat = string::length(pattern);$/;"	v
len	string_utils.nl	/^	var len = string::length(str);$/;"	v
len	string_utils.nl	/^	var len = string::length(string);$/;"	v
len	translator.nl	/^	var len = string::length(str);$/;"	v
lhs	generator_c.nl	/^			var lhs = get_reg(ref state, hash_decl->dest) . '.' . get_field_name(el->key);$/;"	v
lib	string_compiler.nl	/^		var lib = {};$/;"	v
line	compiler_base/profile.nl	/^	var line = '';$/;"	v
line	nparser.nl	/^		var line : ptd::string() = ntokenizer::get_line(state->state);$/;"	v
line	profile_inter.nl	/^	var line = '';$/;"	v
list	compiler.nl	/^		var list = [];$/;"	v
list	pretty_printer.nl	/^	var list : @wprinter::pretty_arr_t = [wprinter::build_sim('var'), wprinter::get_sep()];$/;"	v
list_size	translator.nl	/^	var list_size = array::len(lvalue_values);$/;"	v
load_block	module_checker.nl	/^def load_block(ref state : @module_checker::state_t, prev : @module_checker::save_t) : ptd::void() {$/;"	l
load_const	translator.nl	/^def load_const(const : ptd::string(), destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
logic	translator.nl	/^		var logic = {$/;"	v
loop_label	translator.nl	/^	var loop_label = save_loop_break(ref state, after_for_instruction_no, increase_index_instruction_no);$/;"	v
loop_label	translator.nl	/^	var loop_label = save_loop_break(ref state, after_fora_instruction_no, increment_instruction_no);$/;"	v
loop_label	translator.nl	/^	var loop_label = save_loop_break(ref state, after_forh_label, next_iterator_label);$/;"	v
loop_label	translator.nl	/^	var loop_label = save_loop_break(ref state, after_l, condition_l);$/;"	v
loop_label	translator.nl	/^	var loop_label = save_loop_break(ref state, after_loop_instruction_no, first_instruction_no);$/;"	v
loop_label	translator.nl	/^	var loop_label = save_loop_break(ref state, after_rep_label, increase_index_label);$/;"	v
loop_label	translator.nl	/^	var loop_label = state->loop_label;$/;"	v
loop_str	compiler.nl	/^		var loop_str = '';$/;"	v
lvalue	translator.nl	/^				var lvalue = get_value_of_lvalue(fun_arg->val, true, ref state);$/;"	v
lvalue	translator.nl	/^			var lvalue = get_value_of_lvalue(as_bin_op, true, ref state);$/;"	v
lvalue	translator.nl	/^		var lvalue = get_value_of_lvalue(bin_op->left, false, ref state);$/;"	v
lvalue	translator.nl	/^		var lvalue = get_value_of_lvalue(bin_op->left, true, ref state);$/;"	v
lvalue	translator.nl	/^		var lvalue = get_value_of_lvalue(lval->left, false, ref state);$/;"	v
lvalue	translator.nl	/^		var lvalue = get_value_of_lvalue(unary_op->val, true, ref state);$/;"	v
lvalue	translator.nl	/^	var lvalue = get_value_of_lvalue(value, true, ref state);$/;"	v
lvalue_values	translator.nl	/^	var lvalue_values = [];$/;"	v
lvalues	translator.nl	/^	var lvalues : ptd::hash(@translator::lvalue_values_t) = {};$/;"	v
m	type_checker.nl	/^		var m : ptd::arr(@nast::fun_def_t) = ast->fun_def;$/;"	v
m	type_checker.nl	/^	var m : ptd::arr(@nast::fun_def_t) = module->fun_def;$/;"	v
main_mod	compiler.nl	/^	var main_mod = '';$/;"	v
make_string	translator.nl	/^def make_string(string : @translator::string_t, ref state : @translator::state_t) : ptd::string() {$/;"	l
map	flow_graph.nl	/^	var map = blocks->map;$/;"	v
map	register_cleaner.nl	/^	var map : ptd::hash(@nlasm::reg_t) = {};$/;"	v
match_s	dfile.nl	/^def match_s(ref state : @dfile::state_t, pattern : ptd::string()) : @boolean_t::type {$/;"	l
math_fs	post_processing.nl	/^	var math_fs : @post_processing_t::math_funs_t = {};$/;"	v
math_fs	post_processing.nl	/^	var math_fs = get_math_fun(state->fun_calls, state->mat_fun_def);$/;"	v
max	string_utils.nl	/^def max(a, b) {$/;"	l
max_rep	translator.nl	/^	var max_rep = calc_val(as_rep->count, ref state);$/;"	v
mid	array.nl	/^	var mid = begin + (end - begin + 1 - (end - begin + 1) % 2) \/ 2;$/;"	v
min	string_utils.nl	/^	var min = '';$/;"	v
minus	interpreter.nl	/^	var minus = profile[0]->time;$/;"	v
mk_block	flow_graph.nl	/^def mk_block(nr : ptd::string()) : @flow_graph::block_t {$/;"	l
mk_blocks	flow_graph.nl	/^def mk_blocks(commands : ptd::arr(@nlasm::cmd_t), args_types : ptd::arr(@nlasm::arg_type_t)) : @flow_graph::state_t {$/;"	l
mk_err	ptd_system.nl	/^def mk_err(to : @tct::meta_type, from : @tct::meta_type) : @tc_types::check_info {$/;"	l
mk_new_type_lval	type_checker.nl	/^def mk_new_type_lval(var_tab : @tc_types::lval_path, rtype : @tc_types::type, ltype : @tc_types::type, empty_type : $/;"	l
mk_path	compiler.nl	/^def mk_path(cache_path : ptd::string(), path : ptd::string()) {$/;"	l
mk_path_module	compiler.nl	/^def mk_path_module(file : ptd::rec({dir => ptd::string(), file => ptd::string()}), module : ptd::string(), input : $/;"	l
mod	nparser.nl	/^	var mod : @nast::module_t = {name => name, import => [], fun_def => [], stamp => ''};$/;"	v
mod	post_processing.nl	/^		var mod : @nlasm::result_t = module;$/;"	v
mod_import	compiler.nl	/^		var mod_import = [];$/;"	v
mod_n	post_processing.nl	/^				var mod_n = as_call->mod;$/;"	v
mod_name	ptd_parser.nl	/^	var mod_name : ptd::string() = fun_val->module;$/;"	v
module	compiler.nl	/^		var module = get_module_name(file->file);$/;"	v
module	const_evaluator.nl	/^		var module = hash::get_value(state->nl_asm, mod_n);$/;"	v
module	interpreter.nl	/^		var module = nlasm->module_name;$/;"	v
module	module_checker.nl	/^			var module = string::substr(ref_name, 0, ix);$/;"	v
module	post_processing.nl	/^		var module = hash::get_value(state->nl_asm, mod_n);$/;"	v
module	post_processing.nl	/^		var module = hash::get_value(state->nl_asm, name);$/;"	v
module	ptd_system.nl	/^	var module : ptd::string();$/;"	v
module	type_checker.nl	/^	var module : ptd::string() = get_fun_module(fun_module, modules->env->current_module);$/;"	v
module_checker	module_checker.nl	/^def module_checker::check_module(module : @nast::module_t, check_public_fun, ref functions) : @tc_types::errors_t {$/;"	l
module_checker	module_checker.nl	/^def module_checker::check_used_functions(used_functions : ptd::hash(ptd::string()), functions,  modules : ptd::arr(@nast::module_t), ref errors : @tc_types::return_t) {$/;"	l
module_checker	module_checker.nl	/^def module_checker::init_checker_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::modules_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::ret_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::return_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::save_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::search_loops(modules : @module_checker::modules_t) : @module_checker::ret_t {$/;"	l
module_checker	module_checker.nl	/^def module_checker::stack_hash_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::stack_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::state_t() {$/;"	l
module_checker	module_checker.nl	/^def module_checker::var_t() {$/;"	l
module_checker::check_module	module_checker.nl	/^def module_checker::check_module(module : @nast::module_t, check_public_fun, ref functions) : @tc_types::errors_t {$/;"	g
module_checker::check_used_functions	module_checker.nl	/^def module_checker::check_used_functions(used_functions : ptd::hash(ptd::string()), functions,  modules : ptd::arr(@nast::module_t), ref errors : @tc_types::return_t) {$/;"	g
module_checker::init_checker_t	module_checker.nl	/^def module_checker::init_checker_t() {$/;"	g
module_checker::modules_t	module_checker.nl	/^def module_checker::modules_t() {$/;"	g
module_checker::ret_t	module_checker.nl	/^def module_checker::ret_t() {$/;"	g
module_checker::return_t	module_checker.nl	/^def module_checker::return_t() {$/;"	g
module_checker::save_t	module_checker.nl	/^def module_checker::save_t() {$/;"	g
module_checker::search_loops	module_checker.nl	/^def module_checker::search_loops(modules : @module_checker::modules_t) : @module_checker::ret_t {$/;"	g
module_checker::stack_hash_t	module_checker.nl	/^def module_checker::stack_hash_t() {$/;"	g
module_checker::stack_t	module_checker.nl	/^def module_checker::stack_t() {$/;"	g
module_checker::state_t	module_checker.nl	/^def module_checker::state_t() {$/;"	g
module_checker::var_t	module_checker.nl	/^def module_checker::var_t() {$/;"	g
module_errors	compiler.nl	/^		var module_errors = hash::get_value(all_errors->module_errors, module);$/;"	v
module_files	compiler.nl	/^	var module_files = ptd::ensure(ptd::arr(ptd::string()), c_fe_lib::get_module_files_rec(path));$/;"	v
module_hash	generator_c.nl	/^		var module_hash = hash::get_value(global_const->module_consts, module);$/;"	v
module_labels	interpreter.nl	/^	var module_labels = hash::get_value(state->labels, state->top->module_name);$/;"	v
module_name	own_to_im_converter.nl	/^		var module_name = string::substr(ref_name, 0, ix);$/;"	v
module_name	type_checker.nl	/^			var module_name = string::substr(ref_name, 0, ix);$/;"	v
module_result	interpreter.nl	/^		var module_result = {};$/;"	v
module_ret	string_compiler.nl	/^		var module_ret = module_checker::check_module(ast, false, ref r);$/;"	v
module_st	ptd_system.nl	/^			var module_st = hash::get_value(modules->funs, function->module);$/;"	v
module_st	ptd_system.nl	/^	var module_st = hash::get_value(modules->funs, function->module);$/;"	v
module_st	ptd_system.nl	/^	var module_st = hash::get_value(modules->funs, module);$/;"	v
modules	compiler.nl	/^			var modules = translate(to_save, ref const_state);$/;"	v
modules	compiler.nl	/^		var modules = [];$/;"	v
modules	compiler.nl	/^		var modules = translate(asts, ref const_state);$/;"	v
modules	compiler.nl	/^	var modules = translate(asts, ref const_state);$/;"	v
modules	type_checker.nl	/^	var modules : @tc_types::modules_t = {$/;"	v
modules_arr	compiler.nl	/^	var modules_arr = [];$/;"	v
modules_names	generator_c.nl	/^	var modules_names = [];$/;"	v
modules_out	generator_c.nl	/^	var modules_out = {};$/;"	v
move	translator.nl	/^def move(destination : @nlasm::reg_t, source : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
move_args_to_register	generator_c.nl	/^def move_args_to_register(ref state : @generator_c::state_t) {$/;"	l
move_args_to_register	generator_pm.nl	/^def move_args_to_register(ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
move_register_to_ref_args	generator_c.nl	/^def move_register_to_ref_args(ref state : @generator_c::state_t) {$/;"	l
move_register_to_ref_args	generator_pm.nl	/^def move_register_to_ref_args(ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
msec	compiler.nl	/^	var msec = string_utils::int2str(time[1] \/ 1000, 3);$/;"	v
msg	compiler.nl	/^			var msg = 'Can not save ' . ptd::int_to_string(hash::size(to_save)) . ' files. ';$/;"	v
msg	compiler.nl	/^	var msg = '';$/;"	v
n	dfile.nl	/^				var n = get_char(ref state);$/;"	v
n	string.nl	/^		var n = string::ord(arr[i]);$/;"	v
n_offset	type_checker.nl	/^	var n_offset = 0;$/;"	v
n_time	compiler.nl	/^			var n_time = c_fe_lib::get_modif_time(paths->src);$/;"	v
name	generator_c_struct_dependence_sort.nl	/^	var name;$/;"	v
name	nparser.nl	/^				var name = parse_hash_key(ref state);$/;"	v
name	nparser.nl	/^	var name : ptd::string() = parse_variant_label(ref state);$/;"	v
name	pretty_printer.nl	/^	var name : ptd::string() = '';$/;"	v
name	ptd.nl	/^		var name = ov::get_element(value);$/;"	v
name	type_checker.nl	/^			var name = get_fun_def_key(new_fun_def);$/;"	v
name	type_checker.nl	/^		var name : ptd::string() = own_to_im_converter::get_function_name(type, known_types);$/;"	v
name	type_checker.nl	/^	var name = get_function_name(fun_val->module, fun_val->name);$/;"	v
nast	nast.nl	/^def nast::bin_op_t() {$/;"	l
nast	nast.nl	/^def nast::block_t() {$/;"	l
nast	nast.nl	/^def nast::bool_t() {$/;"	l
nast	nast.nl	/^def nast::cast_to_value(value : @nast::value_only_t) : @nast::value_t {$/;"	l
nast	nast.nl	/^def nast::cmd_t() {$/;"	l
nast	nast.nl	/^def nast::debug_t() {$/;"	l
nast	nast.nl	/^def nast::die_t() {$/;"	l
nast	nast.nl	/^def nast::empty_debug() : @nast::debug_t {$/;"	l
nast	nast.nl	/^def nast::for_t() {$/;"	l
nast	nast.nl	/^def nast::fora_t() {$/;"	l
nast	nast.nl	/^def nast::forh_t() {$/;"	l
nast	nast.nl	/^def nast::fun_def_arg_t() {$/;"	l
nast	nast.nl	/^def nast::fun_def_t() {$/;"	l
nast	nast.nl	/^def nast::fun_label_t() {$/;"	l
nast	nast.nl	/^def nast::fun_val_arg_t() {$/;"	l
nast	nast.nl	/^def nast::fun_val_t() {$/;"	l
nast	nast.nl	/^def nast::get_bin_ops() : @nast::op_struct_t {$/;"	l
nast	nast.nl	/^def nast::get_max_precedence() : ptd::int() {$/;"	l
nast	nast.nl	/^def nast::get_ternary_ops() : @nast::op_struct_t {$/;"	l
nast	nast.nl	/^def nast::get_unary_ops() : @nast::op_struct_t {$/;"	l
nast	nast.nl	/^def nast::hash_decl_t() {$/;"	l
nast	nast.nl	/^def nast::hash_elem_t() {$/;"	l
nast	nast.nl	/^def nast::if_mod_t() {$/;"	l
nast	nast.nl	/^def nast::if_t() {$/;"	l
nast	nast.nl	/^def nast::intepreter_evaluate_max_steps() {$/;"	l
nast	nast.nl	/^def nast::match_branch_t() {$/;"	l
nast	nast.nl	/^def nast::match_t() {$/;"	l
nast	nast.nl	/^def nast::module_t() {$/;"	l
nast	nast.nl	/^def nast::op_assoc_t() {$/;"	l
nast	nast.nl	/^def nast::op_struct_t() {$/;"	l
nast	nast.nl	/^def nast::op_t() {$/;"	l
nast	nast.nl	/^def nast::place_t() {$/;"	l
nast	nast.nl	/^def nast::rep_t() {$/;"	l
nast	nast.nl	/^def nast::ternary_op_t() {$/;"	l
nast	nast.nl	/^def nast::try_ensure_t() {$/;"	l
nast	nast.nl	/^def nast::unary_op_t() {$/;"	l
nast	nast.nl	/^def nast::unless_mod_t() {$/;"	l
nast	nast.nl	/^def nast::value_only_t() {$/;"	l
nast	nast.nl	/^def nast::value_t() {$/;"	l
nast	nast.nl	/^def nast::variable_declaration_t() {$/;"	l
nast	nast.nl	/^def nast::variable_type_t() {$/;"	l
nast	nast.nl	/^def nast::variant_decl_t() {$/;"	l
nast	nast.nl	/^def nast::variant_t() {$/;"	l
nast	nast.nl	/^def nast::variant_variable_declaration_t() {$/;"	l
nast	nast.nl	/^def nast::while_t() {$/;"	l
nast::bin_op_t	nast.nl	/^def nast::bin_op_t() {$/;"	g
nast::block_t	nast.nl	/^def nast::block_t() {$/;"	g
nast::bool_t	nast.nl	/^def nast::bool_t() {$/;"	g
nast::cast_to_value	nast.nl	/^def nast::cast_to_value(value : @nast::value_only_t) : @nast::value_t {$/;"	g
nast::cmd_t	nast.nl	/^def nast::cmd_t() {$/;"	g
nast::debug_t	nast.nl	/^def nast::debug_t() {$/;"	g
nast::die_t	nast.nl	/^def nast::die_t() {$/;"	g
nast::empty_debug	nast.nl	/^def nast::empty_debug() : @nast::debug_t {$/;"	g
nast::for_t	nast.nl	/^def nast::for_t() {$/;"	g
nast::fora_t	nast.nl	/^def nast::fora_t() {$/;"	g
nast::forh_t	nast.nl	/^def nast::forh_t() {$/;"	g
nast::fun_def_arg_t	nast.nl	/^def nast::fun_def_arg_t() {$/;"	g
nast::fun_def_t	nast.nl	/^def nast::fun_def_t() {$/;"	g
nast::fun_label_t	nast.nl	/^def nast::fun_label_t() {$/;"	g
nast::fun_val_arg_t	nast.nl	/^def nast::fun_val_arg_t() {$/;"	g
nast::fun_val_t	nast.nl	/^def nast::fun_val_t() {$/;"	g
nast::get_bin_ops	nast.nl	/^def nast::get_bin_ops() : @nast::op_struct_t {$/;"	g
nast::get_max_precedence	nast.nl	/^def nast::get_max_precedence() : ptd::int() {$/;"	g
nast::get_ternary_ops	nast.nl	/^def nast::get_ternary_ops() : @nast::op_struct_t {$/;"	g
nast::get_unary_ops	nast.nl	/^def nast::get_unary_ops() : @nast::op_struct_t {$/;"	g
nast::hash_decl_t	nast.nl	/^def nast::hash_decl_t() {$/;"	g
nast::hash_elem_t	nast.nl	/^def nast::hash_elem_t() {$/;"	g
nast::if_mod_t	nast.nl	/^def nast::if_mod_t() {$/;"	g
nast::if_t	nast.nl	/^def nast::if_t() {$/;"	g
nast::intepreter_evaluate_max_steps	nast.nl	/^def nast::intepreter_evaluate_max_steps() {$/;"	g
nast::match_branch_t	nast.nl	/^def nast::match_branch_t() {$/;"	g
nast::match_t	nast.nl	/^def nast::match_t() {$/;"	g
nast::module_t	nast.nl	/^def nast::module_t() {$/;"	g
nast::op_assoc_t	nast.nl	/^def nast::op_assoc_t() {$/;"	g
nast::op_struct_t	nast.nl	/^def nast::op_struct_t() {$/;"	g
nast::op_t	nast.nl	/^def nast::op_t() {$/;"	g
nast::place_t	nast.nl	/^def nast::place_t() {$/;"	g
nast::rep_t	nast.nl	/^def nast::rep_t() {$/;"	g
nast::ternary_op_t	nast.nl	/^def nast::ternary_op_t() {$/;"	g
nast::try_ensure_t	nast.nl	/^def nast::try_ensure_t() {$/;"	g
nast::unary_op_t	nast.nl	/^def nast::unary_op_t() {$/;"	g
nast::unless_mod_t	nast.nl	/^def nast::unless_mod_t() {$/;"	g
nast::value_only_t	nast.nl	/^def nast::value_only_t() {$/;"	g
nast::value_t	nast.nl	/^def nast::value_t() {$/;"	g
nast::variable_declaration_t	nast.nl	/^def nast::variable_declaration_t() {$/;"	g
nast::variable_type_t	nast.nl	/^def nast::variable_type_t() {$/;"	g
nast::variant_decl_t	nast.nl	/^def nast::variant_decl_t() {$/;"	g
nast::variant_t	nast.nl	/^def nast::variant_t() {$/;"	g
nast::variant_variable_declaration_t	nast.nl	/^def nast::variant_variable_declaration_t() {$/;"	g
nast::while_t	nast.nl	/^def nast::while_t() {$/;"	g
neg_condition	translator.nl	/^	var neg_condition = new_register(ref state, :bool);$/;"	v
new	translator.nl	/^		var new = new_register(ref state, :bool);$/;"	v
new_arg	register_cleaner.nl	/^			var new_arg;$/;"	v
new_args	register_cleaner.nl	/^			var new_args = [];$/;"	v
new_args	type_checker.nl	/^			var new_args : ptd::arr(@tc_types::fun_arg_t) = [];$/;"	v
new_begin	nparser.nl	/^		var new_begin = ntokenizer::get_place(ref state->state);$/;"	v
new_blocks	const_evaluator.nl	/^	var new_blocks = blocks;$/;"	v
new_cmd	register_cleaner.nl	/^		var new_cmd;$/;"	v
new_cmds	const_evaluator.nl	/^	var new_cmds = [];$/;"	v
new_cmds	register_cleaner.nl	/^	var new_cmds = [];$/;"	v
new_cmds	unnecessary_commands.nl	/^		var new_cmds = [];$/;"	v
new_code	type_checker.nl	/^	var new_code : ptd::string() = ''; $/;"	v
new_code_vars	interpreter.nl	/^	var new_code_vars = {};$/;"	v
new_declaration	translator.nl	/^def new_declaration(fun_arg_name : ptd::string(), ref state : @translator::state_t, type : @nlasm::reg_type,$/;"	l
new_el	register_cleaner.nl	/^				var new_el;$/;"	v
new_fun_def	type_checker.nl	/^			var new_fun_def : @tc_types::def_fun_t = {$/;"	v
new_func	register_cleaner.nl	/^	var new_func = func;$/;"	v
new_functions	register_cleaner.nl	/^	var new_functions = [];$/;"	v
new_iter	generator_c.nl	/^		var new_iter = get_hash_next_iter_fun_name(get_type_name(init_iter->hash->type as :hash), state->mod_name) . '(' .$/;"	v
new_iter	generator_c.nl	/^		var new_iter = get_hash_next_iter_fun_name(get_type_name(next_iter->hash->type as :hash), state->mod_name) . '(' .$/;"	v
new_keys	register_cleaner.nl	/^			var new_keys = [];$/;"	v
new_left	nparser.nl	/^		var new_left : @nast::value_only_t;$/;"	v
new_module	interpreter.nl	/^	var new_module;$/;"	v
new_module	type_checker.nl	/^		var new_module : @nast::module_t = create_own_convertions_module(own_conv, known_types, module_name);$/;"	v
new_module	type_checker.nl	/^	var new_module : @nast::module_t = create_own_convertions_module(own_conv, known_types, module->name);$/;"	v
new_owner	translator.nl	/^	var new_owner;$/;"	v
new_ref_arguments	interpreter.nl	/^	var new_ref_arguments = {};$/;"	v
new_reference_register	translator.nl	/^def new_reference_register(ref state : @translator::state_t, type : @nlasm::reg_type) : @nlasm::reg_t {$/;"	l
new_reg	translator.nl	/^				var new_reg = new_reference_register(ref state, var_type_to_reg_type(hash_el->val->type, state->logic->defined_types));$/;"	v
new_reg_index	register_cleaner.nl	/^	var new_reg_index = 0;$/;"	v
new_reg_no	translator.nl	/^	var new_reg_no = array::len(state->logic->registers);$/;"	v
new_reg_type	translator.nl	/^			var new_reg_type = var_type_to_reg_type(value->dest_type, state->logic->defined_types);$/;"	v
new_register	translator.nl	/^def new_register(ref state : @translator::state_t, type : @nlasm::reg_type) : @nlasm::reg_t {$/;"	l
new_regs	const_evaluator.nl	/^		var new_regs = res as :ok;$/;"	v
new_regs	register_cleaner.nl	/^		var new_regs = [];$/;"	v
new_ret	translator.nl	/^			var new_ret = [];$/;"	v
new_src	register_cleaner.nl	/^			var new_src = [];$/;"	v
new_state	unnecessary_commands.nl	/^	var new_state = state[block_nr];$/;"	v
new_to_parse	compiler.nl	/^		var new_to_parse = {};$/;"	v
new_to_save	compiler.nl	/^			var new_to_save = {};$/;"	v
new_type	type_checker.nl	/^		var new_type = mk_new_type_lval(var_tab, rtype, {type => var_->type, src => :speculation}, empty_type, ref $/;"	v
new_vars	interpreter.nl	/^	var new_vars = build_registers(func->reg_size);$/;"	v
next	flow_graph.nl	/^		var next = block->next;$/;"	v
next_iterator_label	translator.nl	/^	var next_iterator_label = get_sim_label(ref state);$/;"	v
next_l	flow_graph.nl	/^			var next_l = last_label . '_I';$/;"	v
nianio_files	compiler.nl	/^		var nianio_files = get_files_to_parse(opt_cli);$/;"	v
nianio_files	compiler.nl	/^	var nianio_files = get_files_to_parse(input);$/;"	v
nianio_files	compiler.nl	/^	var nianio_files = get_files_to_parse(opt_cli);$/;"	v
nl	nl.nl	/^def nl::debug_die(arg) {$/;"	l
nl	nl.nl	/^def nl::is_array(variable) : @boolean_t::type {$/;"	l
nl	nl.nl	/^def nl::is_hash(variable) : @boolean_t::type {$/;"	l
nl	nl.nl	/^def nl::is_sim(variable) : @boolean_t::type {$/;"	l
nl	nl.nl	/^def nl::is_variant(variable) : @boolean_t::type {$/;"	l
nl	nl.nl	/^def nl::print(str) {$/;"	l
nl::debug_die	nl.nl	/^def nl::debug_die(arg) {$/;"	g
nl::is_array	nl.nl	/^def nl::is_array(variable) : @boolean_t::type {$/;"	g
nl::is_hash	nl.nl	/^def nl::is_hash(variable) : @boolean_t::type {$/;"	g
nl::is_sim	nl.nl	/^def nl::is_sim(variable) : @boolean_t::type {$/;"	g
nl::is_variant	nl.nl	/^def nl::is_variant(variable) : @boolean_t::type {$/;"	g
nl::print	nl.nl	/^def nl::print(str) {$/;"	g
nla_asm	compiler.nl	/^		var nla_asm = translator::translate(ast, defined_types);$/;"	v
nlasm	compiler.nl	/^	var nlasm = {};$/;"	v
nlasm	generator_c.nl	/^		var nlasm = hash::get_value(nlasms, module);$/;"	v
nlasm	nlasm.nl	/^def nlasm::access_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::annotation_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::arg_type_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::args_type() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::bin_op() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::call_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::cmd_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::cmds_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::debug_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::empty_debug() : @nlasm::debug_t {$/;"	l
nlasm	nlasm.nl	/^def nlasm::eq_reg(reg1 : @nlasm::reg_t, reg2 : @nlasm::reg_t) : @boolean_t::type {$/;"	l
nlasm	nlasm.nl	/^def nlasm::eq_reg_type(reg1 : @nlasm::reg_type, reg2 : @nlasm::reg_type) : @boolean_t::type {$/;"	l
nlasm	nlasm.nl	/^def nlasm::function_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::hash_decl_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::hash_dest_iter_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::hash_iter_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::is_empty(reg : @nlasm::reg_t) {$/;"	l
nlasm	nlasm.nl	/^def nlasm::label_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::order_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::ov_mk_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::reg_access_type_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::reg_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::reg_type() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::release_field_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::release_hash_index_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::release_index_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::release_variant_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::result_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::return() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::una_op_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::use_field_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::use_hash_index_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::use_index_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::use_variant_t() {$/;"	l
nlasm	nlasm.nl	/^def nlasm::var_decl_t() {$/;"	l
nlasm::access_t	nlasm.nl	/^def nlasm::access_t() {$/;"	g
nlasm::annotation_t	nlasm.nl	/^def nlasm::annotation_t() {$/;"	g
nlasm::arg_type_t	nlasm.nl	/^def nlasm::arg_type_t() {$/;"	g
nlasm::args_type	nlasm.nl	/^def nlasm::args_type() {$/;"	g
nlasm::bin_op	nlasm.nl	/^def nlasm::bin_op() {$/;"	g
nlasm::call_t	nlasm.nl	/^def nlasm::call_t() {$/;"	g
nlasm::cmd_t	nlasm.nl	/^def nlasm::cmd_t() {$/;"	g
nlasm::cmds_t	nlasm.nl	/^def nlasm::cmds_t() {$/;"	g
nlasm::debug_t	nlasm.nl	/^def nlasm::debug_t() {$/;"	g
nlasm::empty_debug	nlasm.nl	/^def nlasm::empty_debug() : @nlasm::debug_t {$/;"	g
nlasm::eq_reg	nlasm.nl	/^def nlasm::eq_reg(reg1 : @nlasm::reg_t, reg2 : @nlasm::reg_t) : @boolean_t::type {$/;"	g
nlasm::eq_reg_type	nlasm.nl	/^def nlasm::eq_reg_type(reg1 : @nlasm::reg_type, reg2 : @nlasm::reg_type) : @boolean_t::type {$/;"	g
nlasm::function_t	nlasm.nl	/^def nlasm::function_t() {$/;"	g
nlasm::hash_decl_t	nlasm.nl	/^def nlasm::hash_decl_t() {$/;"	g
nlasm::hash_dest_iter_t	nlasm.nl	/^def nlasm::hash_dest_iter_t() {$/;"	g
nlasm::hash_iter_t	nlasm.nl	/^def nlasm::hash_iter_t() {$/;"	g
nlasm::is_empty	nlasm.nl	/^def nlasm::is_empty(reg : @nlasm::reg_t) {$/;"	g
nlasm::label_t	nlasm.nl	/^def nlasm::label_t() {$/;"	g
nlasm::order_t	nlasm.nl	/^def nlasm::order_t() {$/;"	g
nlasm::ov_mk_t	nlasm.nl	/^def nlasm::ov_mk_t() {$/;"	g
nlasm::reg_access_type_t	nlasm.nl	/^def nlasm::reg_access_type_t() {$/;"	g
nlasm::reg_t	nlasm.nl	/^def nlasm::reg_t() {$/;"	g
nlasm::reg_type	nlasm.nl	/^def nlasm::reg_type() {$/;"	g
nlasm::release_field_t	nlasm.nl	/^def nlasm::release_field_t() {$/;"	g
nlasm::release_hash_index_t	nlasm.nl	/^def nlasm::release_hash_index_t() {$/;"	g
nlasm::release_index_t	nlasm.nl	/^def nlasm::release_index_t() {$/;"	g
nlasm::release_variant_t	nlasm.nl	/^def nlasm::release_variant_t() {$/;"	g
nlasm::result_t	nlasm.nl	/^def nlasm::result_t() {$/;"	g
nlasm::return	nlasm.nl	/^def nlasm::return() {$/;"	g
nlasm::una_op_t	nlasm.nl	/^def nlasm::una_op_t() {$/;"	g
nlasm::use_field_t	nlasm.nl	/^def nlasm::use_field_t() {$/;"	g
nlasm::use_hash_index_t	nlasm.nl	/^def nlasm::use_hash_index_t() {$/;"	g
nlasm::use_index_t	nlasm.nl	/^def nlasm::use_index_t() {$/;"	g
nlasm::use_variant_t	nlasm.nl	/^def nlasm::use_variant_t() {$/;"	g
nlasm::var_decl_t	nlasm.nl	/^def nlasm::var_decl_t() {$/;"	g
nlasm_to_type_hash	generator_c_struct_dependence_sort.nl	/^def nlasm_to_type_hash(nl_funs : ptd::arr(@nlasm::function_t)) : ptd::hash(@tct::meta_type) {$/;"	l
nlasms	string_compiler.nl	/^	var nlasms = {};$/;"	v
nlasms_arr	const_evaluator.nl	/^	var nlasms_arr = [];$/;"	v
nmode	generator_c.nl	/^	var nmode;$/;"	v
no	generator_js.nl	/^	var no = 0;$/;"	v
node	generator_c_struct_dependence_sort.nl	/^		var node = {pointer => [], struct => [], is_divisible =>$/;"	v
nomatch_register	translator.nl	/^	var nomatch_register = new_register(ref state, :im);$/;"	v
nparser	nparser.nl	/^def nparser::parse_ret_t() {$/;"	l
nparser	nparser.nl	/^def nparser::sparse(s : ptd::string(), module_name : ptd::string()) : ptd::var({$/;"	l
nparser	nparser.nl	/^def nparser::state_t() {$/;"	l
nparser	nparser.nl	/^def nparser::try_cmd_t() {$/;"	l
nparser	nparser.nl	/^def nparser::try_value_t() {$/;"	l
nparser::parse_ret_t	nparser.nl	/^def nparser::parse_ret_t() {$/;"	g
nparser::sparse	nparser.nl	/^def nparser::sparse(s : ptd::string(), module_name : ptd::string()) : ptd::var({$/;"	g
nparser::state_t	nparser.nl	/^def nparser::state_t() {$/;"	g
nparser::try_cmd_t	nparser.nl	/^def nparser::try_cmd_t() {$/;"	g
nparser::try_value_t	nparser.nl	/^def nparser::try_value_t() {$/;"	g
nr	flow_graph.nl	/^	var nr = 0;$/;"	v
nr	generator_c.nl	/^				var nr = state->const->dynamic_nr;$/;"	v
nr	generator_c.nl	/^			var nr = hash::get_value(state->global_const->hash, key);$/;"	v
nr	generator_c.nl	/^	var nr = -1;$/;"	v
nr	generator_c.nl	/^	var nr = get_const(ref state->const->singleton, sim);$/;"	v
nr	generator_c.nl	/^	var nr = get_global_const(ref state->global_const, sim, state->mod_name);$/;"	v
nr	unnecessary_commands.nl	/^			var nr = blocks[block_nr]->from->reg_no + cmd_nr;$/;"	v
nr_label	post_processing.nl	/^	var nr_label = {};$/;"	v
nsystem	compiler_base/nsystem.nl	/^def nsystem::get_pid() {$/;"	l
nsystem	compiler_base/nsystem.nl	/^def nsystem::localtime(arg) {$/;"	l
nsystem	compiler_base/nsystem.nl	/^def nsystem::time() {$/;"	l
nsystem	compiler_base/nsystem.nl	/^def nsystem::time_microsec() {$/;"	l
nsystem::get_pid	compiler_base/nsystem.nl	/^def nsystem::get_pid() {$/;"	g
nsystem::localtime	compiler_base/nsystem.nl	/^def nsystem::localtime(arg) {$/;"	g
nsystem::time	compiler_base/nsystem.nl	/^def nsystem::time() {$/;"	g
nsystem::time_microsec	compiler_base/nsystem.nl	/^def nsystem::time_microsec() {$/;"	g
ntokenizer	ntokenizer.nl	/^def ntokenizer::eat_text(ref state : @ntokenizer::state_t) : ptd::string() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::eat_token(ref state : @ntokenizer::state_t, token : ptd::string()) : @boolean_t::type {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::eat_type(ref state : @ntokenizer::state_t, type : @ntokenizer::token_t) : ptd::string() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::get_column(state : @ntokenizer::state_t) : ptd::string() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::get_last_comment(state : @ntokenizer::state_t) : ptd::string() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::get_line(state : @ntokenizer::state_t) : ptd::string() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::get_place(ref state : @ntokenizer::state_t) : ptd::rec({line => ptd::string(), position => ptd::string()}) {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::get_place_ws(ref state : @ntokenizer::state_t) : ptd::rec({line => ptd::string(), position => ptd::string()}) {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::get_token(ref state : @ntokenizer::state_t) : ptd::string() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::info(state : @ntokenizer::state_t) : ptd::string() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::init(text : ptd::string()) : @ntokenizer::state_t {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::is_text(ref state : @ntokenizer::state_t) : @boolean_t::type {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::is_type(ref state : @ntokenizer::state_t, type : @ntokenizer::token_t) : @boolean_t::type {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::next_is(ref state : @ntokenizer::state_t, token : ptd::string()) : @boolean_t::type {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::state_t() {$/;"	l
ntokenizer	ntokenizer.nl	/^def ntokenizer::token_t() {$/;"	l
ntokenizer::eat_text	ntokenizer.nl	/^def ntokenizer::eat_text(ref state : @ntokenizer::state_t) : ptd::string() {$/;"	g
ntokenizer::eat_token	ntokenizer.nl	/^def ntokenizer::eat_token(ref state : @ntokenizer::state_t, token : ptd::string()) : @boolean_t::type {$/;"	g
ntokenizer::eat_type	ntokenizer.nl	/^def ntokenizer::eat_type(ref state : @ntokenizer::state_t, type : @ntokenizer::token_t) : ptd::string() {$/;"	g
ntokenizer::get_column	ntokenizer.nl	/^def ntokenizer::get_column(state : @ntokenizer::state_t) : ptd::string() {$/;"	g
ntokenizer::get_last_comment	ntokenizer.nl	/^def ntokenizer::get_last_comment(state : @ntokenizer::state_t) : ptd::string() {$/;"	g
ntokenizer::get_line	ntokenizer.nl	/^def ntokenizer::get_line(state : @ntokenizer::state_t) : ptd::string() {$/;"	g
ntokenizer::get_place	ntokenizer.nl	/^def ntokenizer::get_place(ref state : @ntokenizer::state_t) : ptd::rec({line => ptd::string(), position => ptd::string()}) {$/;"	g
ntokenizer::get_place_ws	ntokenizer.nl	/^def ntokenizer::get_place_ws(ref state : @ntokenizer::state_t) : ptd::rec({line => ptd::string(), position => ptd::string()}) {$/;"	g
ntokenizer::get_token	ntokenizer.nl	/^def ntokenizer::get_token(ref state : @ntokenizer::state_t) : ptd::string() {$/;"	g
ntokenizer::info	ntokenizer.nl	/^def ntokenizer::info(state : @ntokenizer::state_t) : ptd::string() {$/;"	g
ntokenizer::init	ntokenizer.nl	/^def ntokenizer::init(text : ptd::string()) : @ntokenizer::state_t {$/;"	g
ntokenizer::is_text	ntokenizer.nl	/^def ntokenizer::is_text(ref state : @ntokenizer::state_t) : @boolean_t::type {$/;"	g
ntokenizer::is_type	ntokenizer.nl	/^def ntokenizer::is_type(ref state : @ntokenizer::state_t, type : @ntokenizer::token_t) : @boolean_t::type {$/;"	g
ntokenizer::next_is	ntokenizer.nl	/^def ntokenizer::next_is(ref state : @ntokenizer::state_t, token : ptd::string()) : @boolean_t::type {$/;"	g
ntokenizer::state_t	ntokenizer.nl	/^def ntokenizer::state_t() {$/;"	g
ntokenizer::token_t	ntokenizer.nl	/^def ntokenizer::token_t() {$/;"	g
num	string_utils.nl	/^	var num = '';$/;"	v
num_errors	compiler.nl	/^	var num_errors = 0;$/;"	v
num_warnings	compiler.nl	/^	var num_warnings = 0;$/;"	v
number	generator_c.nl	/^			var number = array::len(func->args_type);$/;"	v
o	compiler_base/csv.nl	/^			var o = string::ord(char);$/;"	v
o	compiler_base/csv.nl	/^		var o = string::ord(char);$/;"	v
o	flow_graph.nl	/^		var o = hash::get_value(map, next);$/;"	v
o	post_processing.nl	/^			var o = hash::get_value(old, name);$/;"	v
o	string.nl	/^	var o = string::ord(char);$/;"	v
o	translator.nl	/^			var o = string::ord(cc);$/;"	v
obj_val	generator_c.nl	/^			var obj_val = ov::get_value(obj);$/;"	v
ok_err_types	type_checker.nl	/^			var ok_err_types = ptd_system::try_get_ensure_sub_types(assign_type, ref modules, ref errors);$/;"	v
ok_err_types	type_checker.nl	/^			var ok_err_types = ptd_system::try_get_ensure_sub_types(type, ref modules, ref errors);$/;"	v
ok_err_types	type_checker.nl	/^		var ok_err_types = check_var_decl_try(decl, true, ref modules, ref vars, ref errors, known_types);$/;"	v
ok_err_types	type_checker.nl	/^		var ok_err_types = ptd_system::try_get_ensure_sub_types(type, ref modules, ref errors);$/;"	v
ok_err_types	type_checker.nl	/^		var ok_err_types = ptd_system::try_get_ensure_sub_types({type=>modules->env->ret_type, src=>:known}, ref modules, ref errors);$/;"	v
ok_err_var	type_checker.nl	/^			var ok_err_var = {type => fun_def->ret_type, src=> :known};$/;"	v
ok_label	translator.nl	/^	var ok_label = get_sim_label(ref state);$/;"	v
ok_type	type_checker.nl	/^	var ok_type : @tct::meta_type = tct::tct_im();$/;"	v
old	type_checker.nl	/^	var old = modules->env->breaks;$/;"	v
old_errors	compiler.nl	/^		var old_errors = [];$/;"	v
old_files	compiler.nl	/^	var old_files = {};$/;"	v
old_ref_arguments	interpreter.nl	/^		var old_ref_arguments = state->top->ref_arguments;$/;"	v
old_ret	interpreter.nl	/^		var old_ret = state->top->ret;$/;"	v
old_stack	compiler_base/profile.nl	/^	var old_stack = prof_data->stack;$/;"	v
old_vars	interpreter.nl	/^		var old_vars = state->top->vars;$/;"	v
old_warnings	compiler.nl	/^		var old_warnings = [];$/;"	v
one_register	translator.nl	/^	var one_register = new_register(ref state, :int);$/;"	v
op	generator_c.nl	/^		var op = hash::get_value(get_unary_ops(), una_op->op);$/;"	v
op	generator_c.nl	/^	var op = hash::get_value(get_bin_ops(), bin_op->op);$/;"	v
op	interpreter.nl	/^		var op = bin_op->op;$/;"	v
op	module_checker.nl	/^		var op = bin_op->op;$/;"	v
op	nparser.nl	/^		var op : ptd::string() = ntokenizer::eat_type(ref state->state, :operator);$/;"	v
op	nparser.nl	/^		var op : ptd::string();$/;"	v
op	pretty_printer.nl	/^		var op : ptd::string() = bin_op->op;$/;"	v
op	ptd_parser.nl	/^		var op = ast as :unary_op;$/;"	v
op	translator.nl	/^			var op = bin_op->op;$/;"	v
op	type_checker.nl	/^	var op : ptd::string() = bin_op->op;$/;"	v
op_def	nast.nl	/^def op_def(ref elems : @nast::op_struct_t, in : ptd::string(), prec : ptd::int(), assoc : @nast::op_assoc_t) {$/;"	l
op_def	tc_types.nl	/^def op_def(ref elems : ptd::hash(@tc_types::bin_op_type), in : ptd::string(), arg1 : @tct::meta_type, arg2 : $/;"	l
op_def	type_checker.nl	/^		var op_def = tc_types::get_bin_op_def(binary_op->op);$/;"	v
op_def2	type_checker.nl	/^	var op_def2 = tc_types::get_bin_op_def(op);$/;"	v
op_st	nparser.nl	/^				var op_st : @nast::op_t = hash::get_value(nast::get_ternary_ops(), '?');$/;"	v
op_st	nparser.nl	/^			var op_st : @nast::op_t = hash::get_value(nast::get_bin_ops(), token);$/;"	v
opt	compiler.nl	/^			var opt = string::substr(el, 2, string::length(el) - 2);$/;"	v
opt_cli	compiler.nl	/^	var opt_cli = parse_command_line_args(cmd_args);$/;"	v
oregs	const_evaluator.nl	/^		var oregs = state[number]->regs;$/;"	v
oregs	post_processing.nl	/^		var oregs = state[number]->regs;$/;"	v
out_ext	compiler.nl	/^	var out_ext = get_out_ext(input->language);$/;"	v
output	generator_c_struct_dependence_sort.nl	/^	var output = [];$/;"	v
ov	ov.nl	/^def ov::as(variant, label) {$/;"	l
ov	ov.nl	/^def ov::get_element(variant) {$/;"	l
ov	ov.nl	/^def ov::get_value(variant) {$/;"	l
ov	ov.nl	/^def ov::has_value(variant) {$/;"	l
ov	ov.nl	/^def ov::is(variant, label) {$/;"	l
ov	ov.nl	/^def ov::mk(label) {$/;"	l
ov	ov.nl	/^def ov::mk_val(label, value) {$/;"	l
ov::as	ov.nl	/^def ov::as(variant, label) {$/;"	g
ov::get_element	ov.nl	/^def ov::get_element(variant) {$/;"	g
ov::get_value	ov.nl	/^def ov::get_value(variant) {$/;"	g
ov::has_value	ov.nl	/^def ov::has_value(variant) {$/;"	g
ov::is	ov.nl	/^def ov::is(variant, label) {$/;"	g
ov::mk	ov.nl	/^def ov::mk(label) {$/;"	g
ov::mk_val	ov.nl	/^def ov::mk_val(label, value) {$/;"	g
ov_case	pretty_printer.nl	/^			var ov_case = fun_val->args[1]->val->value as :string;$/;"	v
ov_is_register	translator.nl	/^	var ov_is_register = new_register(ref state, :bool);$/;"	v
own	own.nl	/^def own::arr(arr_type : @ptd::meta_type) : @ptd::meta_type {$/;"	l
own	own.nl	/^def own::hash(h : @ptd::meta_type) : @ptd::meta_type {$/;"	l
own	own.nl	/^def own::rec(h : ptd::hash(@ptd::meta_type)) : @ptd::meta_type {$/;"	l
own	own.nl	/^def own::to_im(arg) {$/;"	l
own	own.nl	/^def own::var(h) : @ptd::meta_type {$/;"	l
own	own_to_im_converter.nl	/^	var own : ptd::string() = 'own';$/;"	v
own::arr	own.nl	/^def own::arr(arr_type : @ptd::meta_type) : @ptd::meta_type {$/;"	g
own::hash	own.nl	/^def own::hash(h : @ptd::meta_type) : @ptd::meta_type {$/;"	g
own::rec	own.nl	/^def own::rec(h : ptd::hash(@ptd::meta_type)) : @ptd::meta_type {$/;"	g
own::to_im	own.nl	/^def own::to_im(arg) {$/;"	g
own::var	own.nl	/^def own::var(h) : @ptd::meta_type {$/;"	g
own_array	own_array.nl	/^def own_array::len(ref array) {$/;"	l
own_array::len	own_array.nl	/^def own_array::len(ref array) {$/;"	g
own_conv	type_checker.nl	/^		var own_conv : ptd::hash(@tct::meta_type) = {};$/;"	v
own_conv	type_checker.nl	/^	var own_conv : ptd::hash(@tct::meta_type) = {};$/;"	v
own_conv_defs	type_checker.nl	/^	var own_conv_defs : ptd::hash(ptd::string()) = {};$/;"	v
own_to_im_converter	own_to_im_converter.nl	/^def own_to_im_converter::get_function(type : @tct::meta_type, known_types : ptd::hash(@tct::meta_type))$/;"	l
own_to_im_converter	own_to_im_converter.nl	/^def own_to_im_converter::get_function_name(type : @tct::meta_type, known_types : ptd::hash(@tct::meta_type)) : ptd::string() {$/;"	l
own_to_im_converter	own_to_im_converter.nl	/^def own_to_im_converter::get_required_arg_type(type : @tct::meta_type, known_types : ptd::hash(@tct::meta_type)) : ptd::string() {$/;"	l
own_to_im_converter	own_to_im_converter.nl	/^def own_to_im_converter::name_t() {$/;"	l
own_to_im_converter	own_to_im_converter.nl	/^def own_to_im_converter::res_t() {$/;"	l
own_to_im_converter::get_function	own_to_im_converter.nl	/^def own_to_im_converter::get_function(type : @tct::meta_type, known_types : ptd::hash(@tct::meta_type))$/;"	g
own_to_im_converter::get_function_name	own_to_im_converter.nl	/^def own_to_im_converter::get_function_name(type : @tct::meta_type, known_types : ptd::hash(@tct::meta_type)) : ptd::string() {$/;"	g
own_to_im_converter::get_required_arg_type	own_to_im_converter.nl	/^def own_to_im_converter::get_required_arg_type(type : @tct::meta_type, known_types : ptd::hash(@tct::meta_type)) : ptd::string() {$/;"	g
own_to_im_converter::name_t	own_to_im_converter.nl	/^def own_to_im_converter::name_t() {$/;"	g
own_to_im_converter::res_t	own_to_im_converter.nl	/^def own_to_im_converter::res_t() {$/;"	g
param	ptd_system.nl	/^			var param = hash::get_value(cases, 'err');$/;"	v
param	ptd_system.nl	/^			var param = hash::get_value(cases, 'ok');$/;"	v
params_type	translator.nl	/^			var params_type =  variant_type as :tct_own_var;$/;"	v
parse	dfile.nl	/^def parse(ref state : @dfile::state_t, ref error : @boolean_t::type) : ptd::ptd_im() {$/;"	l
parse_arr	nparser.nl	/^def parse_arr(ref state : @nparser::state_t) : ptd::var({ok => ptd::arr(@nast::value_t), err => ptd::string()}) {$/;"	l
parse_block	nparser.nl	/^def parse_block(ref state : @nparser::state_t) : @nparser::try_cmd_t {$/;"	l
parse_cmd	nparser.nl	/^def parse_cmd(ref state : @nparser::state_t) : @nparser::try_cmd_t {$/;"	l
parse_command_line_args	compiler.nl	/^def parse_command_line_args(args : ptd::arr(ptd::string())) : @compiler::input_type {$/;"	l
parse_cond	nparser.nl	/^def parse_cond(ref state : @nparser::state_t) : ptd::var({ok => @nast::value_t, err => ptd::string()}) {$/;"	l
parse_expr	nparser.nl	/^def parse_expr(ref state : @nparser::state_t) : @nparser::try_value_t {$/;"	l
parse_expr_list	nparser.nl	/^def parse_expr_list(ref state : @nparser::state_t) : ptd::var({ok => ptd::arr(@nast::value_t), err => ptd::string()}) {$/;"	l
parse_expr_rec	nparser.nl	/^def parse_expr_rec(ref state : @nparser::state_t, prec : ptd::string()) : @nparser::try_value_t {$/;"	l
parse_expr_rec_left	nparser.nl	/^def parse_expr_rec_left(ref state : @nparser::state_t, left : @nast::value_t, prec : ptd::string()) : @nparser::try_value_t {$/;"	l
parse_file	compiler.nl	/^	var parse_file = {};$/;"	v
parse_fun_arg_list	nparser.nl	/^def parse_fun_arg_list(ref state : @nparser::state_t) : ptd::var({$/;"	l
parse_fun_def	nparser.nl	/^def parse_fun_def(ref state : @nparser::state_t, module_name : ptd::string()) : ptd::var({$/;"	l
parse_fun_label	nparser.nl	/^def parse_fun_label(ref state : @nparser::state_t) : @nast::fun_label_t {$/;"	l
parse_fun_val_arg	nparser.nl	/^def parse_fun_val_arg(ref state : @nparser::state_t) : ptd::var({ok => @nast::fun_val_arg_t, err => ptd::string()}) {$/;"	l
parse_fun_val_arg_list	nparser.nl	/^def parse_fun_val_arg_list(ref state : @nparser::state_t) : ptd::var({$/;"	l
parse_hash	nparser.nl	/^def parse_hash(ref state : @nparser::state_t) : ptd::var({ok => @nast::hash_decl_t, err => ptd::string()}) {$/;"	l
parse_hash	ptd_parser.nl	/^def parse_hash(fun_arg : @nast::value_t) : ptd::var({ok => ptd::hash(@tct::meta_type), err => ptd::string()}) {$/;"	l
parse_hash_key	nparser.nl	/^def parse_hash_key(ref state : @nparser::state_t) : @nast::value_t {$/;"	l
parse_label	nparser.nl	/^def parse_label(ref state : @nparser::state_t) : ptd::var({$/;"	l
parse_module	compiler.nl	/^def parse_module(module : ptd::string(), src : ptd::string(), ref errors : @compiler::errors_group_t) : ptd::var({$/;"	l
parse_module	nparser.nl	/^def parse_module(ref state : @nparser::state_t, name : ptd::string()) : @nast::module_t {$/;"	l
parse_ref_var_decl_sim	nparser.nl	/^def parse_ref_var_decl_sim(ref state : @nparser::state_t) : @nast::variable_declaration_t {$/;"	l
parse_scalar	dfile.nl	/^def parse_scalar(ref state : @dfile::state_t, ref error : @boolean_t::type) : ptd::string() {$/;"	l
parse_try_ensure	nparser.nl	/^def parse_try_ensure(ref state : @nparser::state_t) : ptd::var({ok => @nast::try_ensure_t, err => ptd::string()}) {$/;"	l
parse_type	nparser.nl	/^def parse_type(ref state : @nparser::state_t) : @nparser::try_value_t {$/;"	l
parse_var_decl	nparser.nl	/^def parse_var_decl(ref state : @nparser::state_t) : ptd::var({ok => @nast::variable_declaration_t, err => ptd::string()}) {$/;"	l
parse_var_decl_sim	nparser.nl	/^def parse_var_decl_sim(ref state : @nparser::state_t) : @nast::variable_declaration_t {$/;"	l
parse_variant	nparser.nl	/^def parse_variant(ref state : @nparser::state_t) : ptd::var({ok => @nast::variant_t, err => ptd::string()}) {$/;"	l
parse_variant_decl	nparser.nl	/^def parse_variant_decl(ref state : @nparser::state_t) : @nast::variant_decl_t {$/;"	l
parse_variant_label	nparser.nl	/^def parse_variant_label(ref state : @nparser::state_t) : ptd::string() {$/;"	l
parsed_list	compiler.nl	/^		var parsed_list = dfile::try_sload(file);$/;"	v
part_sort	array.nl	/^def part_sort(ref arr, begin, end, comp) {$/;"	l
path	compiler.nl	/^			var path = hash::get_value(nianio_files, module)->dst as :java;$/;"	v
path	compiler.nl	/^			var path = hash::get_value(nianio_files, module)->dst as :js;$/;"	v
path	compiler.nl	/^			var path = hash::get_value(nianio_files, module)->dst as :nla;$/;"	v
path	compiler.nl	/^			var path = hash::get_value(nianio_files, module)->dst as :pm;$/;"	v
path	compiler.nl	/^	var path = dir . '\/';$/;"	v
path	generator_c_struct_dependence_sort.nl	/^	var path = {};$/;"	v
path	ptd.nl	/^	var path = [];$/;"	v
path_module	compiler.nl	/^		var path_module = mk_path_module(file, module, input);$/;"	v
path_type	generator_c_struct_dependence_sort.nl	/^	var path_type = :none;$/;"	v
paths	compiler.nl	/^			var paths = hash::get_value(nianio_files, module)->dst as :c;$/;"	v
pid	compiler.nl	/^	var pid = nsystem::get_pid();$/;"	v
pind	pretty_printer.nl	/^def pind(ind : ptd::int()) : ptd::string() {$/;"	l
pind	wprinter.nl	/^def pind(ind : ptd::string()) : ptd::string() {$/;"	l
plus	interpreter.nl	/^	var plus = state->profile[array::len(state->profile) - 1]->time;$/;"	v
pos	compiler.nl	/^	var pos = string::length(path) - 1;$/;"	v
pos	nparser.nl	/^	var pos = ntokenizer::get_column(state->state);$/;"	v
pos	string_utils.nl	/^	var pos = 0;$/;"	v
post_processing	post_processing.nl	/^def post_processing::clear_module_from_state(ref state : @post_processing_t::state_t, module : ptd::string()) {$/;"	l
post_processing	post_processing.nl	/^def post_processing::find(ref state : @post_processing_t::state_t, ref nlasms : ptd::hash(@nlasm::result_t)) {$/;"	l
post_processing	post_processing.nl	/^def post_processing::get_call_graph(nlasms : ptd::hash(@nlasm::result_t)) : @post_processing_t::fun_tree_t {$/;"	l
post_processing	post_processing.nl	/^def post_processing::init(mat_fun_def : ptd::hash(ptd::int()), o : @post_processing_t::optimization_t) : $/;"	l
post_processing::clear_module_from_state	post_processing.nl	/^def post_processing::clear_module_from_state(ref state : @post_processing_t::state_t, module : ptd::string()) {$/;"	g
post_processing::find	post_processing.nl	/^def post_processing::find(ref state : @post_processing_t::state_t, ref nlasms : ptd::hash(@nlasm::result_t)) {$/;"	g
post_processing::get_call_graph	post_processing.nl	/^def post_processing::get_call_graph(nlasms : ptd::hash(@nlasm::result_t)) : @post_processing_t::fun_tree_t {$/;"	g
post_processing::init	post_processing.nl	/^def post_processing::init(mat_fun_def : ptd::hash(ptd::int()), o : @post_processing_t::optimization_t) : $/;"	g
post_processing_labels	post_processing.nl	/^def post_processing_labels(ref nlasms : ptd::hash(@nlasm::result_t)) {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::const_reg_t() {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::const_reg_val_t() {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::fun_tree_t() {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::math_funs_t() {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::optimization_t() {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::reg_const() {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::reg_val_const() {$/;"	l
post_processing_t	post_processing_t.nl	/^def post_processing_t::state_t() {$/;"	l
post_processing_t::const_reg_t	post_processing_t.nl	/^def post_processing_t::const_reg_t() {$/;"	g
post_processing_t::const_reg_val_t	post_processing_t.nl	/^def post_processing_t::const_reg_val_t() {$/;"	g
post_processing_t::fun_tree_t	post_processing_t.nl	/^def post_processing_t::fun_tree_t() {$/;"	g
post_processing_t::math_funs_t	post_processing_t.nl	/^def post_processing_t::math_funs_t() {$/;"	g
post_processing_t::optimization_t	post_processing_t.nl	/^def post_processing_t::optimization_t() {$/;"	g
post_processing_t::reg_const	post_processing_t.nl	/^def post_processing_t::reg_const() {$/;"	g
post_processing_t::reg_val_const	post_processing_t.nl	/^def post_processing_t::reg_val_const() {$/;"	g
post_processing_t::state_t	post_processing_t.nl	/^def post_processing_t::state_t() {$/;"	g
pot	string_utils.nl	/^	var pot = 1.0;$/;"	v
poz	compiler_base/csv.nl	/^	var poz = 0;$/;"	v
pprint	pretty_printer.nl	/^	var pprint : @wprinter::pretty_arr_t = [];$/;"	v
pprint	pretty_printer.nl	/^	var pprint : @wprinter::pretty_arr_t = [wprinter::build_sim('die')];$/;"	v
pprint	pretty_printer.nl	/^	var pprint : @wprinter::pretty_arr_t = [wprinter::build_sim('return')];$/;"	v
pprint	pretty_printer.nl	/^	var pprint : @wprinter::pretty_arr_t = [wprinter::build_sim(header), wprinter::get_sep()];$/;"	v
pprint	pretty_printer.nl	/^	var pprint : @wprinter::pretty_arr_t = [wprinter::build_sim(typ)];$/;"	v
pre	generator_js.nl	/^	var pre = '';$/;"	v
pre	post_processing.nl	/^			var pre = (fun->access is :pub ? '::' : '_priv::') . fun->name;$/;"	v
pre	post_processing.nl	/^			var pre = fun->access is :pub ? '::' : '_priv::';$/;"	v
prefix	compiler.nl	/^		var prefix = 'WAR';$/;"	v
prepare_def_fun	type_checker.nl	/^def prepare_def_fun(modules : ptd::hash(@nast::module_t), ref errors : @tc_types::errors_t) : @tc_types::defs_funs_t {$/;"	l
pretty_printer	pretty_printer.nl	/^def pretty_printer::print_module_to_str(mod : @nast::module_t) : ptd::string() {$/;"	l
pretty_printer	pretty_printer.nl	/^def pretty_printer::print_module_to_struct(mod : @nast::module_t) : @pretty_printer::struct_t {$/;"	l
pretty_printer	pretty_printer.nl	/^def pretty_printer::struct_t() {$/;"	l
pretty_printer::print_module_to_str	pretty_printer.nl	/^def pretty_printer::print_module_to_str(mod : @nast::module_t) : ptd::string() {$/;"	g
pretty_printer::print_module_to_struct	pretty_printer.nl	/^def pretty_printer::print_module_to_struct(mod : @nast::module_t) : @pretty_printer::struct_t {$/;"	g
pretty_printer::struct_t	pretty_printer.nl	/^def pretty_printer::struct_t() {$/;"	g
prev	flow_graph.nl	/^		var prev = block->prev;$/;"	v
prev	module_checker.nl	/^		var prev = save_block(ref state);$/;"	v
prev_ref	type_checker.nl	/^	var prev_ref = {};$/;"	v
print	generator_c.nl	/^def print(ref state : @generator_c::state_t, s : ptd::string()) : ptd::void() {$/;"	l
print	generator_pm.nl	/^def print(ref state : @generator_pm::state_t, s : ptd::string()) : ptd::void() {$/;"	l
print	translator.nl	/^def print(ref state : @translator::state_t, ord : @nlasm::order_t) {$/;"	l
print_args_dollar	generator_pm.nl	/^def print_args_dollar(args_size : ptd::string(), ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_arr	generator_java.nl	/^def print_arr(arr) : ptd::string() {$/;"	l
print_arr	generator_js.nl	/^def print_arr(arr : ptd::arr(@nlasm::reg_t)) : ptd::string() {$/;"	l
print_arr_in_lines	wprinter.nl	/^def print_arr_in_lines(ref state : @wprinter::state_t, arr : @wprinter::pretty_arr_t, ind : ptd::string(), pref : ptd::string()) $/;"	l
print_array_declaration	translator.nl	/^def print_array_declaration(arr : ptd::arr(@nast::value_t), destination : @nlasm::reg_t, ref state : $/;"	l
print_array_push	translator.nl	/^def print_array_push(dest : @nlasm::reg_t, value : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_bin_op	generator_c.nl	/^def print_bin_op(ref state : @generator_c::state_t, bin_op : @nlasm::bin_op) : ptd::void() {$/;"	l
print_bin_op	generator_java.nl	/^def print_bin_op(bin_op) : ptd::string() {$/;"	l
print_bin_op	generator_js.nl	/^def print_bin_op(bin_op : @nlasm::bin_op, ref call_counter : ptd::string()) : ptd::string() {$/;"	l
print_bin_op	generator_pm.nl	/^def print_bin_op(bin_op : ptd::rec({$/;"	l
print_bin_op	translator.nl	/^def print_bin_op(as_bin_op : @nast::value_t, destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_bin_op_operator_command	translator.nl	/^def print_bin_op_operator_command(destination : @nlasm::reg_t, arg_1 : @nlasm::reg_t, arg_2 : @nlasm::reg_t, operator : $/;"	l
print_break	pretty_printer.nl	/^def print_break() : @wprinter::pretty_t {$/;"	l
print_call	generator_java.nl	/^def print_call(module : ptd::string(), cmodule : ptd::string(), cname : ptd::string(), cargs) : ptd::string() {$/;"	l
print_call	generator_js.nl	/^def print_call(cmodule : ptd::string(), cname : ptd::string(), cargs,$/;"	l
print_call	generator_pm.nl	/^def print_call(call : @nlasm::call_t, ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_call_base	translator.nl	/^def print_call_base(dest : @nlasm::reg_t, fun_name : ptd::string(), args : ptd::arr(ptd::var({$/;"	l
print_class_begin	generator_java.nl	/^def print_class_begin(module_name : ptd::string()) {$/;"	l
print_class_end	generator_java.nl	/^def print_class_end() {$/;"	l
print_cmd	generator_c.nl	/^def print_cmd(ref state : @generator_c::state_t, asm : @nlasm::cmd_t) : ptd::void() {$/;"	l
print_cmd	pretty_printer.nl	/^def print_cmd(ref state : @wprinter::state_t, cmd : @nast::cmd_t, ind : ptd::int()) : ptd::void() {$/;"	l
print_cmd	translator.nl	/^def print_cmd(cmd : @nast::cmd_t, ref state : @translator::state_t) {$/;"	l
print_cmd_array	translator.nl	/^def print_cmd_array(arr : ptd::arr(@nast::cmd_t), ref state : @translator::state_t) {$/;"	l
print_command	generator_java.nl	/^def print_command(module : ptd::string(), command : @nlasm::cmd_t) {$/;"	l
print_command	generator_js.nl	/^def print_command(command : @nlasm::cmd_t, fun_args : @nlasm::args_type, ref call_counter : ptd::string(), ref consts) {$/;"	l
print_command	generator_pm.nl	/^def print_command(command : @nlasm::cmd_t, ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_commands	generator_pm.nl	/^def print_commands(commands : ptd::arr(@nlasm::cmd_t), ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_cond_mod	pretty_printer.nl	/^def print_cond_mod(ref state : @wprinter::state_t, header : ptd::string(), cmd : @nast::cmd_t, arg_list : ptd::arr($/;"	l
print_const_arr	generator_java.nl	/^def print_const_arr(reg, arr) : ptd::string() {$/;"	l
print_const_arr	generator_js.nl	/^def print_const_arr(arr) : ptd::string() { $/;"	l
print_const_hash	generator_java.nl	/^def print_const_hash(reg, hash) : ptd::string() {$/;"	l
print_const_hash	generator_js.nl	/^def print_const_hash(hash) : ptd::string() {$/;"	l
print_const_ov	generator_java.nl	/^def print_const_ov(reg, variant) : ptd::string() {$/;"	l
print_const_ov	generator_js.nl	/^def print_const_ov(variant) : ptd::string() {$/;"	l
print_const_value	generator_java.nl	/^def print_const_value(reg, value) {$/;"	l
print_const_value	generator_js.nl	/^def print_const_value(value) {$/;"	l
print_const_value_aggr	generator_js.nl	/^def print_const_value_aggr(const_val, ref consts) : ptd::string() {$/;"	l
print_continue	pretty_printer.nl	/^def print_continue() : @wprinter::pretty_t {$/;"	l
print_declaration	generator_c.nl	/^def print_declaration(ref state : @generator_c::state_t, reg : @nlasm::reg_t){$/;"	l
print_die	pretty_printer.nl	/^def print_die(as_die : ptd::arr(@nast::value_t)) : @wprinter::pretty_t {$/;"	l
print_die	translator.nl	/^def print_die(value : ptd::arr(@nast::value_t), debug : @nast::debug_t, ref state : @translator::state_t) {$/;"	l
print_for	translator.nl	/^def print_for(as_for : @nast::for_t, ref state : @translator::state_t) {$/;"	l
print_fora	translator.nl	/^def print_fora(as_fora : @nast::fora_t, ref state : @translator::state_t) {$/;"	l
print_forh	translator.nl	/^def print_forh(as_forh : @nast::forh_t, ref state : @translator::state_t) {$/;"	l
print_fun_arg	pretty_printer.nl	/^def print_fun_arg(arg : @nast::fun_val_arg_t) : @wprinter::pretty_t {$/;"	l
print_fun_def	pretty_printer.nl	/^def print_fun_def(ref state : @wprinter::state_t, function : @nast::fun_def_t, module : ptd::string()) : ptd::void() {$/;"	l
print_fun_def	translator.nl	/^def print_fun_def(function : @nast::fun_def_t, ref state : @translator::state_t) {$/;"	l
print_fun_def_head	pretty_printer.nl	/^def print_fun_def_head(ref state : @wprinter::state_t, function : @nast::fun_def_t, module : ptd::string()) : ptd::void() {$/;"	l
print_fun_val	translator.nl	/^def print_fun_val(fun_val : @nast::fun_val_t, destination : @nlasm::reg_t, type : @tct::meta_type, ref state : @translator::state_t) {$/;"	l
print_func_type_struct_decl	generator_c.nl	/^def print_func_type_struct_decl(ref state : @generator_c::state_t, name : ptd::string(), type : @tct::meta_type,$/;"	l
print_func_type_struct_def	generator_c.nl	/^def print_func_type_struct_def(ref state : @generator_c::state_t, name : ptd::string(), type : @tct::meta_type,$/;"	l
print_function	generator_java.nl	/^def print_function(function : @nlasm::function_t, module_name : ptd::string()) : ptd::string() {$/;"	l
print_function	generator_js.nl	/^def print_function(function : @nlasm::function_t, module_name : ptd::string(), ref consts) : ptd::string() {$/;"	l
print_function	generator_pm.nl	/^def print_function(function : @nlasm::function_t, ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_function_access	generator_pm.nl	/^def print_function_access(access : @nlasm::access_t, ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_function_block	generator_c.nl	/^def print_function_block(ref state : @generator_c::state_t, func : @nlasm::function_t) : ptd::void() {$/;"	l
print_function_or_singleton	generator_java.nl	/^def print_function_or_singleton(function : @nlasm::function_t, module_name : ptd::string()) : ptd::string() {$/;"	l
print_function_or_singleton	generator_js.nl	/^def print_function_or_singleton(function : @nlasm::function_t, module_name : ptd::string(), ref consts) : ptd::string() {$/;"	l
print_functions	generator_pm.nl	/^def print_functions(functions : ptd::arr(@nlasm::function_t), ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_get_from_index	translator.nl	/^def print_get_from_index(destination : @nlasm::reg_t, src : @nlasm::reg_t, index : @nlasm::reg_t, ref state : $/;"	l
print_get_hash_value	generator_java.nl	/^def print_get_hash_value(get_val) {$/;"	l
print_get_value	translator.nl	/^def print_get_value(destination : @nlasm::reg_t, label : @nlasm::reg_t, key : ptd::string(), ref state : $/;"	l
print_getter	generator_java.nl	/^def print_getter() : ptd::string() {$/;"	l
print_goto	generator_java.nl	/^def print_goto(goto : ptd::string()) : ptd::string() {$/;"	l
print_goto	generator_js.nl	/^def print_goto(goto : ptd::string()) : ptd::string() {$/;"	l
print_hash	generator_java.nl	/^def print_hash(hash) : ptd::string() {$/;"	l
print_hash	generator_js.nl	/^def print_hash(harr : ptd::arr(ptd::rec({key => ptd::string(), val => @nlasm::reg_t}))) : ptd::string() {$/;"	l
print_hash_declaration	generator_c.nl	/^def print_hash_declaration(ref state : @generator_c::state_t, hash_decl : @nlasm::hash_decl_t) : ptd::void() {$/;"	l
print_hash_declaration	translator.nl	/^def print_hash_declaration(hash : ptd::arr(@nast::hash_elem_t), destination : @nlasm::reg_t, ref state : $/;"	l
print_hash_elem	pretty_printer.nl	/^def print_hash_elem(elem : @nast::hash_elem_t) : @wprinter::pretty_t {$/;"	l
print_hash_get_key_iter	generator_c.nl	/^def print_hash_get_key_iter(ref state : @generator_c::state_t, get_key_iter : @nlasm::hash_dest_iter_t) : ptd::void() {$/;"	l
print_hash_init_iter	generator_c.nl	/^def print_hash_init_iter(ref state : @generator_c::state_t, init_iter : @nlasm::hash_iter_t) : ptd::void() {$/;"	l
print_hash_is_end	generator_c.nl	/^def print_hash_is_end(ref state : @generator_c::state_t, is_end : @nlasm::hash_dest_iter_t) : ptd::void() {$/;"	l
print_hash_name	generator_java.nl	/^def print_hash_name() : ptd::string() {$/;"	l
print_hash_next_iter	generator_c.nl	/^def print_hash_next_iter(ref state : @generator_c::state_t, next_iter : @nlasm::hash_iter_t) : ptd::void() {$/;"	l
print_if	translator.nl	/^def print_if(as_if : @nast::if_t, short : @boolean_t::type, ref state : @translator::state_t) {$/;"	l
print_if_goto	translator.nl	/^def print_if_goto(destination : ptd::string(), reg : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_if_mod	translator.nl	/^def print_if_mod(as_if_mod : ptd::rec({cond => @nast::value_t, cmd => @nast::cmd_t}), ref state : @translator::state_t) {$/;"	l
print_imm_double_operation	generator_java.nl	/^def print_imm_double_operation(bin_op) : ptd::string() {$/;"	l
print_imports	generator_java.nl	/^def print_imports(asm : @nlasm::result_t) {$/;"	l
print_imports	generator_pm.nl	/^def print_imports(imports : ptd::arr(ptd::string()), ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_init_const	generator_c.nl	/^def print_init_const(ref state : @generator_c::state_t) : ptd::void() {$/;"	l
print_int_call_sim	generator_js.nl	/^def print_int_call_sim(mod_name : ptd::string(), fun_name : ptd::string(), args : ptd::arr(@nlasm::reg_t)) {$/;"	l
print_int_value	generator_java.nl	/^def print_int_value() : ptd::string() {$/;"	l
print_internal_call	generator_js.nl	/^def print_internal_call(module_name : ptd::string(), fun_name : ptd::string(), args : ptd::arr(ptd::var({ref => @nlasm::reg_t, str => ptd::string(), reg => @nlasm::reg_t})), $/;"	l
print_loop	pretty_printer.nl	/^def print_loop(ref state : @wprinter::state_t, header : ptd::string(), cmd : @nast::cmd_t, arg_list : ptd::arr($/;"	l
print_loop	translator.nl	/^def print_loop(as_loop : @nast::cmd_t, ref state : @translator::state_t) {$/;"	l
print_loop_break	translator.nl	/^def print_loop_break(ref state : @translator::state_t, info : @translator::loop) {$/;"	l
print_loop_or_mod	pretty_printer.nl	/^def print_loop_or_mod(ref state : @wprinter::state_t, short : @nast::bool_t, header : ptd::string(), cmd : @nast::cmd_t, $/;"	l
print_match	translator.nl	/^def print_match(as_match : @nast::match_t, ref state : @translator::state_t) {$/;"	l
print_mod	generator_c.nl	/^def print_mod(ref state : @generator_c::state_t, asm : @nlasm::result_t) {$/;"	l
print_move	generator_c.nl	/^def print_move(ref state : @generator_c::state_t, src : @nlasm::reg_t, dest : @nlasm::reg_t) {$/;"	l
print_move_to_im	generator_c.nl	/^def print_move_to_im(ref state : @generator_c::state_t, src : @nlasm::reg_t, dest : @nlasm::reg_t) {$/;"	l
print_net_format	dfile.nl	/^def print_net_format(ref state : @dfile::state_out, obj : ptd::ptd_im()) : ptd::void() {$/;"	l
print_net_formatstr	dfile.nl	/^def print_net_formatstr(ref state : @dfile::state_out, str) : ptd::void() {$/;"	l
print_ov_mk	generator_java.nl	/^def print_ov_mk(ov_mk) : ptd::string() {$/;"	l
print_ov_mk	generator_js.nl	/^def print_ov_mk(ov_mk : @nlasm::ov_mk_t, ref consts, ref call_counter : ptd::string()) : ptd::string() {$/;"	l
print_ov_mk	generator_pm.nl	/^def print_ov_mk(ov_mk : @nlasm::ov_mk_t, ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_own_forh	translator.nl	/^def print_own_forh(as_forh : @nast::forh_t, ref state : @translator::state_t) {$/;"	l
print_own_val_init	translator.nl	/^def print_own_val_init(val : @nast::value_t, destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_package_name	generator_java.nl	/^def print_package_name() {$/;"	l
print_post_operator	translator.nl	/^def print_post_operator(value : @nast::value_t, sign : ptd::string(), destination : @nlasm::reg_t, ref state : $/;"	l
print_ptd_forh	translator.nl	/^def print_ptd_forh(as_forh : @nast::forh_t, ref state : @translator::state_t) {$/;"	l
print_register	generator_java.nl	/^def print_register(register) : ptd::string() {$/;"	l
print_register	generator_js.nl	/^def print_register(register : @nlasm::reg_t) : ptd::string() {$/;"	l
print_register	generator_pm.nl	/^def print_register(register : @nlasm::reg_t, ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_register_as_number	generator_java.nl	/^def print_register_as_number(value) : ptd::string() {$/;"	l
print_register_getter	generator_java.nl	/^def print_register_getter(register) : ptd::string() {$/;"	l
print_register_setter	generator_java.nl	/^def print_register_setter(register, value) : ptd::string() {$/;"	l
print_register_to_assign	generator_js.nl	/^def print_register_to_assign(register : @nlasm::reg_t) : ptd::string() {$/;"	l
print_register_to_assign	generator_pm.nl	/^def print_register_to_assign(register : @nlasm::reg_t, ref state : @generator_pm::state_t) : ptd::void() {$/;"	l
print_rep	translator.nl	/^def print_rep(as_rep : @nast::rep_t, ref state : @translator::state_t) {$/;"	l
print_return	generator_java.nl	/^def print_return(return_i) : ptd::string() {$/;"	l
print_return	generator_js.nl	/^def print_return(return_i : @nlasm::return, fun_args : @nlasm::args_type) : ptd::string() {$/;"	l
print_return	pretty_printer.nl	/^def print_return(as_return : @nast::value_t) : @wprinter::pretty_t {$/;"	l
print_return	translator.nl	/^def print_return(as_return : @nast::value_t, ref state : @translator::state_t) {$/;"	l
print_row	compiler_base/profile.nl	/^def print_row(ref prof_data, time, label) {$/;"	l
print_row	profile_inter.nl	/^def print_row(stack, time, label) {$/;"	l
print_safe_return	translator.nl	/^def print_safe_return(to_return : ptd::var({val => @nlasm::reg_t, emp => ptd::none()}), ref state : @translator::state_t) {$/;"	l
print_set_at_idx	generator_pm.nl	/^def print_set_at_idx(set_at_idx : ptd::rec({src => @nlasm::reg_t, idx => @nlasm::reg_t, val => @nlasm::reg_t}), ref $/;"	l
print_set_at_index	translator.nl	/^def print_set_at_index(label : @nlasm::reg_t, index : @nlasm::reg_t, value : @nlasm::reg_t, ref state : $/;"	l
print_set_hash_value	generator_java.nl	/^def print_set_hash_value(set_val) {$/;"	l
print_set_val	generator_pm.nl	/^def print_set_val(set_val : ptd::rec({src => @nlasm::reg_t, key => ptd::string(), val => @nlasm::reg_t}), ref state : $/;"	l
print_set_value	translator.nl	/^def print_set_value(label : @nlasm::reg_t, key : ptd::string(), value : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_sim_arr	wprinter.nl	/^def print_sim_arr(ref state : @wprinter::state_t, arr : @wprinter::pretty_arr_t) : ptd::void() {$/;"	l
print_sim_label	translator.nl	/^def print_sim_label(label : ptd::string(), ref state : @translator::state_t) {$/;"	l
print_sim_rec	wprinter.nl	/^def print_sim_rec(ref state : @wprinter::state_t, wise_s : @wprinter::pretty_t) : ptd::void() {$/;"	l
print_sim_value	pretty_printer.nl	/^def print_sim_value(value : @nast::value_t) : @wprinter::pretty_t {$/;"	l
print_simple_statement	pretty_printer.nl	/^def print_simple_statement(cmd : @nast::cmd_t) : @wprinter::pretty_t {$/;"	l
print_st	pretty_printer.nl	/^def print_st(ref state : @wprinter::state_t, cmd : @nast::cmd_t, ind : ptd::int()) : ptd::void() {$/;"	l
print_str_arr	wprinter.nl	/^def print_str_arr(ref state : @wprinter::state_t, elem : @wprinter::str_arr_t, pref : ptd::string(), ind : ptd::string()) : $/;"	l
print_str_imm	generator_js.nl	/^def print_str_imm(string : ptd::string(), ref consts) : ptd::string() {$/;"	l
print_t_rec	wprinter.nl	/^def print_t_rec(ref state : @wprinter::state_t, wise_s : @wprinter::pretty_t, pref : ptd::string(), ind : ptd::string()) : $/;"	l
print_ternary_op	translator.nl	/^def print_ternary_op(op : @nast::ternary_op_t, destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_to_header	generator_c.nl	/^def print_to_header(ref state : @generator_c::state_t, s : ptd::string()) {$/;"	l
print_try_ensure	pretty_printer.nl	/^def print_try_ensure(value : @nast::try_ensure_t, typ : ptd::string()) : @wprinter::pretty_t {$/;"	l
print_try_ensure	translator.nl	/^def print_try_ensure(try_ensure : @nast::try_ensure_t, is_try : @nast::bool_t, ref state : @translator::state_t) {$/;"	l
print_una_op	generator_java.nl	/^def print_una_op(una_op) : ptd::string() {$/;"	l
print_una_op	generator_js.nl	/^def print_una_op(una_op : @nlasm::una_op_t) : ptd::string() {$/;"	l
print_una_op	generator_pm.nl	/^def print_una_op(una_op : ptd::rec({dest => @nlasm::reg_t, src => @nlasm::reg_t, op => ptd::string()}), ref state : $/;"	l
print_unary_op	translator.nl	/^def print_unary_op(unary_op : @nast::unary_op_t, destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_unless_mod	translator.nl	/^def print_unless_mod(as_unless_mod : ptd::rec({cond => @nast::value_t, cmd => @nast::cmd_t}), ref state : $/;"	l
print_use_field	generator_c.nl	/^def print_use_field(ref state : @generator_c::state_t, use_field : @nlasm::use_field_t) : ptd::void() {$/;"	l
print_use_hash_index	generator_c.nl	/^def print_use_hash_index(ref state : @generator_c::state_t, use_hash_index : @nlasm::use_hash_index_t) : ptd::void() {$/;"	l
print_use_index	generator_c.nl	/^def print_use_index(ref state : @generator_c::state_t, use_index : @nlasm::use_index_t) : ptd::void() {$/;"	l
print_use_variant	generator_c.nl	/^def print_use_variant(ref state : @generator_c::state_t, use_variant : @nlasm::use_variant_t) : ptd::void() {$/;"	l
print_val	pretty_printer.nl	/^def print_val(val : @nast::value_t) : @wprinter::pretty_t {$/;"	l
print_val	translator.nl	/^def print_val(val : @nast::value_t, destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_var_decl	pretty_printer.nl	/^def print_var_decl(var_decl : @nast::variable_declaration_t) : @wprinter::pretty_t {$/;"	l
print_var_decl	translator.nl	/^def print_var_decl(var_decl : @nast::variable_declaration_t, ref state : @translator::state_t,$/;"	l
print_variable	translator.nl	/^def print_variable(variable : ptd::string(), destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_variant	pretty_printer.nl	/^def print_variant(variant : @nast::variant_t) : @wprinter::pretty_t {$/;"	l
print_variant	translator.nl	/^def print_variant(variant : @nast::variant_t, destination : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
print_variant_case_decl	pretty_printer.nl	/^def print_variant_case_decl(variant : @nast::variant_decl_t) : @wprinter::pretty_t {$/;"	l
print_while	translator.nl	/^def print_while(as_while : @nast::while_t, ref state : @translator::state_t) {$/;"	l
printed	string_compiler.nl	/^	var printed = {};$/;"	v
println	generator_c.nl	/^def println(ref state : @generator_c::state_t, s : ptd::string()) {$/;"	l
println_to_header	generator_c.nl	/^def println_to_header(ref state : @generator_c::state_t, s : ptd::string()) {$/;"	l
priv_sort	array.nl	/^def priv_sort(ref arr, comp) {$/;"	l
process_bin_op	reference_generator.nl	/^def process_bin_op(ref ret : @reference_generator::refs, module : @reference_generator::module, bin_op : @nast::bin_op_t) {$/;"	l
process_block	reference_generator.nl	/^def process_block(ref ret : @reference_generator::refs, module : @reference_generator::module, block : @nast::block_t) {$/;"	l
process_cmd	reference_generator.nl	/^def process_cmd(ref ret : @reference_generator::refs, module : @reference_generator::module, cmd : @nast::cmd_t) {$/;"	l
process_deref	compiler.nl	/^def process_deref(deref : @tc_types::deref_types) : @reference_generator::refs {$/;"	l
process_die	reference_generator.nl	/^def process_die(ref ret : @reference_generator::refs, module : @reference_generator::module, die_cmd : @nast::die_t) {$/;"	l
process_for	reference_generator.nl	/^def process_for(ref ret : @reference_generator::refs, module : @reference_generator::module, for_cmd : @nast::for_t) {$/;"	l
process_fora	reference_generator.nl	/^def process_fora(ref ret : @reference_generator::refs, module : @reference_generator::module, fora_cmd : @nast::fora_t) {$/;"	l
process_forh	reference_generator.nl	/^def process_forh(ref ret : @reference_generator::refs, module : @reference_generator::module, forh_cmd : @nast::forh_t) {$/;"	l
process_fun_def	reference_generator.nl	/^def process_fun_def(ref ret : @reference_generator::refs, module : @reference_generator::module, fun_def : @nast::fun_def_t) {$/;"	l
process_if	reference_generator.nl	/^def process_if(ref ret : @reference_generator::refs, module : @reference_generator::module, if_cmd : @nast::if_t) {$/;"	l
process_if_mod	reference_generator.nl	/^def process_if_mod(ref ret : @reference_generator::refs, module : @reference_generator::module, if_cmd : @nast::if_mod_t) {$/;"	l
process_list	wprinter.nl	/^def process_list(ref state : @wprinter::state_t, arr : @wprinter::pretty_arr_t, is_op_list : @boolean_t::type, pref : $/;"	l
process_match	reference_generator.nl	/^def process_match(ref ret : @reference_generator::refs, module : @reference_generator::module, match_cmd : @nast::match_t) {$/;"	l
process_module	reference_generator.nl	/^def process_module(ref ret : @reference_generator::refs, ast : @nast::module_t) {$/;"	l
process_ref_reg	generator_js.nl	/^def process_ref_reg(ref pre : ptd::string(), ref result : ptd::string(), ref after : ptd::string(), reg : @nlasm::reg_t, i : ptd::string(), call_counter) {$/;"	l
process_rep	reference_generator.nl	/^def process_rep(ref ret : @reference_generator::refs, module : @reference_generator::module, rep_cmd : @nast::rep_t) {$/;"	l
process_return	reference_generator.nl	/^def process_return(ref ret : @reference_generator::refs, module : @reference_generator::module, ret_cmd: @nast::value_t) {$/;"	l
process_try	reference_generator.nl	/^def process_try(ref ret : @reference_generator::refs, module : @reference_generator::module, try_cmd : @nast::try_ensure_t) {$/;"	l
process_type	reference_generator.nl	/^def process_type(ref ret : @reference_generator::refs, module : @reference_generator::module, type : @nast::variable_type_t) {$/;"	l
process_value	reference_generator.nl	/^def process_value(ref ret : @reference_generator::refs, module : @reference_generator::module, value : @nast::value_t) {$/;"	l
process_var_decl	reference_generator.nl	/^def process_var_decl(ref ret : @reference_generator::refs, module : @reference_generator::module, var_decl : @nast::variable_declaration_t) {$/;"	l
process_while	reference_generator.nl	/^def process_while(ref ret : @reference_generator::refs, module : @reference_generator::module, while_cmd : @nast::while_t) {$/;"	l
processed	generator_c_struct_dependence_sort.nl	/^	var processed = {};$/;"	v
prof_data	compiler_base/profile.nl	/^	var prof_data = c_std_lib::get_profile_global();$/;"	v
prof_data	compiler_base/profile.nl	/^	var prof_data = get_profile_global();$/;"	v
prof_path	compiler.nl	/^		var prof_path = opt_cli->cache_path . '\/profile';$/;"	v
profile	compiler_base/profile.nl	/^def profile::begin(lab) {$/;"	l
profile	compiler_base/profile.nl	/^def profile::end(lab) {$/;"	l
profile	compiler_base/profile.nl	/^def profile::save(filename) {$/;"	l
profile	compiler_base/profile.nl	/^def profile::sub(key, function : @func::func_t, args : ptd::arr(ptd::ptd_im())) {$/;"	l
profile	compiler_base/profile.nl	/^def profile::sub_ref(key, function : @func::func_t, ref args : ptd::arr(ptd::ptd_im())) {$/;"	l
profile::begin	compiler_base/profile.nl	/^def profile::begin(lab) {$/;"	g
profile::end	compiler_base/profile.nl	/^def profile::end(lab) {$/;"	g
profile::save	compiler_base/profile.nl	/^def profile::save(filename) {$/;"	g
profile::sub	compiler_base/profile.nl	/^def profile::sub(key, function : @func::func_t, args : ptd::arr(ptd::ptd_im())) {$/;"	g
profile::sub_ref	compiler_base/profile.nl	/^def profile::sub_ref(key, function : @func::func_t, ref args : ptd::arr(ptd::ptd_im())) {$/;"	g
profile_inter	profile_inter.nl	/^def profile_inter::begin(ref state : ptd::arr(@profile_inter::row_t), key : ptd::string()) {$/;"	l
profile_inter	profile_inter.nl	/^def profile_inter::end(ref state : ptd::arr(@profile_inter::row_t), key : ptd::string()) {$/;"	l
profile_inter	profile_inter.nl	/^def profile_inter::minus(a : ptd::arr(ptd::string()), b : ptd::arr(ptd::string())) : ptd::arr(ptd::string()) {$/;"	l
profile_inter	profile_inter.nl	/^def profile_inter::plus(a : ptd::arr(ptd::string()), b : ptd::arr(ptd::string())) : ptd::arr(ptd::string()) {$/;"	l
profile_inter	profile_inter.nl	/^def profile_inter::row_t() {$/;"	l
profile_inter	profile_inter.nl	/^def profile_inter::save_profile_js(data : ptd::arr(@profile_inter::row_t)) : ptd::string() {$/;"	l
profile_inter::begin	profile_inter.nl	/^def profile_inter::begin(ref state : ptd::arr(@profile_inter::row_t), key : ptd::string()) {$/;"	g
profile_inter::end	profile_inter.nl	/^def profile_inter::end(ref state : ptd::arr(@profile_inter::row_t), key : ptd::string()) {$/;"	g
profile_inter::minus	profile_inter.nl	/^def profile_inter::minus(a : ptd::arr(ptd::string()), b : ptd::arr(ptd::string())) : ptd::arr(ptd::string()) {$/;"	g
profile_inter::plus	profile_inter.nl	/^def profile_inter::plus(a : ptd::arr(ptd::string()), b : ptd::arr(ptd::string())) : ptd::arr(ptd::string()) {$/;"	g
profile_inter::row_t	profile_inter.nl	/^def profile_inter::row_t() {$/;"	g
profile_inter::save_profile_js	profile_inter.nl	/^def profile_inter::save_profile_js(data : ptd::arr(@profile_inter::row_t)) : ptd::string() {$/;"	g
ptd	ptd.nl	/^def ptd::arr(arr_type : @ptd::meta_type) : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::bool() : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::cast_error_t(){$/;"	l
ptd	ptd.nl	/^def ptd::cast_t(){$/;"	l
ptd	ptd.nl	/^def ptd::ensure(type, value) {$/;"	l
ptd	ptd.nl	/^def ptd::ensure_dyn(type, value, ref path) : ptd::var({ok => ptd::string(), err => ptd::rec({err => ptd::string(), path => ptd::ptd_im()})}) {$/;"	l
ptd	ptd.nl	/^def ptd::ensure_only_dynamic(type, value) {$/;"	l
ptd	ptd.nl	/^def ptd::ensure_only_static_do_not_touch_without_permission(type, value) {$/;"	l
ptd	ptd.nl	/^def ptd::get_imm_kind(imm) : @ptd::imm_kind_t {$/;"	l
ptd	ptd.nl	/^def ptd::hash(h : @ptd::meta_type) : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::imm_kind_t(){$/;"	l
ptd	ptd.nl	/^def ptd::int() : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::is_ref_type(ptd, type_name) {$/;"	l
ptd	ptd.nl	/^def ptd::meta_type() {$/;"	l
ptd	ptd.nl	/^def ptd::none() {$/;"	l
ptd	ptd.nl	/^def ptd::ptd_im() : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::ptd_reconstruct_nl_with_args(value, type, env, f, args) {$/;"	l
ptd	ptd.nl	/^def ptd::rec(h : ptd::hash(@ptd::meta_type)) : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::reconstruct_nl_with_args(value, type, env, f, args) {$/;"	l
ptd	ptd.nl	/^def ptd::string() : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::try_cast(type, value) : @ptd::cast_t {$/;"	l
ptd	ptd.nl	/^def ptd::try_dynamic_cast(type, value) : @ptd::cast_t {$/;"	l
ptd	ptd.nl	/^def ptd::try_ensure(type, value) {$/;"	l
ptd	ptd.nl	/^def ptd::var(h) : @ptd::meta_type {$/;"	l
ptd	ptd.nl	/^def ptd::void() {$/;"	l
ptd::arr	ptd.nl	/^def ptd::arr(arr_type : @ptd::meta_type) : @ptd::meta_type {$/;"	g
ptd::bool	ptd.nl	/^def ptd::bool() : @ptd::meta_type {$/;"	g
ptd::cast_error_t	ptd.nl	/^def ptd::cast_error_t(){$/;"	g
ptd::cast_t	ptd.nl	/^def ptd::cast_t(){$/;"	g
ptd::ensure	ptd.nl	/^def ptd::ensure(type, value) {$/;"	g
ptd::ensure_dyn	ptd.nl	/^def ptd::ensure_dyn(type, value, ref path) : ptd::var({ok => ptd::string(), err => ptd::rec({err => ptd::string(), path => ptd::ptd_im()})}) {$/;"	g
ptd::ensure_only_dynamic	ptd.nl	/^def ptd::ensure_only_dynamic(type, value) {$/;"	g
ptd::ensure_only_static_do_not_touch_without_permission	ptd.nl	/^def ptd::ensure_only_static_do_not_touch_without_permission(type, value) {$/;"	g
ptd::get_imm_kind	ptd.nl	/^def ptd::get_imm_kind(imm) : @ptd::imm_kind_t {$/;"	g
ptd::hash	ptd.nl	/^def ptd::hash(h : @ptd::meta_type) : @ptd::meta_type {$/;"	g
ptd::imm_kind_t	ptd.nl	/^def ptd::imm_kind_t(){$/;"	g
ptd::int	ptd.nl	/^def ptd::int() : @ptd::meta_type {$/;"	g
ptd::is_ref_type	ptd.nl	/^def ptd::is_ref_type(ptd, type_name) {$/;"	g
ptd::meta_type	ptd.nl	/^def ptd::meta_type() {$/;"	g
ptd::none	ptd.nl	/^def ptd::none() {$/;"	g
ptd::ptd_im	ptd.nl	/^def ptd::ptd_im() : @ptd::meta_type {$/;"	g
ptd::ptd_reconstruct_nl_with_args	ptd.nl	/^def ptd::ptd_reconstruct_nl_with_args(value, type, env, f, args) {$/;"	g
ptd::rec	ptd.nl	/^def ptd::rec(h : ptd::hash(@ptd::meta_type)) : @ptd::meta_type {$/;"	g
ptd::reconstruct_nl_with_args	ptd.nl	/^def ptd::reconstruct_nl_with_args(value, type, env, f, args) {$/;"	g
ptd::string	ptd.nl	/^def ptd::string() : @ptd::meta_type {$/;"	g
ptd::try_cast	ptd.nl	/^def ptd::try_cast(type, value) : @ptd::cast_t {$/;"	g
ptd::try_dynamic_cast	ptd.nl	/^def ptd::try_dynamic_cast(type, value) : @ptd::cast_t {$/;"	g
ptd::try_ensure	ptd.nl	/^def ptd::try_ensure(type, value) {$/;"	g
ptd::var	ptd.nl	/^def ptd::var(h) : @ptd::meta_type {$/;"	g
ptd::void	ptd.nl	/^def ptd::void() {$/;"	g
ptd_parser	ptd_parser.nl	/^def ptd_parser::fun_def_to_ptd(ast : @nast::cmd_t) : ptd::var({ok => @tct::meta_type, err => ptd::string()}) {$/;"	l
ptd_parser	ptd_parser.nl	/^def ptd_parser::try_value_to_ptd(ast_arg : @nast::value_t) : ptd::var({ok => @tct::meta_type, err => ptd::string()}) {$/;"	l
ptd_parser::fun_def_to_ptd	ptd_parser.nl	/^def ptd_parser::fun_def_to_ptd(ast : @nast::cmd_t) : ptd::var({ok => @tct::meta_type, err => ptd::string()}) {$/;"	g
ptd_parser::try_value_to_ptd	ptd_parser.nl	/^def ptd_parser::try_value_to_ptd(ast_arg : @nast::value_t) : ptd::var({ok => @tct::meta_type, err => ptd::string()}) {$/;"	g
ptd_system	ptd_system.nl	/^def ptd_system::can_create(from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::can_delete(from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::cast_type(to : @tct::meta_type, from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::check_assignment(to : @tct::meta_type, from : @tc_types::type, ref modules : @tc_types::modules_t, ref $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::cross_type(a : @tct::meta_type, b : @tct::meta_type, ref modules : @tc_types::modules_t, ref errors : $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::get_ref_type(type_name : ptd::string(), ref modules : @tc_types::modules_t, ref errors : $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::is_accepted(from : @tc_types::type, as_type : @tct::meta_type, ref modules : @tc_types::modules_t, ref $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::is_accepted_info(from : @tc_types::type, as_type : @tct::meta_type, ref modules : @tc_types::modules_t, $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::is_condition_type(from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::is_equal(a : @tct::meta_type, b : @tct::meta_type) : @boolean_t::type {$/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::is_known(value_src : @tc_types::value_src) : @boolean_t::type {$/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::is_try_ensure_type(type : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::rec_to_hash(a : @tct::meta_type, ref_inf : @tc_types::ref_t, ref modules : @tc_types::modules_t, ref $/;"	l
ptd_system	ptd_system.nl	/^def ptd_system::try_get_ensure_sub_types(type : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	l
ptd_system::can_create	ptd_system.nl	/^def ptd_system::can_create(from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) $/;"	g
ptd_system::can_delete	ptd_system.nl	/^def ptd_system::can_delete(from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t) $/;"	g
ptd_system::cast_type	ptd_system.nl	/^def ptd_system::cast_type(to : @tct::meta_type, from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	g
ptd_system::check_assignment	ptd_system.nl	/^def ptd_system::check_assignment(to : @tct::meta_type, from : @tc_types::type, ref modules : @tc_types::modules_t, ref $/;"	g
ptd_system::cross_type	ptd_system.nl	/^def ptd_system::cross_type(a : @tct::meta_type, b : @tct::meta_type, ref modules : @tc_types::modules_t, ref errors : $/;"	g
ptd_system::get_ref_type	ptd_system.nl	/^def ptd_system::get_ref_type(type_name : ptd::string(), ref modules : @tc_types::modules_t, ref errors : $/;"	g
ptd_system::is_accepted	ptd_system.nl	/^def ptd_system::is_accepted(from : @tc_types::type, as_type : @tct::meta_type, ref modules : @tc_types::modules_t, ref $/;"	g
ptd_system::is_accepted_info	ptd_system.nl	/^def ptd_system::is_accepted_info(from : @tc_types::type, as_type : @tct::meta_type, ref modules : @tc_types::modules_t, $/;"	g
ptd_system::is_condition_type	ptd_system.nl	/^def ptd_system::is_condition_type(from : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	g
ptd_system::is_equal	ptd_system.nl	/^def ptd_system::is_equal(a : @tct::meta_type, b : @tct::meta_type) : @boolean_t::type {$/;"	g
ptd_system::is_known	ptd_system.nl	/^def ptd_system::is_known(value_src : @tc_types::value_src) : @boolean_t::type {$/;"	g
ptd_system::is_try_ensure_type	ptd_system.nl	/^def ptd_system::is_try_ensure_type(type : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	g
ptd_system::rec_to_hash	ptd_system.nl	/^def ptd_system::rec_to_hash(a : @tct::meta_type, ref_inf : @tc_types::ref_t, ref modules : @tc_types::modules_t, ref $/;"	g
ptd_system::try_get_ensure_sub_types	ptd_system.nl	/^def ptd_system::try_get_ensure_sub_types(type : @tc_types::type, ref modules : @tc_types::modules_t, ref errors : $/;"	g
push_load_const	const_evaluator.nl	/^def push_load_const(ref cmds : ptd::arr(@nlasm::cmd_t), const : @post_processing_t::reg_val_const, dest : @nlasm::reg_t, $/;"	l
qou	compiler_base/csv.nl	/^			var qou = false;$/;"	v
quot	compiler_base/csv.nl	/^	var quot = '"';$/;"	v
quotquot	compiler_base/csv.nl	/^	var quotquot = quot . quot;$/;"	v
r	array.nl	/^	var r = [a, b];$/;"	v
r	compiler.nl	/^		var r = {};$/;"	v
r	generator_c.nl	/^				var r;$/;"	v
r	generator_c.nl	/^			var r = get_fun_lib('priv_as', [get_reg_value(ref state, ov_as->src), get_const_sim(ref state, ov_as->type)]);$/;"	v
r	generator_c.nl	/^			var r = get_fun_lib('priv_is', [get_reg(ref state, ov_is->src), get_const_sim(ref state, ov_is->type)]);$/;"	v
r	generator_c.nl	/^		var r = get_fun_lib('array_get', [get_reg_value(ref state, get->src), get_reg(ref state, get->idx)]);$/;"	v
r	generator_c.nl	/^		var r = get_fun_lib('array_mk', args);$/;"	v
r	generator_c.nl	/^		var r = get_fun_lib('hash_mk', args);$/;"	v
r	generator_c.nl	/^		var r = get_func_pointer(ref state, func->module, func->name);$/;"	v
r	generator_c.nl	/^		var r;$/;"	v
r	generator_c.nl	/^	var r;$/;"	v
r	pretty_printer.nl	/^	var r = '';$/;"	v
r	string_compiler.nl	/^			var r = {};	$/;"	v
r	string_compiler.nl	/^			var r = {};$/;"	v
r	string_compiler.nl	/^		var r = {};$/;"	v
r	type_checker.nl	/^	var r : @own_to_im_converter::res_t;$/;"	v
r	wprinter.nl	/^	var r = '';$/;"	v
read_reg	flow_graph.nl	/^def read_reg(ref block : @flow_graph::block_t, reg : @nlasm::reg_t, cmd_nr : ptd::string()) {$/;"	l
ready_value	translator.nl	/^	var ready_value : @nlasm::reg_t;$/;"	v
real_arg_1	translator.nl	/^	var real_arg_1 = arg_1;$/;"	v
real_arg_2	translator.nl	/^	var real_arg_2 = arg_2;$/;"	v
real_dest	translator.nl	/^	var real_dest = destination;$/;"	v
real_dest_different	translator.nl	/^	var real_dest_different = false;$/;"	v
real_index	translator.nl	/^	var real_index = get_cast(index, :int, ref state);$/;"	v
real_value	translator.nl	/^	var real_value = value;$/;"	v
rec_get_var_from_lval	type_checker.nl	/^def rec_get_var_from_lval(lval : @nast::value_t, ref errors : @tc_types::errors_t) : @tc_types::lval_path {$/;"	l
recalculate_annotation	register_cleaner.nl	/^def recalculate_annotation(annotation : @nlasm::annotation_t, map : ptd::hash(@nlasm::reg_t)) : @nlasm::annotation_t {$/;"	l
recalculate_labels_com	post_processing.nl	/^def recalculate_labels_com(ref commands : ptd::arr(@nlasm::cmd_t)) : ptd::void() {$/;"	l
recalculate_registers	register_cleaner.nl	/^def recalculate_registers(cmds : @nlasm::cmds_t, map : ptd::hash(@nlasm::reg_t)) : @nlasm::cmds_t {$/;"	l
recb	ptd_system.nl	/^			var recb = b as :tct_rec;$/;"	v
recb	ptd_system.nl	/^		var recb;$/;"	v
reconstruct	ptd.nl	/^def reconstruct(value, type, f, args : ptd::arr(ptd::ptd_im())) : ptd::var({$/;"	l
ref_inf	ptd_system.nl	/^	var ref_inf = {level => 1, from => {}, to => {}, check => false, cast => false};$/;"	v
ref_inf	ptd_system.nl	/^	var ref_inf = {level => 1, from => {}, to => {}, check => true, cast => false};$/;"	v
ref_inf	ptd_system.nl	/^	var ref_inf = {level => 1, from => {}, to => {}, check => true, cast => true};$/;"	v
ref_mark	generator_c.nl	/^				var ref_mark;$/;"	v
ref_name	own_to_im_converter.nl	/^		var ref_name = type as :tct_ref;$/;"	v
ref_name2	ptd.nl	/^		var ref_name2 = type_name as :ref;$/;"	v
ref_names	ptd_system.nl	/^			var ref_names = {};$/;"	v
ref_type	type_checker.nl	/^					var ref_type : @tct::meta_type = :tct_ref(module_name . '::' . func->name);$/;"	v
ref_var	translator.nl	/^	var ref_var = {};$/;"	v
ref_was	translator.nl	/^	var ref_was = {};$/;"	v
reference_generator	reference_generator.nl	/^def reference_generator::deref_type() {$/;"	l
reference_generator	reference_generator.nl	/^def reference_generator::fun_ref() {$/;"	l
reference_generator	reference_generator.nl	/^def reference_generator::generate(asts : ptd::hash(@nast::module_t)) : @reference_generator::refs {$/;"	l
reference_generator	reference_generator.nl	/^def reference_generator::module() {$/;"	l
reference_generator	reference_generator.nl	/^def reference_generator::ref_type() {$/;"	l
reference_generator	reference_generator.nl	/^def reference_generator::refs() {$/;"	l
reference_generator::deref_type	reference_generator.nl	/^def reference_generator::deref_type() {$/;"	g
reference_generator::fun_ref	reference_generator.nl	/^def reference_generator::fun_ref() {$/;"	g
reference_generator::generate	reference_generator.nl	/^def reference_generator::generate(asts : ptd::hash(@nast::module_t)) : @reference_generator::refs {$/;"	g
reference_generator::module	reference_generator.nl	/^def reference_generator::module() {$/;"	g
reference_generator::ref_type	reference_generator.nl	/^def reference_generator::ref_type() {$/;"	g
reference_generator::refs	reference_generator.nl	/^def reference_generator::refs() {$/;"	g
references	compiler.nl	/^		var references = reference_generator::generate(asts);$/;"	v
refs	ptd_system.nl	/^	var refs = {};$/;"	v
refs2	ptd_system.nl	/^	var refs2 = refs;$/;"	v
refs2	ptd_system.nl	/^	var refs2 = {};$/;"	v
reg	interpreter.nl	/^	var reg = [];$/;"	v
reg	translator.nl	/^	var reg = new_declaration(var_decl->name, ref state, reg_type, access_type);$/;"	v
reg	translator.nl	/^	var reg;$/;"	v
reg	unnecessary_commands.nl	/^				var reg = cmd->cmd as :clear;$/;"	v
reg_after_cast	translator.nl	/^	var reg_after_cast = new_register(ref state, expected_type);$/;"	v
reg_mem	generator_c.nl	/^	var reg_mem = 0;$/;"	v
reg_name	generator_js.nl	/^	var reg_name = 'call_' . call_counter . '_' . i;$/;"	v
reg_no	generator_c.nl	/^	var reg_no = reg->reg_no;$/;"	v
reg_size	unnecessary_commands.nl	/^	var reg_size = array::len(entrance_state);$/;"	v
reg_suffix	generator_c.nl	/^def reg_suffix(reg : @nlasm::reg_t) : ptd::string() {$/;"	l
reg_type	translator.nl	/^	var reg_type = value_type_to_reg_type(value, ref state);$/;"	v
reg_type	translator.nl	/^	var reg_type;$/;"	v
register	translator.nl	/^	var register = save_registers(ref state);$/;"	v
register	translator.nl	/^	var register = {type => type, reg_no => new_reg_no, access_type => :reference};$/;"	v
register	translator.nl	/^	var register = {type => type, reg_no => new_reg_no, access_type => :value};$/;"	v
register_cleaner	register_cleaner.nl	/^def register_cleaner::clean_registers(ref nlasms : ptd::hash(@nlasm::result_t)) {$/;"	l
register_cleaner::clean_registers	register_cleaner.nl	/^def register_cleaner::clean_registers(ref nlasms : ptd::hash(@nlasm::result_t)) {$/;"	g
registers	translator.nl	/^	var registers = [];$/;"	v
regs	const_evaluator.nl	/^	var regs : ptd::arr(ptd::ptd_im()) = [];$/;"	v
regs	const_evaluator.nl	/^	var regs = [];$/;"	v
regs	generator_js.nl	/^	var regs = [];$/;"	v
regs	post_processing.nl	/^	var regs = [];$/;"	v
regs	register_cleaner.nl	/^	var regs : ptd::hash(@boolean_t::type) = {};$/;"	v
regs	register_cleaner.nl	/^	var regs = find_unused_regs(func);$/;"	v
release_field	translator.nl	/^def release_field(current_owner : @nlasm::reg_t, field_name : ptd::string(), ref state : @translator::state_t) : ptd::void() {$/;"	l
release_hash_index	translator.nl	/^def release_hash_index(current_owner : @nlasm::reg_t, index : @nlasm::reg_t, ref state : @translator::state_t) : ptd::void() {$/;"	l
release_index	translator.nl	/^def release_index(current_owner : @nlasm::reg_t, index : @nlasm::reg_t, ref state : @translator::state_t) : ptd::void() {$/;"	l
release_variant	translator.nl	/^def release_variant(current_owner : @nlasm::reg_t, ref state : @translator::state_t) : ptd::void() {$/;"	l
remove_dups	generator_c_struct_dependence_sort.nl	/^def remove_dups(ref a : ptd::arr(ptd::string())) {$/;"	l
remove_unused_block	flow_graph.nl	/^def remove_unused_block(ref blocks : @flow_graph::state_t) : ptd::void() {$/;"	l
repeated	post_processing.nl	/^	var repeated = {};$/;"	v
required_functions	own_to_im_converter.nl	/^	var required_functions : ptd::hash(@tct::meta_type) = {};$/;"	v
res	const_evaluator.nl	/^	var res = interpreter::evaluate_const(state, func, module, regs, ins_nr);$/;"	v
res	nparser.nl	/^	var res : ptd::arr(@nast::fun_val_arg_t) = [];$/;"	v
res	nparser.nl	/^	var res : ptd::arr(@nast::value_t) = [];$/;"	v
res	own_to_im_converter.nl	/^	var res : ptd::string() = '';$/;"	v
res	ptd.nl	/^		var res = exec(f, arg);$/;"	v
res	unnecessary_commands.nl	/^	var res = [];$/;"	v
res_inits	module_checker.nl	/^	var res_inits = {};$/;"	v
restore_block	module_checker.nl	/^def restore_block(ref state : @module_checker::state_t, ref prev : @module_checker::save_t) : ptd::void() {$/;"	l
result	generator_c.nl	/^		var result = get_reg_value(ref state, is_end->iter) . ' == -1';$/;"	v
result	generator_c_struct_dependence_sort.nl	/^	var result = [];$/;"	v
result	generator_java.nl	/^	var result = '';$/;"	v
result	generator_java.nl	/^	var result = '((ImmMap)' . print_register_getter(set_val->src) . ')' . print_getter() . '.put(new ImmString("' . $/;"	v
result	generator_java.nl	/^	var result = 'new ImmArray(new Imm[';$/;"	v
result	generator_java.nl	/^	var result = 'new Imm[] {';$/;"	v
result	generator_java.nl	/^	var result = get_class_name(cmodule) . '.' . (cname) . '_nl(';$/;"	v
result	generator_java.nl	/^	var result = print_hash_name() . ' = new HashMap<ImmString, Imm>();' . string::lf();$/;"	v
result	generator_java.nl	/^	var result = print_register_as_number(bin_op->left);$/;"	v
result	generator_java.nl	/^	var result = string::lf() . get_function_declaration(function) . '(';$/;"	v
result	generator_java.nl	/^	var result;$/;"	v
result	generator_js.nl	/^	var result = '';$/;"	v
result	generator_js.nl	/^	var result = get_namespace_name() . '.' . module_name . '.' . fun_name . '(';$/;"	v
result	generator_js.nl	/^	var result = imm_call('arr') . '([';$/;"	v
result	generator_js.nl	/^	var result = imm_call('hash') . '({';$/;"	v
result	generator_js.nl	/^	var result = print_register_to_assign(bin_op->dest);$/;"	v
result	generator_js.nl	/^	var result = print_register_to_assign(dest) . get_function_call_name_raw(cname, cmodule) . '(';$/;"	v
result	generator_js.nl	/^	var result = print_register_to_assign(ov_mk->dest);$/;"	v
result	generator_js.nl	/^	var result = print_register_to_assign(una_op->dest);$/;"	v
result	generator_js.nl	/^	var result = string::lf();$/;"	v
result	generator_js.nl	/^	var result;$/;"	v
result	interpreter.nl	/^			var result = execute_bin_op(left, right, bin_op->op);$/;"	v
result	interpreter.nl	/^			var result = execute_una_op(arg, una_op->op);$/;"	v
result	interpreter.nl	/^	var result = [];$/;"	v
result	interpreter.nl	/^	var result = {};$/;"	v
result	own_to_im_converter.nl	/^	var result : @own_to_im_converter::res_t = {body => body, required_functions => required_functions};$/;"	v
result	translator.nl	/^	var result : @nlasm::result_t = {module_name => ast->name, functions => [], imports => []};$/;"	v
result	translator.nl	/^	var result = '';$/;"	v
ret	anon_naming.nl	/^		var ret = '0RB';$/;"	v
ret	anon_naming.nl	/^		var ret = '0VB';$/;"	v
ret	array.nl	/^	var ret = '';$/;"	v
ret	array.nl	/^	var ret = [];$/;"	v
ret	array.nl	/^	var ret = [el];$/;"	v
ret	array.nl	/^	var ret = arr1;$/;"	v
ret	array.nl	/^	var ret = array::subarray(arr, 0, idx);$/;"	v
ret	compiler.nl	/^			var ret = generator_java::generate(nlasm);$/;"	v
ret	compiler.nl	/^			var ret = generator_js::generate(nlasm, params->namespace);$/;"	v
ret	compiler.nl	/^			var ret = generator_pm::generate(nlasm);$/;"	v
ret	compiler.nl	/^		var ret = generator_c::generate(modules, ref generator_state);$/;"	v
ret	compiler.nl	/^		var ret = module_checker::check_module(ast, false, ref r);$/;"	v
ret	compiler.nl	/^	var ret : @compiler::input_type = {$/;"	v
ret	compiler.nl	/^	var ret : ptd::int() = 0;$/;"	v
ret	compiler.nl	/^	var ret = '';$/;"	v
ret	compiler.nl	/^	var ret = [];$/;"	v
ret	compiler.nl	/^	var ret = type_checker::check_modules(ref asts, asts);$/;"	v
ret	compiler.nl	/^	var ret = {};$/;"	v
ret	compiler_base/csv.nl	/^	var ret = '';$/;"	v
ret	compiler_base/csv.nl	/^	var ret = [];$/;"	v
ret	compiler_base/profile.nl	/^	var ret = func::exec_ref(function, ref args);$/;"	v
ret	dfile.nl	/^		var ret = '';$/;"	v
ret	dfile.nl	/^	var ret = '';$/;"	v
ret	dfile.nl	/^	var ret = {str => '', objects => {}};$/;"	v
ret	flow_graph.nl	/^	var ret = [];$/;"	v
ret	func.nl	/^	var ret = func::exec_ref(func, ref args);$/;"	v
ret	generator_c.nl	/^			var ret = command as :return;$/;"	v
ret	generator_c.nl	/^		var ret =  get_reg(ref state, use_hash_index->new_owner) . ' = ' .$/;"	v
ret	generator_c.nl	/^		var ret =  get_reg(ref state, use_index->new_owner) . ' = ' .$/;"	v
ret	generator_c.nl	/^		var ret = 'struct ' . name . ' {$/;"	v
ret	generator_c.nl	/^		var ret = 'struct ' . name . ' {' . string::lf();$/;"	v
ret	generator_c.nl	/^	var ret =  get_reg(ref state, use_field->new_owner) . ' = &(' . get_reg(ref state, use_field->old_owner);$/;"	v
ret	generator_c.nl	/^	var ret = '';$/;"	v
ret	generator_c.nl	/^	var ret = 'if (' . get_reg(ref state, use_variant->old_owner) . access_op . 'label != ' . use_variant->label_no . ') nl_die();' . string::lf();$/;"	v
ret	generator_c.nl	/^	var ret = get_fun_name(call->mod, call->fun_name, state->mod_name) . '(';$/;"	v
ret	generator_c.nl	/^	var ret = get_hash_next_iter_fun_header(hash_type_name, mod_name) . '{$/;"	v
ret	generator_c.nl	/^	var ret = get_lib_fun(fun_name) . '(';$/;"	v
ret	generator_c.nl	/^	var ret = get_variant_make_fun_header(variant_type_name, mod_name) . ' {$/;"	v
ret	generator_c.nl	/^	var ret = state->ret;$/;"	v
ret	generator_c.nl	/^	var ret = {};$/;"	v
ret	generator_c.nl	/^	var ret;$/;"	v
ret	generator_java.nl	/^			var ret = command as :return;$/;"	v
ret	generator_java.nl	/^		var ret = print_function(sin_fun, module_name);$/;"	v
ret	generator_js.nl	/^			var ret = command as :return;$/;"	v
ret	generator_js.nl	/^	var ret = '';$/;"	v
ret	generator_pm.nl	/^			var ret = command as :return;$/;"	v
ret	hash.nl	/^	var ret = [];$/;"	v
ret	interpreter.nl	/^	var ret = {};$/;"	v
ret	module_checker.nl	/^	var ret = [];$/;"	v
ret	nast.nl	/^	var ret : @nast::op_struct_t = {};$/;"	v
ret	nparser.nl	/^		var ret = {arr => []};$/;"	v
ret	nparser.nl	/^	var ret : @nast::fun_def_t = {$/;"	v
ret	nparser.nl	/^	var ret : @nast::fun_label_t = {name => '', module => ''};$/;"	v
ret	nparser.nl	/^	var ret : @nast::hash_decl_t = [];$/;"	v
ret	nparser.nl	/^	var ret : @nast::variable_declaration_t = {name => '', type => :none, tct_type => :none, value => :none};$/;"	v
ret	nparser.nl	/^	var ret : @nast::variant_decl_t = {name => parse_variant_label(ref state), value => :none};$/;"	v
ret	nparser.nl	/^	var ret : ptd::arr(@nast::cmd_t) = [];$/;"	v
ret	nparser.nl	/^	var ret : ptd::arr(@nast::fun_def_arg_t) = [];$/;"	v
ret	nparser.nl	/^	var ret : ptd::arr(@nast::value_t) = [];$/;"	v
ret	nparser.nl	/^	var ret = :hash_key(ntokenizer::is_text(ref state->state) ?$/;"	v
ret	nparser.nl	/^	var ret = parse_module(ref state, module_name);$/;"	v
ret	nparser.nl	/^	var ret = {name => '', type => :none, tct_type => :none, value => :none};$/;"	v
ret	nparser.nl	/^	var ret;$/;"	v
ret	ntokenizer.nl	/^	var ret = [[], [], []];$/;"	v
ret	ntokenizer.nl	/^	var ret = state->next_token;$/;"	v
ret	ntokenizer.nl	/^	var ret = {};$/;"	v
ret	post_processing.nl	/^	var ret = [];$/;"	v
ret	post_processing.nl	/^	var ret = {};$/;"	v
ret	pretty_printer.nl	/^		var ret : @wprinter::pretty_arr_t = [wprinter::build_sim(fun_name)];$/;"	v
ret	pretty_printer.nl	/^	var ret : @wprinter::pretty_arr_t = [$/;"	v
ret	pretty_printer.nl	/^	var ret : @wprinter::pretty_arr_t = [];$/;"	v
ret	pretty_printer.nl	/^	var ret : @wprinter::pretty_arr_t = [wprinter::build_sim(':' . variant->name)];$/;"	v
ret	pretty_printer.nl	/^	var ret = 0;$/;"	v
ret	ptd.nl	/^		var ret = [];$/;"	v
ret	ptd.nl	/^		var ret = ptd::ensure_dyn(exec(type, []), value, ref path);$/;"	v
ret	ptd.nl	/^		var ret = {};$/;"	v
ret	ptd_system.nl	/^				var ret = {};$/;"	v
ret	ptd_system.nl	/^			var ret = b as :tct_var;$/;"	v
ret	ptd_system.nl	/^			var ret = {};$/;"	v
ret	ptd_system.nl	/^		var ret = inner_type;$/;"	v
ret	ptd_system.nl	/^	var ret = ptd_system::is_accepted_info(from, as_type, ref modules, ref errors);$/;"	v
ret	ptd_system.nl	/^	var ret = tct::empty();$/;"	v
ret	reference_generator.nl	/^	var ret = [];$/;"	v
ret	register_cleaner.nl	/^	var ret : ptd::hash(@nlasm::result_t) = {};$/;"	v
ret	string.nl	/^		var ret = array::subarray(arr, 0, limit - 1);$/;"	v
ret	string.nl	/^	var ret = '';$/;"	v
ret	string.nl	/^	var ret = [];$/;"	v
ret	string_compiler.nl	/^			var ret = module_checker::check_module(ast, false, ref r);$/;"	v
ret	string_compiler.nl	/^	var ret = {};$/;"	v
ret	string_utils.nl	/^	var ret = '';$/;"	v
ret	string_utils.nl	/^	var ret = 0;$/;"	v
ret	string_utils.nl	/^	var ret;$/;"	v
ret	tc_types.nl	/^	var ret : ptd::hash(@tc_types::bin_op_type) = {};$/;"	v
ret	translator.nl	/^		var ret = 0;$/;"	v
ret	translator.nl	/^	var ret = :emp;$/;"	v
ret	translator.nl	/^	var ret = [];$/;"	v
ret	translator.nl	/^	var ret = get_struct_of_lvalue(ref left, state);$/;"	v
ret	type_checker.nl	/^		var ret = ' ';$/;"	v
ret	type_checker.nl	/^		var ret = 'own::rec(';$/;"	v
ret	type_checker.nl	/^		var ret = 'own::var(';$/;"	v
ret	type_checker.nl	/^		var ret = 'ptd::rec(';$/;"	v
ret	type_checker.nl	/^		var ret = 'ptd::var(';$/;"	v
ret	type_checker.nl	/^	var ret : @tc_types::def_fun_t = {$/;"	v
ret	type_checker.nl	/^	var ret : ptd::hash(@tc_types::var_t) = {};$/;"	v
ret	type_checker.nl	/^	var ret = '';$/;"	v
ret	type_checker.nl	/^	var ret = tc_types::get_default_type();$/;"	v
ret	wprinter.nl	/^	var ret : ptd::string() = 0;$/;"	v
ret2	nparser.nl	/^		var ret2 = {val => tmp, branch_list => []};$/;"	v
ret_arr	array.nl	/^	var ret_arr = variable;$/;"	v
ret_map	flow_graph.nl	/^	var ret_map = {};$/;"	v
ret_pref	wprinter.nl	/^	var ret_pref = pref;$/;"	v
ret_tab	flow_graph.nl	/^	var ret_tab = [];$/;"	v
ret_type	own_to_im_converter.nl	/^	var ret_type : ptd::string() = get_type_constructor(type, true, known_types);$/;"	v
ret_type	type_checker.nl	/^		var ret_type = check_val(as_return, ref modules, ref vars, ref errors, known_types);$/;"	v
ret_type	type_checker.nl	/^	var ret_type = {type => tct::tct_im(), src => left_type2->src};$/;"	v
ret_types	ptd_system.nl	/^	var ret_types = {ok => tct::tct_im(), err => tct::tct_im()};$/;"	v
ret_types	type_checker.nl	/^	var ret_types : ptd::rec({ok => @tc_types::var_t, err => @tc_types::type}) = {$/;"	v
ret_val	interpreter.nl	/^	var ret_val = '';$/;"	v
ret_variants	type_checker.nl	/^		var ret_variants = {};$/;"	v
reta	ptd_system.nl	/^				var reta = ptd_system::rec_to_hash(a, ref_inf, ref modules, ref errors, known_types);$/;"	v
retb	ptd_system.nl	/^				var retb = ptd_system::rec_to_hash(b, ref_inf, ref modules, ref errors, known_types);$/;"	v
retpar	compiler.nl	/^	var retpar = nparser::sparse(file, module);$/;"	v
retpar	string_compiler.nl	/^	var retpar = nparser::sparse(program, module_name);$/;"	v
retur	type_checker.nl	/^		var retur = {};$/;"	v
return_reg	translator.nl	/^		var return_reg = new_register(ref state, var_type_to_reg_type(state->result->ret_type, state->logic->defined_types));$/;"	v
return_reg_type	translator.nl	/^		var return_reg_type = var_type_to_reg_type(type, state->logic->defined_types);$/;"	v
return_type_to_tct	type_checker.nl	/^def return_type_to_tct(type : @nast::variable_type_t, ref errors : @tc_types::errors_t) : @tct::meta_type {$/;"	l
return_value	translator.nl	/^	var return_value : @nlasm::reg_t = {type => :im, reg_no => -1, access_type => :value};$/;"	v
retval	interpreter.nl	/^	var retval = interpreter::get_none_variant();$/;"	v
rhs	generator_c.nl	/^			var rhs = get_reg(ref state, el->val);$/;"	v
right	array.nl	/^	var right = mid + 1;$/;"	v
right	generator_c.nl	/^			var right = '*('.  get_reg(ref state, ov_as->src) . access_op . 'value.' . get_case_name(ov_as->type) . ')';$/;"	v
right	generator_js.nl	/^		var right = print_int_call_sim('c_rt_lib', 'imm_to_float', [bin_op->right]);$/;"	v
right	interpreter.nl	/^		var right = state->top->vars[bin_op->right->reg_no];$/;"	v
right	translator.nl	/^			var right = dest_val(bin_op->right, ref state);$/;"	v
right	translator.nl	/^		var right = calc_val(bin_op->right, ref state);$/;"	v
right_type	type_checker.nl	/^	var right_type : @tc_types::type = check_val(bin_op->right, ref modules, ref vars, ref errors, known_types);$/;"	v
right_val	translator.nl	/^				var right_val = bin_op->right->value as :hash_key;$/;"	v
right_val	translator.nl	/^		var right_val = bin_op->right->value as :hash_key;$/;"	v
right_val	type_checker.nl	/^			var right_val = bin_op->right->value as :hash_key;$/;"	v
rim	translator.nl	/^			var rim = new_declaration(fun_arg->name, ref state, var_type_to_reg_type(fun_arg->tct_type as :type, state->logic->defined_types), :value);$/;"	v
row	compiler_base/csv.nl	/^	var row = [];$/;"	v
rref	translator.nl	/^			var rref = new_declaration(fun_arg->name, ref state, var_type_to_reg_type(fun_arg->tct_type as :type, state->logic->defined_types), :value);$/;"	v
rt	type_checker.nl	/^		var rt = check_val(ternary_op->snd, ref modules, ref vars, ref errors, known_types)->type;$/;"	v
rt	type_checker.nl	/^		var rt = types[0]->type;$/;"	v
rt	type_checker.nl	/^		var rt = {};$/;"	v
rt2	type_checker.nl	/^			var rt2 = check_val(ternary_op->thrd, ref modules, ref vars, ref errors, known_types)->type;$/;"	v
s	interpreter.nl	/^				vars => [],$/;"	v
s	interpreter.nl	/^			vars => new_vars,$/;"	v
s	interpreter.nl	/^			vars => ptd::arr(ptd::ptd_im()),$/;"	v
s	interpreter.nl	/^			vars => regs,$/;"	v
s	module_checker.nl	/^			vars => ptd::hash(@module_checker::var_t),$/;"	v
s	module_checker.nl	/^			vars => {},$/;"	v
s	type_checker.nl	/^				vars{decl->name} = {overwrited => :no, type => type, referenced_by => :none};$/;"	v
s	type_checker.nl	/^			vars, ref errors, known_types);$/;"	v
s	type_checker.nl	/^		vars = vars_op;$/;"	v
s	type_checker.nl	/^		vars{as_forh->hash->value as :var}->referenced_by = :none;$/;"	v
s	type_checker.nl	/^		vars{as_forh->hash->value as :var}->referenced_by = :variable(as_forh->val->name);$/;"	v
s	type_checker.nl	/^		vars{bin_op->left->value as :var}->type = op_def2->arg1;$/;"	v
s	type_checker.nl	/^		vars{bin_op->right->value as :var}->type = op_def2->arg2;$/;"	v
s	type_checker.nl	/^	vars = vars_op;$/;"	v
s_case	type_checker.nl	/^				vars_case{as_match->val->value as :var}->referenced_by = :variable(var_decl->declaration->name);$/;"	v
s_case	type_checker.nl	/^			vars_case{as_match->val->value as :var}->referenced_by = :none;$/;"	v
s_op	type_checker.nl	/^			vars_op = vars_case;$/;"	v
save_block	module_checker.nl	/^def save_block(ref state : @module_checker::state_t) : @module_checker::save_t {$/;"	l
save_loop_break	translator.nl	/^def save_loop_break(ref state : @translator::state_t, b : ptd::string(), c : ptd::string()) : @translator::loop_label {$/;"	l
save_module_to_file	compiler.nl	/^def save_module_to_file(ast : @nast::module_t, mod_dst : @compiler::destination_t) : @compiler::file_t {$/;"	l
save_registers	translator.nl	/^def save_registers(ref state : @translator::state_t) : @translator::function_logic_t {$/;"	l
sec	compiler_base/profile.nl	/^	var sec = a[0] - b[0];$/;"	v
sec	profile_inter.nl	/^	var sec = a[0] - b[0];$/;"	v
selem	interpreter.nl	/^		var selem = state->stack[array::len(state->stack) - 1];$/;"	v
sep	compiler_base/csv.nl	/^	var sep = string::tab();$/;"	v
serialize_deref	compiler.nl	/^def serialize_deref(deref : @tc_types::deref_types, references : @reference_generator::refs) : ptd::string() {	$/;"	l
set_c	post_processing.nl	/^		var set_c = [];$/;"	v
set_const_block	post_processing.nl	/^def set_const_block(number : ptd::string(), ref blocks : @flow_graph::blocks_t, math_fs : @post_processing_t::math_funs_t, $/;"	l
set_const_block_val	const_evaluator.nl	/^def set_const_block_val(number : ptd::string(), blocks : @flow_graph::blocks_t, ref new_blocks : @flow_graph::blocks_t, $/;"	l
set_const_commands_in_modules	post_processing.nl	/^def set_const_commands_in_modules(ref state : @post_processing_t::state_t, changed_functions : ptd::hash(ptd::string()), ref $/;"	l
set_const_reg	post_processing.nl	/^def set_const_reg(ref blocks : @flow_graph::blocks_t, math_fs : @post_processing_t::math_funs_t, mod_name : ptd::string(), $/;"	l
set_end_function	type_checker.nl	/^def set_end_function(ref vars : @tc_types::vars_t) : ptd::void() {$/;"	l
set_function_calls	post_processing.nl	/^def set_function_calls(ref arch : @post_processing_t::fun_tree_t, nlasms : ptd::hash(@nlasm::result_t)) {$/;"	l
set_interpreted_changed_functions	post_processing.nl	/^def set_interpreted_changed_functions(state : @post_processing_t::state_t, math_fs : @post_processing_t::math_funs_t, ref $/;"	l
set_len	post_processing.nl	/^		var set_len = array::len(set_c);$/;"	v
set_mathfun_in_modules	post_processing.nl	/^def set_mathfun_in_modules(ref state : @post_processing_t::state_t, math_fs : @post_processing_t::math_funs_t, ref $/;"	l
set_non_math_fun_rec	post_processing.nl	/^def set_non_math_fun_rec(ref math_fs : @post_processing_t::math_funs_t, key : ptd::string(), called_in : ptd::hash(ptd::hash($/;"	l
set_prev_block	flow_graph.nl	/^def set_prev_block(ref map : ptd::hash(@flow_graph::block_t), name : ptd::string()) : ptd::void() {$/;"	l
set_type_to_lval	type_checker.nl	/^def set_type_to_lval(lval : @nast::value_t, ltype : @tc_types::type, rtype : @tc_types::type, ref modules : $/;"	l
set_type_to_lval_spec	type_checker.nl	/^def set_type_to_lval_spec(lval : @nast::value_t, ltype : @tc_types::type, rtype : @tc_types::type, empty_type : $/;"	l
set_type_to_variable	type_checker.nl	/^def set_type_to_variable(ref vars : @tc_types::vars_t, var_name : ptd::string(), type : @tct::meta_type) : ptd::void() {$/;"	l
set_used_function	module_checker.nl	/^def set_used_function(fun_key : ptd::string(), func, ref func_used : ptd::hash(ptd::string())) {$/;"	l
set_value_of_lvalue	translator.nl	/^def set_value_of_lvalue(lvalue_values : @translator::lvalue_values_t, get_value : @boolean_t::type, ref state :$/;"	l
show_and_count_errors	compiler.nl	/^def show_and_count_errors(all_errors : @compiler::errors_group_t, opt_cli : @compiler::input_type, nianio_files) : ptd::int() {$/;"	l
sim	generator_c.nl	/^	var sim = state->const->sim->arr;$/;"	v
sim	generator_c.nl	/^	var sim = state->global_const->arr;$/;"	v
sim	string_utils.nl	/^	var sim : ptd::string() = string . '';$/;"	v
sim_len	generator_c.nl	/^	var sim_len = array::len(sim);$/;"	v
sin_fun	generator_java.nl	/^		var sin_fun = function;$/;"	v
sin_fun	generator_js.nl	/^		var sin_fun = function;$/;"	v
sin_fun	generator_pm.nl	/^			var sin_fun = function;$/;"	v
sin_name	generator_java.nl	/^		var sin_name = get_function_name(sin_fun);$/;"	v
sing_len	generator_c.nl	/^	var sing_len = array::len(singleton);$/;"	v
singleton	generator_c.nl	/^	var singleton = state->const->singleton->arr;$/;"	v
singleton	singleton.nl	/^def singleton::sigleton_do_not_use_without_approval(data) {$/;"	l
singleton::sigleton_do_not_use_without_approval	singleton.nl	/^def singleton::sigleton_do_not_use_without_approval(data) {$/;"	g
size	compiler_base/csv.nl	/^		var size = array::len(row);$/;"	v
size	generator_c.nl	/^				var size;$/;"	v
sizeof	generator_c.nl	/^	var sizeof = 'sizeof(' . get_type_name(array_type) . ')';$/;"	v
sizeof	generator_c.nl	/^	var sizeof = 'sizeof(' . type . ')';$/;"	v
sort_graph	generator_c_struct_dependence_sort.nl	/^def sort_graph(graph : @generator_c_struct_dependence_sort::graph)$/;"	l
sort_graph_help	generator_c_struct_dependence_sort.nl	/^def sort_graph_help(graph : @generator_c_struct_dependence_sort::graph,$/;"	l
sp	dfile.nl	/^def sp(ref state : @dfile::state_out, str) : ptd::void() {$/;"	l
special_fun_def	type_checker.nl	/^		var special_fun_def = get_special_functions(){fun_name};$/;"	v
split_res	string_utils.nl	/^	var split_res = string::split('', str);$/;"	v
split_res	string_utils.nl	/^	var split_res = string::split('', string);$/;"	v
split_result	string_utils.nl	/^	var split_result = string::split(char, string);$/;"	v
split_type	generator_c_struct_dependence_sort.nl	/^def split_type(a : @generator_c_struct_dependence_sort::decl_def_type , b : @generator_c_struct_dependence_sort::decl_def_type)$/;"	l
sprint	dfile.nl	/^def sprint(ref state : @dfile::state_out, obj : ptd::ptd_im(), indent : ptd::int(), is_debug : @boolean_t::type) :$/;"	l
sprint_hash	dfile.nl	/^def sprint_hash(ref state : @dfile::state_out, obj : ptd::ptd_im(), indent : ptd::int(), is_debug : @boolean_t::type) :$/;"	l
sprint_hash_key	dfile.nl	/^def sprint_hash_key(ref state : @dfile::state_out, str) : ptd::void() {$/;"	l
sprintstr	dfile.nl	/^def sprintstr(ref state : @dfile::state_out, str) : ptd::void() {$/;"	l
src	compiler.nl	/^	var src = file->file;$/;"	v
src	translator.nl	/^		var src = dest_val({debug => unary_op->val->debug, value => :const(1), type => :tct_int}, ref state);$/;"	v
src	translator.nl	/^		var src = fun_val->args[i]->val;$/;"	v
stack	module_checker.nl	/^			var stack : @module_checker::stack_t = [];$/;"	v
stack	profile_inter.nl	/^	var stack = [];$/;"	v
stack_hash	module_checker.nl	/^			var stack_hash : @module_checker::stack_hash_t = {};$/;"	v
stack_size	interpreter.nl	/^	var stack_size = array::len(state->stack);$/;"	v
start	compiler_base/profile.nl	/^def start(label) {$/;"	l
start	pretty_printer.nl	/^		var start;$/;"	v
start_new_instruction	translator.nl	/^def start_new_instruction(debug : @nast::debug_t, ref state : @translator::state_t) : ptd::void() {$/;"	l
state	const_evaluator.nl	/^	var state = [];$/;"	v
state	dfile.nl	/^	var state = {str => '', objects => {}};$/;"	v
state	dfile.nl	/^	var state = {str => [str], pos => 0, len => string::length(str)};$/;"	v
state	generator_pm.nl	/^	var state : @generator_pm::state_t = {perl_file => '', module_name => nlasm->module_name, fun_args => []};$/;"	v
state	module_checker.nl	/^	var state : @module_checker::state_t = {$/;"	v
state	nparser.nl	/^	var state = {errors => [], state => ntokenizer::init(s), module_name => module_name};$/;"	v
state	ntokenizer.nl	/^	var state = {$/;"	v
state	post_processing.nl	/^	var state = [];$/;"	v
state	post_processing.nl	/^	var state = {nl_asm => {}, fun_calls => {}, math_fs => {}};$/;"	v
state	pretty_printer.nl	/^		var state = {out => ''};$/;"	v
state	pretty_printer.nl	/^	var state = {out => ''};$/;"	v
state	string_compiler.nl	/^	var state = post_processing::init({}, :o0);$/;"	v
state	translator.nl	/^		var state : @translator::state_t = {$/;"	v
state	unnecessary_commands.nl	/^	var state : @unnecessary_commands::state_t = [];$/;"	v
state	unnecessary_commands.nl	/^	var state = build_blocks_states(blocks, reg_size);$/;"	v
state_print	pretty_printer.nl	/^def state_print(ref state : @wprinter::state_t, str : ptd::string()) : ptd::void() {$/;"	l
state_print	wprinter.nl	/^def state_print(ref state : @wprinter::state_t, str : ptd::string()) : ptd::void() {$/;"	l
step	interpreter.nl	/^def step(ref state : @interpreter::state_t) : ptd::void() {$/;"	l
steps_done	interpreter.nl	/^	var steps_done = 1;$/;"	v
stop	compiler_base/profile.nl	/^def stop(label) {$/;"	l
str	compiler_base/csv.nl	/^			var str = row[elem];$/;"	v
str	compiler_base/profile.nl	/^		var str = '           ' . diff_time(time, el);$/;"	v
str	dfile.nl	/^	var str = ptd::ensure(ptd::string(), str_im);$/;"	v
str	generator_c.nl	/^		var str = obj . '';$/;"	v
str	profile_inter.nl	/^		var str = '           ' . diff_time(time, el);$/;"	v
str	string_utils.nl	/^	var str = '000000000000000000000000' . int;$/;"	v
str	string_utils.nl	/^	var str = string::split('', ret);$/;"	v
str	string_utils.nl	/^	var str = string_utils::int2str_leading_digits(float, prec + 1);$/;"	v
str_arr	wprinter.nl	/^	var str_arr = elem->arr;$/;"	v
str_end_index	string_utils.nl	/^	var str_end_index = array::len(chars) - 1;$/;"	v
str_end_index	string_utils.nl	/^	var str_end_index = string::length(str) - 1;$/;"	v
str_start_index	string_utils.nl	/^	var str_start_index = 0;$/;"	v
string	string.nl	/^def string::char_times(char, time) : ptd::string() {$/;"	l
string	string.nl	/^def string::chr(character) {$/;"	l
string	string.nl	/^def string::compare(string_1, string_2) {$/;"	l
string	string.nl	/^def string::contain_lc(string, search) {$/;"	l
string	string.nl	/^def string::decode_utf16(str, le_en) {$/;"	l
string	string.nl	/^def string::encode_utf16(str) {$/;"	l
string	string.nl	/^def string::f() {$/;"	l
string	string.nl	/^def string::ge(string_1, string_2) {$/;"	l
string	string.nl	/^def string::get_char_code(string, position) {$/;"	l
string	string.nl	/^def string::gt(left, right) {$/;"	l
string	string.nl	/^def string::index(string, search, position) {$/;"	l
string	string.nl	/^def string::index2(string, search) {$/;"	l
string	string.nl	/^def string::is_digit(char) : @boolean_t::type {$/;"	l
string	string.nl	/^def string::is_empty(string) {$/;"	l
string	string.nl	/^def string::is_letter(char) : @boolean_t::type {$/;"	l
string	string.nl	/^def string::lc(string) {$/;"	l
string	string.nl	/^def string::le(string_1, string_2) {$/;"	l
string	string.nl	/^def string::length(s) {$/;"	l
string	string.nl	/^def string::lf() {$/;"	l
string	string.nl	/^def string::lt(left, right) {$/;"	l
string	string.nl	/^def string::non_breaking_space() {$/;"	l
string	string.nl	/^def string::ord(char) {$/;"	l
string	string.nl	/^def string::r() : ptd::string() {$/;"	l
string	string.nl	/^def string::replace(string, old, new) {$/;"	l
string	string.nl	/^def string::replace_arr(string, search_arr, replace_arr) {$/;"	l
string	string.nl	/^def string::split(pattern, string) {$/;"	l
string	string.nl	/^def string::split_limit(pattern, string, limit) {$/;"	l
string	string.nl	/^def string::substr(s, offset, length) : ptd::string() {$/;"	l
string	string.nl	/^def string::substr2(s, offset) : ptd::string() {$/;"	l
string	string.nl	/^def string::tab() : ptd::string() {$/;"	l
string	string.nl	/^def string::to_array(string) {$/;"	l
string	string.nl	/^def string::uc(string) {$/;"	l
string	string_utils.nl	/^	var string = obj . '';$/;"	v
string::char_times	string.nl	/^def string::char_times(char, time) : ptd::string() {$/;"	g
string::chr	string.nl	/^def string::chr(character) {$/;"	g
string::compare	string.nl	/^def string::compare(string_1, string_2) {$/;"	g
string::contain_lc	string.nl	/^def string::contain_lc(string, search) {$/;"	g
string::decode_utf16	string.nl	/^def string::decode_utf16(str, le_en) {$/;"	g
string::encode_utf16	string.nl	/^def string::encode_utf16(str) {$/;"	g
string::f	string.nl	/^def string::f() {$/;"	g
string::ge	string.nl	/^def string::ge(string_1, string_2) {$/;"	g
string::get_char_code	string.nl	/^def string::get_char_code(string, position) {$/;"	g
string::gt	string.nl	/^def string::gt(left, right) {$/;"	g
string::index	string.nl	/^def string::index(string, search, position) {$/;"	g
string::index2	string.nl	/^def string::index2(string, search) {$/;"	g
string::is_digit	string.nl	/^def string::is_digit(char) : @boolean_t::type {$/;"	g
string::is_empty	string.nl	/^def string::is_empty(string) {$/;"	g
string::is_letter	string.nl	/^def string::is_letter(char) : @boolean_t::type {$/;"	g
string::lc	string.nl	/^def string::lc(string) {$/;"	g
string::le	string.nl	/^def string::le(string_1, string_2) {$/;"	g
string::length	string.nl	/^def string::length(s) {$/;"	g
string::lf	string.nl	/^def string::lf() {$/;"	g
string::lt	string.nl	/^def string::lt(left, right) {$/;"	g
string::non_breaking_space	string.nl	/^def string::non_breaking_space() {$/;"	g
string::ord	string.nl	/^def string::ord(char) {$/;"	g
string::r	string.nl	/^def string::r() : ptd::string() {$/;"	g
string::replace	string.nl	/^def string::replace(string, old, new) {$/;"	g
string::replace_arr	string.nl	/^def string::replace_arr(string, search_arr, replace_arr) {$/;"	g
string::split	string.nl	/^def string::split(pattern, string) {$/;"	g
string::split_limit	string.nl	/^def string::split_limit(pattern, string, limit) {$/;"	g
string::substr	string.nl	/^def string::substr(s, offset, length) : ptd::string() {$/;"	g
string::substr2	string.nl	/^def string::substr2(s, offset) : ptd::string() {$/;"	g
string::tab	string.nl	/^def string::tab() : ptd::string() {$/;"	g
string::to_array	string.nl	/^def string::to_array(string) {$/;"	g
string::uc	string.nl	/^def string::uc(string) {$/;"	g
string_compiler	string_compiler.nl	/^def string_compiler::check_type(type_check : @string_compiler::type_check_t, asts : ptd::hash(@nast::module_t)) : ptd::var({$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::compile(program : ptd::string(), module_name : ptd::string()) : ptd::var({$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::compile_to_js(modules : ptd::hash(ptd::string()), namespace : ptd::string()) : ptd::var({$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::compile_to_nlasm(modules : ptd::hash(ptd::string())) : ptd::var({$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::error_t() {$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::modules_t() {$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::parse_module(modules : @string_compiler::modules_t) : ptd::var({$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::print_modules(asts : ptd::hash(@nast::module_t)) : ptd::hash(@string_compiler::printed_struct_t) {$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::printed_struct_t() {$/;"	l
string_compiler	string_compiler.nl	/^def string_compiler::type_check_t() {$/;"	l
string_compiler::check_type	string_compiler.nl	/^def string_compiler::check_type(type_check : @string_compiler::type_check_t, asts : ptd::hash(@nast::module_t)) : ptd::var({$/;"	g
string_compiler::compile	string_compiler.nl	/^def string_compiler::compile(program : ptd::string(), module_name : ptd::string()) : ptd::var({$/;"	g
string_compiler::compile_to_js	string_compiler.nl	/^def string_compiler::compile_to_js(modules : ptd::hash(ptd::string()), namespace : ptd::string()) : ptd::var({$/;"	g
string_compiler::compile_to_nlasm	string_compiler.nl	/^def string_compiler::compile_to_nlasm(modules : ptd::hash(ptd::string())) : ptd::var({$/;"	g
string_compiler::error_t	string_compiler.nl	/^def string_compiler::error_t() {$/;"	g
string_compiler::modules_t	string_compiler.nl	/^def string_compiler::modules_t() {$/;"	g
string_compiler::parse_module	string_compiler.nl	/^def string_compiler::parse_module(modules : @string_compiler::modules_t) : ptd::var({$/;"	g
string_compiler::print_modules	string_compiler.nl	/^def string_compiler::print_modules(asts : ptd::hash(@nast::module_t)) : ptd::hash(@string_compiler::printed_struct_t) {$/;"	g
string_compiler::printed_struct_t	string_compiler.nl	/^def string_compiler::printed_struct_t() {$/;"	g
string_compiler::type_check_t	string_compiler.nl	/^def string_compiler::type_check_t() {$/;"	g
string_to_nl	pretty_printer.nl	/^def string_to_nl(str : ptd::string()) : ptd::string() {$/;"	l
string_utils	string_utils.nl	/^def string_utils::change(str, from, to) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::char2hex(char) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::erase_leading_zeroes(str : ptd::string()) : ptd::string() {$/;"	l
string_utils	string_utils.nl	/^def string_utils::erase_tail_whitespace(str) : ptd::string() {$/;"	l
string_utils	string_utils.nl	/^def string_utils::erase_tail_zeroes(str : ptd::string()) : ptd::string() {$/;"	l
string_utils	string_utils.nl	/^def string_utils::eval_number(string) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::float2str(float, prec) : ptd::string() {$/;"	l
string_utils	string_utils.nl	/^def string_utils::get_date(string, char) : ptd::var({$/;"	l
string_utils	string_utils.nl	/^def string_utils::get_integer(str) : ptd::var({ok => ptd::string(), err => ptd::string()}) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::get_number(str) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::hex2char(a, b) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::int2str(int, len) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::int2str_leading_digits(int, digits) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::is_alpha(char) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::is_float(obj : ptd::string()) : @boolean_t::type {$/;"	l
string_utils	string_utils.nl	/^def string_utils::is_int(char) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::is_integer(obj : ptd::string()) : @boolean_t::type {$/;"	l
string_utils	string_utils.nl	/^def string_utils::is_integer_possibly_leading_zeros(obj : ptd::string()) : @boolean_t::type {$/;"	l
string_utils	string_utils.nl	/^def string_utils::is_number(string) : @boolean_t::type {$/;"	l
string_utils	string_utils.nl	/^def string_utils::is_whitespace(char) {$/;"	l
string_utils	string_utils.nl	/^def string_utils::starts_with(el, prefix) {$/;"	l
string_utils::change	string_utils.nl	/^def string_utils::change(str, from, to) {$/;"	g
string_utils::char2hex	string_utils.nl	/^def string_utils::char2hex(char) {$/;"	g
string_utils::erase_leading_zeroes	string_utils.nl	/^def string_utils::erase_leading_zeroes(str : ptd::string()) : ptd::string() {$/;"	g
string_utils::erase_tail_whitespace	string_utils.nl	/^def string_utils::erase_tail_whitespace(str) : ptd::string() {$/;"	g
string_utils::erase_tail_zeroes	string_utils.nl	/^def string_utils::erase_tail_zeroes(str : ptd::string()) : ptd::string() {$/;"	g
string_utils::eval_number	string_utils.nl	/^def string_utils::eval_number(string) {$/;"	g
string_utils::float2str	string_utils.nl	/^def string_utils::float2str(float, prec) : ptd::string() {$/;"	g
string_utils::get_date	string_utils.nl	/^def string_utils::get_date(string, char) : ptd::var({$/;"	g
string_utils::get_integer	string_utils.nl	/^def string_utils::get_integer(str) : ptd::var({ok => ptd::string(), err => ptd::string()}) {$/;"	g
string_utils::get_number	string_utils.nl	/^def string_utils::get_number(str) {$/;"	g
string_utils::hex2char	string_utils.nl	/^def string_utils::hex2char(a, b) {$/;"	g
string_utils::int2str	string_utils.nl	/^def string_utils::int2str(int, len) {$/;"	g
string_utils::int2str_leading_digits	string_utils.nl	/^def string_utils::int2str_leading_digits(int, digits) {$/;"	g
string_utils::is_alpha	string_utils.nl	/^def string_utils::is_alpha(char) {$/;"	g
string_utils::is_float	string_utils.nl	/^def string_utils::is_float(obj : ptd::string()) : @boolean_t::type {$/;"	g
string_utils::is_int	string_utils.nl	/^def string_utils::is_int(char) {$/;"	g
string_utils::is_integer	string_utils.nl	/^def string_utils::is_integer(obj : ptd::string()) : @boolean_t::type {$/;"	g
string_utils::is_integer_possibly_leading_zeros	string_utils.nl	/^def string_utils::is_integer_possibly_leading_zeros(obj : ptd::string()) : @boolean_t::type {$/;"	g
string_utils::is_number	string_utils.nl	/^def string_utils::is_number(string) : @boolean_t::type {$/;"	g
string_utils::is_whitespace	string_utils.nl	/^def string_utils::is_whitespace(char) {$/;"	g
string_utils::starts_with	string_utils.nl	/^def string_utils::starts_with(el, prefix) {$/;"	g
struct	pretty_printer.nl	/^	var struct = {imports => [], functions => []};$/;"	v
struct_order	generator_c.nl	/^	var struct_order = generator_c_struct_dependence_sort::sort(asm->functions, state->mod_name);$/;"	v
sub	tct.nl	/^	var sub = hash::get_value(variant as :tct_var, str_case);$/;"	v
sub_patch_out	compiler.nl	/^	var sub_patch_out = get_dir_cache_name();$/;"	v
suffix	generator_java.nl	/^	var suffix = '';$/;"	v
sum	ptd_system.nl	/^			var sum = ptd_system::rec_to_hash(a, ref_inf, ref modules, ref errors, known_types);$/;"	v
sum	ptd_system.nl	/^			var sum = ptd_system::rec_to_hash(b, ref_inf, ref modules, ref errors, known_types);$/;"	v
switched	post_processing.nl	/^	var switched = get_switched_func(state->math_fs, math_fs);$/;"	v
t	type_checker.nl	/^			var t = check_val(dec, ref modules, ref vars, ref errors, known_types);$/;"	v
t	type_checker.nl	/^			var t = hash::get_value(variants, right_val);$/;"	v
t	type_checker.nl	/^		var t = hash::get_value(f, name);$/;"	v
t1	type_checker.nl	/^			var t1 = var_->type;$/;"	v
t2	ptd_system.nl	/^					var t2 = hash::get_value(ret, field);$/;"	v
t2	ptd_system.nl	/^				var t2 = hash::get_value(ret, field);$/;"	v
t2	type_checker.nl	/^			var t2 = hash::get_value(vars_op, var_name)->type;$/;"	v
t_block	flow_graph.nl	/^	var t_block = block_name_to_nr(blocks);$/;"	v
tab	flow_graph.nl	/^	var tab = blocks->tab;$/;"	v
tab	string_utils.nl	/^	var tab = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];$/;"	v
takes_own_arg	generator_c.nl	/^def takes_own_arg(function : @nlasm::function_t) : @boolean_t::type {$/;"	l
takes_own_arg	type_checker.nl	/^def takes_own_arg(function : @tc_types::def_fun_t, defined_types : ptd::hash(@tct::meta_type)) : @boolean_t::type {$/;"	l
target_type_name	generator_c.nl	/^	var target_type_name;$/;"	v
tc_types	tc_types.nl	/^def tc_types::bin_op_type() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::check_info() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::def_fun_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::defs_funs_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::deref_type() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::deref_types() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::env() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::errors_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::fun_arg_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::get_bin_op_def(name : ptd::string()) : @tc_types::bin_op_type {$/;"	l
tc_types	tc_types.nl	/^def tc_types::get_default_type() : @tc_types::type {$/;"	l
tc_types	tc_types.nl	/^def tc_types::lval_path() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::modules_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::ref_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::return_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::special_functions() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::stack_info_type() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::type() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::value_src() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::var_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::vars_t() {$/;"	l
tc_types	tc_types.nl	/^def tc_types::walk_arg() {$/;"	l
tc_types::bin_op_type	tc_types.nl	/^def tc_types::bin_op_type() {$/;"	g
tc_types::check_info	tc_types.nl	/^def tc_types::check_info() {$/;"	g
tc_types::def_fun_t	tc_types.nl	/^def tc_types::def_fun_t() {$/;"	g
tc_types::defs_funs_t	tc_types.nl	/^def tc_types::defs_funs_t() {$/;"	g
tc_types::deref_type	tc_types.nl	/^def tc_types::deref_type() {$/;"	g
tc_types::deref_types	tc_types.nl	/^def tc_types::deref_types() {$/;"	g
tc_types::env	tc_types.nl	/^def tc_types::env() {$/;"	g
tc_types::errors_t	tc_types.nl	/^def tc_types::errors_t() {$/;"	g
tc_types::fun_arg_t	tc_types.nl	/^def tc_types::fun_arg_t() {$/;"	g
tc_types::get_bin_op_def	tc_types.nl	/^def tc_types::get_bin_op_def(name : ptd::string()) : @tc_types::bin_op_type {$/;"	g
tc_types::get_default_type	tc_types.nl	/^def tc_types::get_default_type() : @tc_types::type {$/;"	g
tc_types::lval_path	tc_types.nl	/^def tc_types::lval_path() {$/;"	g
tc_types::modules_t	tc_types.nl	/^def tc_types::modules_t() {$/;"	g
tc_types::ref_t	tc_types.nl	/^def tc_types::ref_t() {$/;"	g
tc_types::return_t	tc_types.nl	/^def tc_types::return_t() {$/;"	g
tc_types::special_functions	tc_types.nl	/^def tc_types::special_functions() {$/;"	g
tc_types::stack_info_type	tc_types.nl	/^def tc_types::stack_info_type() {$/;"	g
tc_types::type	tc_types.nl	/^def tc_types::type() {$/;"	g
tc_types::value_src	tc_types.nl	/^def tc_types::value_src() {$/;"	g
tc_types::var_t	tc_types.nl	/^def tc_types::var_t() {$/;"	g
tc_types::vars_t	tc_types.nl	/^def tc_types::vars_t() {$/;"	g
tc_types::walk_arg	tc_types.nl	/^def tc_types::walk_arg() {$/;"	g
tct	tct.nl	/^def tct::arr(arr_type : @tct::meta_type) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::bool() : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::empty() : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::func() : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::hash(h : @tct::meta_type) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::int() : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::is_own_type(type : @tct::meta_type, defined_types : ptd::hash(@tct::meta_type)) : @boolean_t::type {$/;"	l
tct	tct.nl	/^def tct::meta_type() {$/;"	l
tct	tct.nl	/^def tct::none() {$/;"	l
tct	tct.nl	/^def tct::own_arr(arr_type : @tct::meta_type) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::own_hash(h : @tct::meta_type) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::own_rec(h : ptd::hash(@tct::meta_type)) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::own_type_to_ptd(type : @tct::meta_type, defined_types : ptd::hash(@tct::meta_type)) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::own_var(h) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::rec(h : ptd::hash(@tct::meta_type)) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::ref(name : ptd::string()) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::string() : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::tct_im() : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::try_var_as_case(variant : @tct::meta_type, str_case : ptd::string()) : ptd::var({ok=>@tct::meta_type, err => ptd::string()}) {$/;"	l
tct	tct.nl	/^def tct::var(h) : @tct::meta_type {$/;"	l
tct	tct.nl	/^def tct::void() : @tct::meta_type {$/;"	l
tct::arr	tct.nl	/^def tct::arr(arr_type : @tct::meta_type) : @tct::meta_type {$/;"	g
tct::bool	tct.nl	/^def tct::bool() : @tct::meta_type {$/;"	g
tct::empty	tct.nl	/^def tct::empty() : @tct::meta_type {$/;"	g
tct::func	tct.nl	/^def tct::func() : @tct::meta_type {$/;"	g
tct::hash	tct.nl	/^def tct::hash(h : @tct::meta_type) : @tct::meta_type {$/;"	g
tct::int	tct.nl	/^def tct::int() : @tct::meta_type {$/;"	g
tct::is_own_type	tct.nl	/^def tct::is_own_type(type : @tct::meta_type, defined_types : ptd::hash(@tct::meta_type)) : @boolean_t::type {$/;"	g
tct::meta_type	tct.nl	/^def tct::meta_type() {$/;"	g
tct::none	tct.nl	/^def tct::none() {$/;"	g
tct::own_arr	tct.nl	/^def tct::own_arr(arr_type : @tct::meta_type) : @tct::meta_type {$/;"	g
tct::own_hash	tct.nl	/^def tct::own_hash(h : @tct::meta_type) : @tct::meta_type {$/;"	g
tct::own_rec	tct.nl	/^def tct::own_rec(h : ptd::hash(@tct::meta_type)) : @tct::meta_type {$/;"	g
tct::own_type_to_ptd	tct.nl	/^def tct::own_type_to_ptd(type : @tct::meta_type, defined_types : ptd::hash(@tct::meta_type)) : @tct::meta_type {$/;"	g
tct::own_var	tct.nl	/^def tct::own_var(h) : @tct::meta_type {$/;"	g
tct::rec	tct.nl	/^def tct::rec(h : ptd::hash(@tct::meta_type)) : @tct::meta_type {$/;"	g
tct::ref	tct.nl	/^def tct::ref(name : ptd::string()) : @tct::meta_type {$/;"	g
tct::string	tct.nl	/^def tct::string() : @tct::meta_type {$/;"	g
tct::tct_im	tct.nl	/^def tct::tct_im() : @tct::meta_type {$/;"	g
tct::try_var_as_case	tct.nl	/^def tct::try_var_as_case(variant : @tct::meta_type, str_case : ptd::string()) : ptd::var({ok=>@tct::meta_type, err => ptd::string()}) {$/;"	g
tct::var	tct.nl	/^def tct::var(h) : @tct::meta_type {$/;"	g
tct::void	tct.nl	/^def tct::void() : @tct::meta_type {$/;"	g
temp_structures	translator.nl	/^	var temp_structures = [get_var_register(label, ref state)];$/;"	v
temporary	translator.nl	/^				var temporary = dest_val(bin_op->left, ref state);$/;"	v
temporary	translator.nl	/^		var temporary = dest_val(bin_op->left, ref state);$/;"	v
ternary_op	type_checker.nl	/^	var ternary_op = ternary_op_val->value as :ternary_op;$/;"	v
time	compiler.nl	/^				var time = hash::get_value(cache_time, module);$/;"	v
time	compiler.nl	/^	var time = nsystem::time_microsec();$/;"	v
time	compiler_base/profile.nl	/^	var time = nsystem::time_microsec();$/;"	v
time	interpreter.nl	/^		var time = profile[i]->time;$/;"	v
time	profile_inter.nl	/^		var time = row->time;$/;"	v
time	profile_inter.nl	/^	var time = ptd::ensure(ptd::arr(ptd::string()), nsystem::time_microsec());$/;"	v
tmp	array.nl	/^		var tmp = arr[begin];$/;"	v
tmp	array.nl	/^	var tmp = [];$/;"	v
tmp	hash.nl	/^	var tmp = hash::has_key(hash, key1) ? hash::get_value(hash, key1) : {};$/;"	v
tmp	nparser.nl	/^		var tmp = {};$/;"	v
tmp	ptd.nl	/^			var tmp = reconstruct(item, ptd_arr, f, args);$/;"	v
tmp	ptd.nl	/^			var tmp = reconstruct(val, hash::get_value(ptd_hash, key), f, args);$/;"	v
tmp	ptd.nl	/^			var tmp = reconstruct(val, hash::get_value(ptd_rec, key), f, args);$/;"	v
tmp	ptd.nl	/^			var tmp = try_dynamic_cast(par, ov::get_value(value));$/;"	v
tmp	ptd.nl	/^			var tmp = try_dynamic_cast(ptd_arr, value[i]);$/;"	v
tmp	ptd.nl	/^			var tmp = try_dynamic_cast(ptd_hash, val);$/;"	v
tmp	ptd.nl	/^			var tmp = try_dynamic_cast(val, hash::get_value(value, key));$/;"	v
tmp	ptd.nl	/^		var tmp = reconstruct(value, item_ptd, f, args);$/;"	v
tmp	ptd.nl	/^		var tmp = try_dynamic_cast(exec(type, []), value);$/;"	v
tmp	ptd.nl	/^	var tmp = try_dynamic_cast(type, value);$/;"	v
tmp	type_checker.nl	/^			var tmp = modules->env->breaks->vars;$/;"	v
tmp2	nparser.nl	/^			var tmp2 = {};$/;"	v
tmp_destination	translator.nl	/^				var tmp_destination = destination;$/;"	v
tmp_destination	translator.nl	/^		var tmp_destination = destination;$/;"	v
tmp_destination	translator.nl	/^	var tmp_destination = destination;$/;"	v
tmp_destination	translator.nl	/^	var tmp_destination = value_register;$/;"	v
to_delete	type_checker.nl	/^	var to_delete : ptd::arr(ptd::string()) = [];$/;"	v
to_parse	compiler.nl	/^	var to_parse = {};$/;"	v
to_ret	interpreter.nl	/^		var to_ret = {};$/;"	v
to_save	compiler.nl	/^	var to_save = {};$/;"	v
to_type	ptd_system.nl	/^			var to_type = hash::get_value(b as :tct_var, name);$/;"	v
to_type	ptd_system.nl	/^			var to_type = hash::get_value(vars, name);$/;"	v
to_types	type_checker.nl	/^				var to_types = info->to as :tct_own_var;$/;"	v
to_types	type_checker.nl	/^				var to_types = info->to as :tct_var;$/;"	v
tok	nparser.nl	/^		var tok = ntokenizer::get_token(ref state->state);$/;"	v
token	nparser.nl	/^		var token : ptd::string() = ntokenizer::get_token(ref state->state);$/;"	v
translate	compiler.nl	/^def translate(asts : ptd::hash(@nast::module_t), ref post_proc : @post_processing_t::state_t) : ptd::hash(@nlasm::result_t) {$/;"	l
translator	translator.nl	/^def translator::function_logic_t() {$/;"	l
translator	translator.nl	/^def translator::last_debug_char(debug : @nast::debug_t) : @nast::debug_t {$/;"	l
translator	translator.nl	/^def translator::loop() {$/;"	l
translator	translator.nl	/^def translator::loop_label() {$/;"	l
translator	translator.nl	/^def translator::lvalue_values_t() {$/;"	l
translator	translator.nl	/^def translator::ref_rec_args_t() {$/;"	l
translator	translator.nl	/^def translator::state_t() {$/;"	l
translator	translator.nl	/^def translator::string_t() {$/;"	l
translator	translator.nl	/^def translator::struct_of_lvalue_t() {$/;"	l
translator	translator.nl	/^def translator::translate(ast : @nast::module_t, defined_types : ptd::hash(@tct::meta_type)) : @nlasm::result_t {$/;"	l
translator::function_logic_t	translator.nl	/^def translator::function_logic_t() {$/;"	g
translator::last_debug_char	translator.nl	/^def translator::last_debug_char(debug : @nast::debug_t) : @nast::debug_t {$/;"	g
translator::loop	translator.nl	/^def translator::loop() {$/;"	g
translator::loop_label	translator.nl	/^def translator::loop_label() {$/;"	g
translator::lvalue_values_t	translator.nl	/^def translator::lvalue_values_t() {$/;"	g
translator::ref_rec_args_t	translator.nl	/^def translator::ref_rec_args_t() {$/;"	g
translator::state_t	translator.nl	/^def translator::state_t() {$/;"	g
translator::string_t	translator.nl	/^def translator::string_t() {$/;"	g
translator::struct_of_lvalue_t	translator.nl	/^def translator::struct_of_lvalue_t() {$/;"	g
translator::translate	translator.nl	/^def translator::translate(ast : @nast::module_t, defined_types : ptd::hash(@tct::meta_type)) : @nlasm::result_t {$/;"	g
try_dynamic_cast	ptd.nl	/^def try_dynamic_cast(type, value) : @ptd::cast_error_t {$/;"	l
try_eat	nparser.nl	/^def try_eat(ref state : @nparser::state_t, token : ptd::string()) : @boolean_t::type {$/;"	l
try_get_operator	ntokenizer.nl	/^def try_get_operator(state : @ntokenizer::state_t, ref char : ptd::string()) {$/;"	l
try_save_file	compiler.nl	/^def try_save_file(file : ptd::string(), path : ptd::string(), ref error) {$/;"	l
tt	type_checker.nl	/^			var tt : ptd::hash(@tct::meta_type) = ltype->type as :tct_rec;$/;"	v
ty	type_checker.nl	/^			var ty = check_val(el->val, ref modules, ref vars, ref errors, known_types);$/;"	v
ty	type_checker.nl	/^			var ty = check_val(variant->var, ref modules, ref vars, ref errors, known_types);$/;"	v
type	generator_c.nl	/^				var type = get_type_to_c(func->args_type[arg_id]->type as :type, '');$/;"	v
type	generator_c.nl	/^	var type = get_type_name(hash_type);$/;"	v
type	generator_c_struct_dependence_sort.nl	/^	var type;$/;"	v
type	type_checker.nl	/^		var type : @tc_types::type = fun_val_type[0];$/;"	v
type	type_checker.nl	/^		var type : @tct::meta_type = as_fun->args[0]->val->type;$/;"	v
type	type_checker.nl	/^		var type = check_val(expr, ref modules, ref vars, ref errors, known_types);$/;"	v
type	type_checker.nl	/^		var type = check_val(lval->right, ref modules, ref vars, ref errors, known_types);$/;"	v
type	type_checker.nl	/^		var type = check_val(unary_op->val, ref modules, ref vars, ref errors, known_types);$/;"	v
type	type_checker.nl	/^		var type = ptd_system::can_delete(fun_val_type[0], ref modules, ref errors);$/;"	v
type	type_checker.nl	/^		var type = {type => modules->env->ret_type, src => :speculation};$/;"	v
type_checker	type_checker.nl	/^def type_checker::check(modules : ptd::hash(@nast::module_t), lib_modules : ptd::hash(@nast::module_t)) :$/;"	l
type_checker	type_checker.nl	/^def type_checker::check_modules(ref modules : ptd::hash(@nast::module_t), lib_modules : ptd::hash(@nast::module_t)) :$/;"	l
type_checker::check	type_checker.nl	/^def type_checker::check(modules : ptd::hash(@nast::module_t), lib_modules : ptd::hash(@nast::module_t)) :$/;"	g
type_checker::check_modules	type_checker.nl	/^def type_checker::check_modules(ref modules : ptd::hash(@nast::module_t), lib_modules : ptd::hash(@nast::module_t)) :$/;"	g
type_errors	compiler.nl	/^			var type_errors = hash::get_value(all_errors->type_errors, module);$/;"	v
type_errors	compiler.nl	/^	var type_errors = array::len(ret->errors);$/;"	v
type_from_src	translator.nl	/^	var type_from_src;$/;"	v
type_is_match	type_checker.nl	/^	var type_is_match : @boolean_t::type = false;$/;"	v
type_name	generator_c.nl	/^				var type_name = get_type_name(mk->dest->type as :variant);$/;"	v
type_name	generator_c.nl	/^			var type_name = get_type_name(len->src->type as :arr);$/;"	v
type_name	generator_c.nl	/^			var type_name = get_type_name(push->dest->type as :arr);$/;"	v
type_name	generator_c.nl	/^			var type_name = get_type_name(type);$/;"	v
type_name	ptd_system.nl	/^		var type_name = add_ref_name(ref a, ref ref_inf->to, ref arr_to, ref_inf->level, ref modules, ref errors);$/;"	v
type_name	ptd_system.nl	/^		var type_name = add_ref_name(ref b, ref ref_inf->from, ref arr_from, ref_inf->level, ref modules, ref errors);$/;"	v
type_name	ptd_system.nl	/^		var type_name = from->type as :tct_ref;$/;"	v
type_name	ptd_system.nl	/^	var type_name = from as :tct_ref;$/;"	v
type_name	translator.nl	/^		var type_name = type as :tct_ref;$/;"	v
type_to_ptd	type_checker.nl	/^def type_to_ptd(type : @nast::variable_type_t, ref errors : @tc_types::errors_t) : @tct::meta_type {$/;"	l
type_to_var	generator_c_struct_dependence_sort.nl	/^def type_to_var(name : ptd::string(), type : @generator_c_struct_dependence_sort::decl_def_type)$/;"	l
type_warnings	compiler.nl	/^			var type_warnings = hash::get_value(all_errors->type_warnings, module);$/;"	v
types	generator_c_struct_dependence_sort.nl	/^	var types : ptd::hash(@tct::meta_type) = {};$/;"	v
types	generator_c_struct_dependence_sort.nl	/^	var types = {};$/;"	v
types	own.nl	/^	var types = {};$/;"	v
types	ptd.nl	/^	var types = {};$/;"	v
types	tct.nl	/^	var types = {};$/;"	v
types	type_checker.nl	/^		var types : ptd::arr(@tc_types::type) = [];$/;"	v
types_ret	string_compiler.nl	/^			var types_ret = type_checker::check_modules(ref asts, asts);$/;"	v
types_ret	string_compiler.nl	/^		var types_ret = type_checker::check_modules(ref check, lib);$/;"	v
types_ret	string_compiler.nl	/^	var types_ret = type_checker::check_modules(ref asts, asts);$/;"	v
unary_op	type_checker.nl	/^	var unary_op = unary_op_val->value as :unary_op;$/;"	v
unary_op_dec_inc	type_checker.nl	/^def unary_op_dec_inc(type : @nast::value_t, err_str : ptd::string(), ref modules : @tc_types::modules_t, ref vars : $/;"	l
undef_reg	translator.nl	/^def undef_reg(reg : @nlasm::reg_t, ref state : @translator::state_t) {$/;"	l
unknown	post_processing.nl	/^	var unknown : @post_processing_t::math_funs_t = {};$/;"	v
unless_cond_type	type_checker.nl	/^		var unless_cond_type : @tc_types::type = check_val(unless_mod->cond, ref modules, ref vars, ref errors, known_types);$/;"	v
unnecessary_commands	unnecessary_commands.nl	/^def unnecessary_commands::block_state_t() {$/;"	l
unnecessary_commands	unnecessary_commands.nl	/^def unnecessary_commands::delete_unnecessary_commands(ref func : @nlasm::function_t) {$/;"	l
unnecessary_commands	unnecessary_commands.nl	/^def unnecessary_commands::graph_t() {$/;"	l
unnecessary_commands	unnecessary_commands.nl	/^def unnecessary_commands::state_t() {$/;"	l
unnecessary_commands::block_state_t	unnecessary_commands.nl	/^def unnecessary_commands::block_state_t() {$/;"	g
unnecessary_commands::delete_unnecessary_commands	unnecessary_commands.nl	/^def unnecessary_commands::delete_unnecessary_commands(ref func : @nlasm::function_t) {$/;"	g
unnecessary_commands::graph_t	unnecessary_commands.nl	/^def unnecessary_commands::graph_t() {$/;"	g
unnecessary_commands::state_t	unnecessary_commands.nl	/^def unnecessary_commands::state_t() {$/;"	g
unwrap_ref	translator.nl	/^def unwrap_ref(type : @tct::meta_type, defined_types : ptd::hash(@tct::meta_type)) : @tct::meta_type {$/;"	l
unwrap_ref	type_checker.nl	/^def unwrap_ref(type : @tct::meta_type, ref modules : @tc_types::modules_t, ref errors : @tc_types::errors_t)$/;"	l
update_inits	module_checker.nl	/^def update_inits(ref state : @module_checker::state_t, ref inits : @module_checker::init_checker_t) : ptd::void() {$/;"	l
use_field	translator.nl	/^def use_field(new_owner : @nlasm::reg_t, old_owner : @nlasm::reg_t, field_name : ptd::string(), ref state : @translator::state_t) : ptd::void() {$/;"	l
use_hash_index	translator.nl	/^def use_hash_index(new_owner : @nlasm::reg_t, old_owner : @nlasm::reg_t, index : @nlasm::reg_t,$/;"	l
use_index	translator.nl	/^def use_index(new_owner : @nlasm::reg_t, old_owner : @nlasm::reg_t, index : @nlasm::reg_t, ref state : @translator::state_t) : ptd::void() {$/;"	l
use_var	module_checker.nl	/^def use_var(name : ptd::string(), mode : ptd::var({mod => ptd::none(), set => ptd::none(), get => ptd::none()}), ref state $/;"	l
use_variant	translator.nl	/^def use_variant(new_owner : @nlasm::reg_t, old_owner : @nlasm::reg_t, label : ptd::string(), ref state : @translator::state_t) : ptd::void() {$/;"	l
usec	compiler_base/profile.nl	/^	var usec = a[1] - b[1];$/;"	v
usec	profile_inter.nl	/^	var usec = a[1] - b[1];$/;"	v
used	post_processing.nl	/^				var used = {};$/;"	v
used	post_processing.nl	/^	var used = {};$/;"	v
used_functions	compiler.nl	/^		var used_functions = {};$/;"	v
used_variants	type_checker.nl	/^		var used_variants : ptd::hash(@boolean_t::type) = {};$/;"	v
val	const_evaluator.nl	/^		var val = interpreter::get_none_variant();$/;"	v
val	const_evaluator.nl	/^	var val = {was => 0, regs => []};$/;"	v
val	dfile.nl	/^			var val = hash::get_value(obj, key);$/;"	v
val	dfile.nl	/^			var val = parse(ref state, ref error);$/;"	v
val	dfile.nl	/^		var val = hash::get_value(obj, key);$/;"	v
val	dfile.nl	/^	var val = parse(ref state, ref error);$/;"	v
val	generator_c.nl	/^				var val;$/;"	v
val	interpreter.nl	/^			var val = state->top->vars[map->val->reg_no];$/;"	v
val	interpreter.nl	/^		var val = element->vars[reg->reg_no];$/;"	v
val	interpreter.nl	/^		var val = hash::get_value(state->top->vars[get_val->src->reg_no], get_val->key);$/;"	v
val	interpreter.nl	/^		var val = state->top->vars[set_at_idx->val->reg_no];$/;"	v
val	interpreter.nl	/^		var val = state->top->vars[set_val->val->reg_no];$/;"	v
val	interpreter.nl	/^		var val;$/;"	v
val	module_checker.nl	/^	var val = {write => :none, read => false, is_required => is_required, initialized => initialized};$/;"	v
val	post_processing.nl	/^	var val = {was => 0, regs => []};$/;"	v
val	pretty_printer.nl	/^	var val : @wprinter::pretty_t = print_val(value);$/;"	v
val_reg_type	translator.nl	/^	var val_reg_type = value_type_to_reg_type(value, ref state);$/;"	v
val_type	type_checker.nl	/^	var val_type : @tc_types::type = ptd_system::can_delete(check_val(as_match->val, ref modules, ref vars, ref errors, known_types), $/;"	v
value	dfile.nl	/^			var value = parse(ref state, ref error);$/;"	v
value	generator_c.nl	/^				var value = (cmd->cmd as :load_const)->val;$/;"	v
value	generator_c.nl	/^				var value = get_value_from_im(func->args_type[arg_id]->register->type, '(_tab[' . arg_id . '])');$/;"	v
value	interpreter.nl	/^			var value = old_vars[arg];$/;"	v
value	interpreter.nl	/^		var value;$/;"	v
value	nparser.nl	/^		var value : @nast::value_t;$/;"	v
value_register	translator.nl	/^	var value_register = print_var_decl(as_forh->val, ref state, :reference);$/;"	v
value_register	translator.nl	/^	var value_register = print_var_decl(as_forh->val, ref state, :value);$/;"	v
value_type	translator.nl	/^	var value_type = value->type;$/;"	v
value_type	type_checker.nl	/^		var value_type = unwrap_ref(value->type, ref modules, ref errors);$/;"	v
value_type	type_checker.nl	/^	var value_type;$/;"	v
value_type_to_reg_type	translator.nl	/^def value_type_to_reg_type(value : @nast::value_t, ref state : @translator::state_t) : @nlasm::reg_type {$/;"	l
var_	type_checker.nl	/^		var var_ = hash::get_value(vars, variable_name);$/;"	v
var_	type_checker.nl	/^	var var_ = hash::get_value(vars, var_name);$/;"	v
var_decl	type_checker.nl	/^				var var_decl = block[i]->cmd as :var_decl;$/;"	v
var_decl	type_checker.nl	/^			var var_decl = as_for->start as :var_decl;$/;"	v
var_name	generator_java.nl	/^		var var_name = 'value__singleton__' . sin_name;$/;"	v
var_name	generator_js.nl	/^		var var_name = '__singleton_value_' . get_function_name(sin_fun, module_name);$/;"	v
var_name	type_checker.nl	/^					var var_name = var_tab[0] as :var;$/;"	v
var_name	type_checker.nl	/^	var var_name = var_tab[0] as :var;$/;"	v
var_reg	translator.nl	/^				var var_reg = print_var_decl(variant_value->declaration, ref state, :reference);$/;"	v
var_reg	translator.nl	/^				var var_reg = print_var_decl(variant_value->declaration, ref state, :value);$/;"	v
var_tab	type_checker.nl	/^				var var_tab = rec_get_var_from_lval(fun_val_arg->val, ref errors);$/;"	v
var_tab	type_checker.nl	/^	var var_tab = rec_get_var_from_lval(lval, ref errors);$/;"	v
var_type_to_reg_type	translator.nl	/^def var_type_to_reg_type(type : @tct::meta_type, defined_types : ptd::hash(@tct::meta_type)) : @nlasm::reg_type {$/;"	l
var_value	translator.nl	/^		var var_value;$/;"	v
variant	ptd.nl	/^		var variant = hash::get_value(ptd_var, name);$/;"	v
variant	type_checker.nl	/^			var variant = ltype->type as :tct_var;$/;"	v
variant_label	generator_c.nl	/^		var variant_label = get_const_sim(ref state, ptd::ensure(ptd::string(), ov::get_element(obj)));$/;"	v
variant_name	type_checker.nl	/^			var variant_name : ptd::string() = branch->variant->name;$/;"	v
variant_name	type_checker.nl	/^		var variant_name : ptd::string() = branch->variant->name;$/;"	v
variant_type	translator.nl	/^	var variant_type = unwrap_ref(variant, state->logic->defined_types);$/;"	v
variant_type	translator.nl	/^	var variant_type;$/;"	v
variant_type	type_checker.nl	/^	var variant_type = unwrap_ref(as_match->val->type, ref modules, ref errors);$/;"	v
variant_values	translator.nl	/^			var variant_values = unwrap_ref(val->type, state->logic->defined_types) as :tct_own_var;$/;"	v
variants	type_checker.nl	/^			var variants = left_type2->type as :tct_var;$/;"	v
variants	type_checker.nl	/^			var variants;$/;"	v
variants	type_checker.nl	/^	var variants : ptd::hash(ptd::var({with_param => @tct::meta_type, no_param => ptd::none()})) = {};$/;"	v
vars	type_checker.nl	/^	var vars : @tc_types::vars_t = b_vars;$/;"	v
vars_case	type_checker.nl	/^		var vars_case : @tc_types::vars_t = vars;$/;"	v
vars_cmd	type_checker.nl	/^			var vars_cmd : @tc_types::vars_t = vars;$/;"	v
vars_err_type	type_checker.nl	/^		var vars_err_type = check_try_ensure(as_ensure, ref modules, ref vars, ref errors, known_types);$/;"	v
vars_err_type	type_checker.nl	/^		var vars_err_type = check_try_ensure(as_try, ref modules, ref vars, ref errors, known_types);$/;"	v
vars_op	type_checker.nl	/^		var vars_op : @tc_types::vars_t = vars;$/;"	v
vars_op	type_checker.nl	/^	var vars_op : @tc_types::vars_t = vars;$/;"	v
visit_node	unnecessary_commands.nl	/^def visit_node(graph : @unnecessary_commands::graph_t, cmd_nr : ptd::string(), ref visited_nodes : ptd::hash(ptd::string())) {$/;"	l
visited_blocks	unnecessary_commands.nl	/^	var visited_blocks = {};$/;"	v
visited_nodes	unnecessary_commands.nl	/^	var visited_nodes = {};$/;"	v
vtype	type_checker.nl	/^	var vtype = check_val(type, ref modules, ref vars, ref errors, known_types);$/;"	v
walk_on_type	ptd_system.nl	/^def walk_on_type(type : @tct::meta_type, operation : ptd::var({create => ptd::none(), delete => ptd::none()}), ref_inf : $/;"	l
was	module_checker.nl	/^		var was = state->return->was;$/;"	v
was	module_checker.nl	/^		var was = true;$/;"	v
was_input	compiler.nl	/^	var was_input = false;$/;"	v
was_singleton	generator_c.nl	/^	var was_singleton = false;$/;"	v
was_singleton	generator_java.nl	/^	var was_singleton = false;$/;"	v
was_singleton	generator_js.nl	/^	var was_singleton = false;$/;"	v
was_singleton	generator_pm.nl	/^	var was_singleton = false;$/;"	v
while_debug	translator.nl	/^	var while_debug = state->debug->nast_debug;$/;"	v
word	nparser.nl	/^	var word : ptd::string() = ntokenizer::eat_type(ref state->state, :word);$/;"	v
wprinter	wprinter.nl	/^def wprinter::arr_kind_t() {$/;"	l
wprinter	wprinter.nl	/^def wprinter::build_pretty_a(arr : @wprinter::pretty_arr_t) : @wprinter::pretty_t {$/;"	l
wprinter	wprinter.nl	/^def wprinter::build_pretty_arr_decl(arr : @wprinter::pretty_arr_t, start : ptd::string(), end : ptd::string()) : $/;"	l
wprinter	wprinter.nl	/^def wprinter::build_pretty_bind(a : @wprinter::pretty_t, b : @wprinter::pretty_t) : @wprinter::pretty_t {$/;"	l
wprinter	wprinter.nl	/^def wprinter::build_pretty_l(arr : @wprinter::pretty_arr_t) : @wprinter::pretty_t {$/;"	l
wprinter	wprinter.nl	/^def wprinter::build_pretty_op_l(arr : @wprinter::pretty_arr_t) : @wprinter::pretty_t {$/;"	l
wprinter	wprinter.nl	/^def wprinter::build_sim(str : ptd::string()) : @wprinter::pretty_t {$/;"	l
wprinter	wprinter.nl	/^def wprinter::build_str_arr(str_arr : ptd::arr(ptd::string()), last : ptd::var({$/;"	l
wprinter	wprinter.nl	/^def wprinter::get_sep() : @wprinter::pretty_t {$/;"	l
wprinter	wprinter.nl	/^def wprinter::pretty_arr_t() {$/;"	l
wprinter	wprinter.nl	/^def wprinter::pretty_t() {$/;"	l
wprinter	wprinter.nl	/^def wprinter::print_t(ref state : @wprinter::state_t, wise_s : @wprinter::pretty_t, ind : ptd::string()) : ptd::void() {$/;"	l
wprinter	wprinter.nl	/^def wprinter::state_t() {$/;"	l
wprinter	wprinter.nl	/^def wprinter::str_arr_t() {$/;"	l
wprinter::arr_kind_t	wprinter.nl	/^def wprinter::arr_kind_t() {$/;"	g
wprinter::build_pretty_a	wprinter.nl	/^def wprinter::build_pretty_a(arr : @wprinter::pretty_arr_t) : @wprinter::pretty_t {$/;"	g
wprinter::build_pretty_arr_decl	wprinter.nl	/^def wprinter::build_pretty_arr_decl(arr : @wprinter::pretty_arr_t, start : ptd::string(), end : ptd::string()) : $/;"	g
wprinter::build_pretty_bind	wprinter.nl	/^def wprinter::build_pretty_bind(a : @wprinter::pretty_t, b : @wprinter::pretty_t) : @wprinter::pretty_t {$/;"	g
wprinter::build_pretty_l	wprinter.nl	/^def wprinter::build_pretty_l(arr : @wprinter::pretty_arr_t) : @wprinter::pretty_t {$/;"	g
wprinter::build_pretty_op_l	wprinter.nl	/^def wprinter::build_pretty_op_l(arr : @wprinter::pretty_arr_t) : @wprinter::pretty_t {$/;"	g
wprinter::build_sim	wprinter.nl	/^def wprinter::build_sim(str : ptd::string()) : @wprinter::pretty_t {$/;"	g
wprinter::build_str_arr	wprinter.nl	/^def wprinter::build_str_arr(str_arr : ptd::arr(ptd::string()), last : ptd::var({$/;"	g
wprinter::get_sep	wprinter.nl	/^def wprinter::get_sep() : @wprinter::pretty_t {$/;"	g
wprinter::pretty_arr_t	wprinter.nl	/^def wprinter::pretty_arr_t() {$/;"	g
wprinter::pretty_t	wprinter.nl	/^def wprinter::pretty_t() {$/;"	g
wprinter::print_t	wprinter.nl	/^def wprinter::print_t(ref state : @wprinter::state_t, wise_s : @wprinter::pretty_t, ind : ptd::string()) : ptd::void() {$/;"	g
wprinter::state_t	wprinter.nl	/^def wprinter::state_t() {$/;"	g
wprinter::str_arr_t	wprinter.nl	/^def wprinter::str_arr_t() {$/;"	g
write_reg	flow_graph.nl	/^def write_reg(ref block : @flow_graph::block_t, reg : @nlasm::reg_t, cmd_nr : ptd::string()) {$/;"	l
